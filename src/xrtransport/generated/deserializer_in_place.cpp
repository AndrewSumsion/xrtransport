/*
 * AUTO-GENERATED FILE - DO NOT EDIT DIRECTLY
 *
 * This file was automatically generated by the code_generation module.
 * Any changes made to this file will be lost when regenerated.
 *
 * To modify this file, edit the corresponding template in:
 * code_generation/templates/structs/deserializer_in_place_impl.mako
 */







#include "xrtransport/generated/deserializer_in_place.h"

namespace xrtransport {

std::unordered_map<XrStructureType, StructDeserializerInPlace> deserializer_in_place_lookup_table = {

#ifdef XRTRANSPORT_EXT_XR_KHR_android_thread_settings
#endif // XRTRANSPORT_EXT_XR_KHR_android_thread_settings
#ifdef XRTRANSPORT_EXT_XR_KHR_android_surface_swapchain
#endif // XRTRANSPORT_EXT_XR_KHR_android_surface_swapchain
#ifdef XRTRANSPORT_EXT_XR_KHR_composition_layer_cube

    {XR_TYPE_COMPOSITION_LAYER_CUBE_KHR, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrCompositionLayerCubeKHR)},


    {XR_TYPE_COMPOSITION_LAYER_CUBE_KHR, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrCompositionLayerCubeKHR)},

#endif // XRTRANSPORT_EXT_XR_KHR_composition_layer_cube
#ifdef XRTRANSPORT_EXT_XR_KHR_android_create_instance

    {XR_TYPE_INSTANCE_CREATE_INFO_ANDROID_KHR, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrInstanceCreateInfoAndroidKHR)},


    {XR_TYPE_INSTANCE_CREATE_INFO_ANDROID_KHR, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrInstanceCreateInfoAndroidKHR)},

#endif // XRTRANSPORT_EXT_XR_KHR_android_create_instance
#ifdef XRTRANSPORT_EXT_XR_KHR_composition_layer_depth

    {XR_TYPE_COMPOSITION_LAYER_DEPTH_INFO_KHR, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrCompositionLayerDepthInfoKHR)},


    {XR_TYPE_COMPOSITION_LAYER_DEPTH_INFO_KHR, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrCompositionLayerDepthInfoKHR)},

#endif // XRTRANSPORT_EXT_XR_KHR_composition_layer_depth
#ifdef XRTRANSPORT_EXT_XR_KHR_vulkan_swapchain_format_list

    {XR_TYPE_VULKAN_SWAPCHAIN_FORMAT_LIST_CREATE_INFO_KHR, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrVulkanSwapchainFormatListCreateInfoKHR)},


    {XR_TYPE_VULKAN_SWAPCHAIN_FORMAT_LIST_CREATE_INFO_KHR, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrVulkanSwapchainFormatListCreateInfoKHR)},

#endif // XRTRANSPORT_EXT_XR_KHR_vulkan_swapchain_format_list
#ifdef XRTRANSPORT_EXT_XR_EXT_performance_settings

    {XR_TYPE_EVENT_DATA_PERF_SETTINGS_EXT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEventDataPerfSettingsEXT)},


    {XR_TYPE_EVENT_DATA_PERF_SETTINGS_EXT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEventDataPerfSettingsEXT)},

#endif // XRTRANSPORT_EXT_XR_EXT_performance_settings
#ifdef XRTRANSPORT_EXT_XR_EXT_thermal_query
#endif // XRTRANSPORT_EXT_XR_EXT_thermal_query
#ifdef XRTRANSPORT_EXT_XR_KHR_composition_layer_cylinder

    {XR_TYPE_COMPOSITION_LAYER_CYLINDER_KHR, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrCompositionLayerCylinderKHR)},


    {XR_TYPE_COMPOSITION_LAYER_CYLINDER_KHR, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrCompositionLayerCylinderKHR)},

#endif // XRTRANSPORT_EXT_XR_KHR_composition_layer_cylinder
#ifdef XRTRANSPORT_EXT_XR_KHR_composition_layer_equirect

    {XR_TYPE_COMPOSITION_LAYER_EQUIRECT_KHR, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrCompositionLayerEquirectKHR)},


    {XR_TYPE_COMPOSITION_LAYER_EQUIRECT_KHR, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrCompositionLayerEquirectKHR)},

#endif // XRTRANSPORT_EXT_XR_KHR_composition_layer_equirect
#ifdef XRTRANSPORT_EXT_XR_EXT_debug_utils

    {XR_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrDebugUtilsObjectNameInfoEXT)},


    {XR_TYPE_DEBUG_UTILS_LABEL_EXT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrDebugUtilsLabelEXT)},


    {XR_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrDebugUtilsMessengerCallbackDataEXT)},


    {XR_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrDebugUtilsMessengerCreateInfoEXT)},


    {XR_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrDebugUtilsObjectNameInfoEXT)},


    {XR_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrDebugUtilsMessengerCallbackDataEXT)},


    {XR_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrDebugUtilsMessengerCreateInfoEXT)},


    {XR_TYPE_DEBUG_UTILS_LABEL_EXT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrDebugUtilsLabelEXT)},

#endif // XRTRANSPORT_EXT_XR_EXT_debug_utils
#ifdef XRTRANSPORT_EXT_XR_KHR_opengl_enable

    {XR_TYPE_GRAPHICS_BINDING_OPENGL_WIN32_KHR, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrGraphicsBindingOpenGLWin32KHR)},


    {XR_TYPE_GRAPHICS_BINDING_OPENGL_XLIB_KHR, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrGraphicsBindingOpenGLXlibKHR)},


    {XR_TYPE_GRAPHICS_BINDING_OPENGL_XCB_KHR, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrGraphicsBindingOpenGLXcbKHR)},


    {XR_TYPE_GRAPHICS_BINDING_OPENGL_WAYLAND_KHR, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrGraphicsBindingOpenGLWaylandKHR)},


    {XR_TYPE_SWAPCHAIN_IMAGE_OPENGL_KHR, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSwapchainImageOpenGLKHR)},


    {XR_TYPE_GRAPHICS_REQUIREMENTS_OPENGL_KHR, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrGraphicsRequirementsOpenGLKHR)},


    {XR_TYPE_GRAPHICS_BINDING_OPENGL_WIN32_KHR, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrGraphicsBindingOpenGLWin32KHR)},


    {XR_TYPE_GRAPHICS_BINDING_OPENGL_XLIB_KHR, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrGraphicsBindingOpenGLXlibKHR)},


    {XR_TYPE_GRAPHICS_BINDING_OPENGL_XCB_KHR, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrGraphicsBindingOpenGLXcbKHR)},


    {XR_TYPE_GRAPHICS_BINDING_OPENGL_WAYLAND_KHR, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrGraphicsBindingOpenGLWaylandKHR)},


    {XR_TYPE_SWAPCHAIN_IMAGE_OPENGL_KHR, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSwapchainImageOpenGLKHR)},


    {XR_TYPE_GRAPHICS_REQUIREMENTS_OPENGL_KHR, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrGraphicsRequirementsOpenGLKHR)},

#endif // XRTRANSPORT_EXT_XR_KHR_opengl_enable
#ifdef XRTRANSPORT_EXT_XR_KHR_opengl_es_enable

    {XR_TYPE_GRAPHICS_BINDING_OPENGL_ES_ANDROID_KHR, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrGraphicsBindingOpenGLESAndroidKHR)},


    {XR_TYPE_SWAPCHAIN_IMAGE_OPENGL_ES_KHR, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSwapchainImageOpenGLESKHR)},


    {XR_TYPE_GRAPHICS_REQUIREMENTS_OPENGL_ES_KHR, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrGraphicsRequirementsOpenGLESKHR)},


    {XR_TYPE_GRAPHICS_BINDING_OPENGL_ES_ANDROID_KHR, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrGraphicsBindingOpenGLESAndroidKHR)},


    {XR_TYPE_SWAPCHAIN_IMAGE_OPENGL_ES_KHR, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSwapchainImageOpenGLESKHR)},


    {XR_TYPE_GRAPHICS_REQUIREMENTS_OPENGL_ES_KHR, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrGraphicsRequirementsOpenGLESKHR)},

#endif // XRTRANSPORT_EXT_XR_KHR_opengl_es_enable
#ifdef XRTRANSPORT_EXT_XR_KHR_vulkan_enable

    {XR_TYPE_GRAPHICS_BINDING_VULKAN_KHR, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrGraphicsBindingVulkanKHR)},


    {XR_TYPE_SWAPCHAIN_IMAGE_VULKAN_KHR, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSwapchainImageVulkanKHR)},


    {XR_TYPE_GRAPHICS_REQUIREMENTS_VULKAN_KHR, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrGraphicsRequirementsVulkanKHR)},


    {XR_TYPE_GRAPHICS_BINDING_VULKAN_KHR, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrGraphicsBindingVulkanKHR)},


    {XR_TYPE_SWAPCHAIN_IMAGE_VULKAN_KHR, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSwapchainImageVulkanKHR)},


    {XR_TYPE_GRAPHICS_REQUIREMENTS_VULKAN_KHR, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrGraphicsRequirementsVulkanKHR)},

#endif // XRTRANSPORT_EXT_XR_KHR_vulkan_enable
#ifdef XRTRANSPORT_EXT_XR_KHR_D3D11_enable

    {XR_TYPE_GRAPHICS_BINDING_D3D11_KHR, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrGraphicsBindingD3D11KHR)},


    {XR_TYPE_SWAPCHAIN_IMAGE_D3D11_KHR, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSwapchainImageD3D11KHR)},


    {XR_TYPE_GRAPHICS_REQUIREMENTS_D3D11_KHR, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrGraphicsRequirementsD3D11KHR)},


    {XR_TYPE_GRAPHICS_BINDING_D3D11_KHR, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrGraphicsBindingD3D11KHR)},


    {XR_TYPE_SWAPCHAIN_IMAGE_D3D11_KHR, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSwapchainImageD3D11KHR)},


    {XR_TYPE_GRAPHICS_REQUIREMENTS_D3D11_KHR, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrGraphicsRequirementsD3D11KHR)},

#endif // XRTRANSPORT_EXT_XR_KHR_D3D11_enable
#ifdef XRTRANSPORT_EXT_XR_KHR_D3D12_enable

    {XR_TYPE_GRAPHICS_BINDING_D3D12_KHR, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrGraphicsBindingD3D12KHR)},


    {XR_TYPE_SWAPCHAIN_IMAGE_D3D12_KHR, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSwapchainImageD3D12KHR)},


    {XR_TYPE_GRAPHICS_REQUIREMENTS_D3D12_KHR, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrGraphicsRequirementsD3D12KHR)},


    {XR_TYPE_GRAPHICS_BINDING_D3D12_KHR, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrGraphicsBindingD3D12KHR)},


    {XR_TYPE_SWAPCHAIN_IMAGE_D3D12_KHR, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSwapchainImageD3D12KHR)},


    {XR_TYPE_GRAPHICS_REQUIREMENTS_D3D12_KHR, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrGraphicsRequirementsD3D12KHR)},

#endif // XRTRANSPORT_EXT_XR_KHR_D3D12_enable
#ifdef XRTRANSPORT_EXT_XR_KHR_metal_enable

    {XR_TYPE_GRAPHICS_BINDING_METAL_KHR, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrGraphicsBindingMetalKHR)},


    {XR_TYPE_SWAPCHAIN_IMAGE_METAL_KHR, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSwapchainImageMetalKHR)},


    {XR_TYPE_GRAPHICS_REQUIREMENTS_METAL_KHR, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrGraphicsRequirementsMetalKHR)},


    {XR_TYPE_GRAPHICS_BINDING_METAL_KHR, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrGraphicsBindingMetalKHR)},


    {XR_TYPE_SWAPCHAIN_IMAGE_METAL_KHR, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSwapchainImageMetalKHR)},


    {XR_TYPE_GRAPHICS_REQUIREMENTS_METAL_KHR, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrGraphicsRequirementsMetalKHR)},

#endif // XRTRANSPORT_EXT_XR_KHR_metal_enable
#ifdef XRTRANSPORT_EXT_XR_EXT_eye_gaze_interaction

    {XR_TYPE_SYSTEM_EYE_GAZE_INTERACTION_PROPERTIES_EXT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemEyeGazeInteractionPropertiesEXT)},


    {XR_TYPE_EYE_GAZE_SAMPLE_TIME_EXT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEyeGazeSampleTimeEXT)},


    {XR_TYPE_SYSTEM_EYE_GAZE_INTERACTION_PROPERTIES_EXT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemEyeGazeInteractionPropertiesEXT)},


    {XR_TYPE_EYE_GAZE_SAMPLE_TIME_EXT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEyeGazeSampleTimeEXT)},

#endif // XRTRANSPORT_EXT_XR_EXT_eye_gaze_interaction
#ifdef XRTRANSPORT_EXT_XR_KHR_visibility_mask

    {XR_TYPE_VISIBILITY_MASK_KHR, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrVisibilityMaskKHR)},


    {XR_TYPE_EVENT_DATA_VISIBILITY_MASK_CHANGED_KHR, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEventDataVisibilityMaskChangedKHR)},


    {XR_TYPE_VISIBILITY_MASK_KHR, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrVisibilityMaskKHR)},


    {XR_TYPE_EVENT_DATA_VISIBILITY_MASK_CHANGED_KHR, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEventDataVisibilityMaskChangedKHR)},

#endif // XRTRANSPORT_EXT_XR_KHR_visibility_mask
#ifdef XRTRANSPORT_EXT_XR_EXTX_overlay

    {XR_TYPE_SESSION_CREATE_INFO_OVERLAY_EXTX, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSessionCreateInfoOverlayEXTX)},


    {XR_TYPE_EVENT_DATA_MAIN_SESSION_VISIBILITY_CHANGED_EXTX, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEventDataMainSessionVisibilityChangedEXTX)},


    {XR_TYPE_SESSION_CREATE_INFO_OVERLAY_EXTX, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSessionCreateInfoOverlayEXTX)},


    {XR_TYPE_EVENT_DATA_MAIN_SESSION_VISIBILITY_CHANGED_EXTX, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEventDataMainSessionVisibilityChangedEXTX)},

#endif // XRTRANSPORT_EXT_XR_EXTX_overlay
#ifdef XRTRANSPORT_EXT_XR_KHR_composition_layer_color_scale_bias

    {XR_TYPE_COMPOSITION_LAYER_COLOR_SCALE_BIAS_KHR, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrCompositionLayerColorScaleBiasKHR)},


    {XR_TYPE_COMPOSITION_LAYER_COLOR_SCALE_BIAS_KHR, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrCompositionLayerColorScaleBiasKHR)},

#endif // XRTRANSPORT_EXT_XR_KHR_composition_layer_color_scale_bias
#ifdef XRTRANSPORT_EXT_XR_KHR_win32_convert_performance_counter_time
#endif // XRTRANSPORT_EXT_XR_KHR_win32_convert_performance_counter_time
#ifdef XRTRANSPORT_EXT_XR_KHR_convert_timespec_time
#endif // XRTRANSPORT_EXT_XR_KHR_convert_timespec_time
#ifdef XRTRANSPORT_EXT_XR_MSFT_spatial_anchor

    {XR_TYPE_SPATIAL_ANCHOR_CREATE_INFO_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpatialAnchorCreateInfoMSFT)},


    {XR_TYPE_SPATIAL_ANCHOR_SPACE_CREATE_INFO_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpatialAnchorSpaceCreateInfoMSFT)},

#endif // XRTRANSPORT_EXT_XR_MSFT_spatial_anchor
#ifdef XRTRANSPORT_EXT_XR_FB_composition_layer_image_layout

    {XR_TYPE_COMPOSITION_LAYER_IMAGE_LAYOUT_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrCompositionLayerImageLayoutFB)},


    {XR_TYPE_COMPOSITION_LAYER_IMAGE_LAYOUT_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrCompositionLayerImageLayoutFB)},

#endif // XRTRANSPORT_EXT_XR_FB_composition_layer_image_layout
#ifdef XRTRANSPORT_EXT_XR_FB_composition_layer_alpha_blend

    {XR_TYPE_COMPOSITION_LAYER_ALPHA_BLEND_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrCompositionLayerAlphaBlendFB)},


    {XR_TYPE_COMPOSITION_LAYER_ALPHA_BLEND_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrCompositionLayerAlphaBlendFB)},

#endif // XRTRANSPORT_EXT_XR_FB_composition_layer_alpha_blend
#ifdef XRTRANSPORT_EXT_XR_EXT_view_configuration_depth_range

    {XR_TYPE_VIEW_CONFIGURATION_DEPTH_RANGE_EXT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrViewConfigurationDepthRangeEXT)},


    {XR_TYPE_VIEW_CONFIGURATION_DEPTH_RANGE_EXT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrViewConfigurationDepthRangeEXT)},

#endif // XRTRANSPORT_EXT_XR_EXT_view_configuration_depth_range
#ifdef XRTRANSPORT_EXT_XR_EXT_conformance_automation
#endif // XRTRANSPORT_EXT_XR_EXT_conformance_automation
#ifdef XRTRANSPORT_EXT_XR_MNDX_egl_enable

    {XR_TYPE_GRAPHICS_BINDING_EGL_MNDX, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrGraphicsBindingEGLMNDX)},


    {XR_TYPE_GRAPHICS_BINDING_EGL_MNDX, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrGraphicsBindingEGLMNDX)},

#endif // XRTRANSPORT_EXT_XR_MNDX_egl_enable
#ifdef XRTRANSPORT_EXT_XR_MSFT_spatial_graph_bridge

    {XR_TYPE_SPATIAL_GRAPH_NODE_SPACE_CREATE_INFO_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpatialGraphNodeSpaceCreateInfoMSFT)},


    {XR_TYPE_SPATIAL_GRAPH_STATIC_NODE_BINDING_CREATE_INFO_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpatialGraphStaticNodeBindingCreateInfoMSFT)},


    {XR_TYPE_SPATIAL_GRAPH_NODE_BINDING_PROPERTIES_GET_INFO_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpatialGraphNodeBindingPropertiesGetInfoMSFT)},


    {XR_TYPE_SPATIAL_GRAPH_NODE_BINDING_PROPERTIES_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpatialGraphNodeBindingPropertiesMSFT)},


    {XR_TYPE_SPATIAL_GRAPH_NODE_SPACE_CREATE_INFO_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpatialGraphNodeSpaceCreateInfoMSFT)},


    {XR_TYPE_SPATIAL_GRAPH_STATIC_NODE_BINDING_CREATE_INFO_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpatialGraphStaticNodeBindingCreateInfoMSFT)},


    {XR_TYPE_SPATIAL_GRAPH_NODE_BINDING_PROPERTIES_GET_INFO_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpatialGraphNodeBindingPropertiesGetInfoMSFT)},


    {XR_TYPE_SPATIAL_GRAPH_NODE_BINDING_PROPERTIES_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpatialGraphNodeBindingPropertiesMSFT)},

#endif // XRTRANSPORT_EXT_XR_MSFT_spatial_graph_bridge
#ifdef XRTRANSPORT_EXT_XR_EXT_hand_tracking

    {XR_TYPE_SYSTEM_HAND_TRACKING_PROPERTIES_EXT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemHandTrackingPropertiesEXT)},


    {XR_TYPE_HAND_TRACKER_CREATE_INFO_EXT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrHandTrackerCreateInfoEXT)},


    {XR_TYPE_HAND_JOINTS_LOCATE_INFO_EXT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrHandJointsLocateInfoEXT)},


    {XR_TYPE_HAND_JOINT_LOCATIONS_EXT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrHandJointLocationsEXT)},


    {XR_TYPE_HAND_JOINT_VELOCITIES_EXT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrHandJointVelocitiesEXT)},


    {XR_TYPE_SYSTEM_HAND_TRACKING_PROPERTIES_EXT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemHandTrackingPropertiesEXT)},


    {XR_TYPE_HAND_TRACKER_CREATE_INFO_EXT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrHandTrackerCreateInfoEXT)},


    {XR_TYPE_HAND_JOINTS_LOCATE_INFO_EXT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrHandJointsLocateInfoEXT)},


    {XR_TYPE_HAND_JOINT_LOCATIONS_EXT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrHandJointLocationsEXT)},


    {XR_TYPE_HAND_JOINT_VELOCITIES_EXT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrHandJointVelocitiesEXT)},

#endif // XRTRANSPORT_EXT_XR_EXT_hand_tracking
#ifdef XRTRANSPORT_EXT_XR_MSFT_hand_tracking_mesh

    {XR_TYPE_SYSTEM_HAND_TRACKING_MESH_PROPERTIES_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemHandTrackingMeshPropertiesMSFT)},


    {XR_TYPE_HAND_MESH_SPACE_CREATE_INFO_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrHandMeshSpaceCreateInfoMSFT)},


    {XR_TYPE_HAND_MESH_UPDATE_INFO_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrHandMeshUpdateInfoMSFT)},


    {XR_TYPE_HAND_MESH_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrHandMeshMSFT)},


    {XR_TYPE_HAND_POSE_TYPE_INFO_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrHandPoseTypeInfoMSFT)},


    {XR_TYPE_SYSTEM_HAND_TRACKING_MESH_PROPERTIES_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemHandTrackingMeshPropertiesMSFT)},


    {XR_TYPE_HAND_MESH_SPACE_CREATE_INFO_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrHandMeshSpaceCreateInfoMSFT)},


    {XR_TYPE_HAND_MESH_UPDATE_INFO_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrHandMeshUpdateInfoMSFT)},


    {XR_TYPE_HAND_MESH_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrHandMeshMSFT)},


    {XR_TYPE_HAND_POSE_TYPE_INFO_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrHandPoseTypeInfoMSFT)},

#endif // XRTRANSPORT_EXT_XR_MSFT_hand_tracking_mesh
#ifdef XRTRANSPORT_EXT_XR_MSFT_secondary_view_configuration

    {XR_TYPE_SECONDARY_VIEW_CONFIGURATION_SESSION_BEGIN_INFO_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSecondaryViewConfigurationSessionBeginInfoMSFT)},


    {XR_TYPE_SECONDARY_VIEW_CONFIGURATION_STATE_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSecondaryViewConfigurationStateMSFT)},


    {XR_TYPE_SECONDARY_VIEW_CONFIGURATION_FRAME_STATE_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSecondaryViewConfigurationFrameStateMSFT)},


    {XR_TYPE_SECONDARY_VIEW_CONFIGURATION_FRAME_END_INFO_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSecondaryViewConfigurationFrameEndInfoMSFT)},


    {XR_TYPE_SECONDARY_VIEW_CONFIGURATION_LAYER_INFO_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSecondaryViewConfigurationLayerInfoMSFT)},


    {XR_TYPE_SECONDARY_VIEW_CONFIGURATION_SWAPCHAIN_CREATE_INFO_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSecondaryViewConfigurationSwapchainCreateInfoMSFT)},


    {XR_TYPE_SECONDARY_VIEW_CONFIGURATION_SESSION_BEGIN_INFO_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSecondaryViewConfigurationSessionBeginInfoMSFT)},


    {XR_TYPE_SECONDARY_VIEW_CONFIGURATION_STATE_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSecondaryViewConfigurationStateMSFT)},


    {XR_TYPE_SECONDARY_VIEW_CONFIGURATION_FRAME_STATE_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSecondaryViewConfigurationFrameStateMSFT)},


    {XR_TYPE_SECONDARY_VIEW_CONFIGURATION_FRAME_END_INFO_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSecondaryViewConfigurationFrameEndInfoMSFT)},


    {XR_TYPE_SECONDARY_VIEW_CONFIGURATION_LAYER_INFO_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSecondaryViewConfigurationLayerInfoMSFT)},


    {XR_TYPE_SECONDARY_VIEW_CONFIGURATION_SWAPCHAIN_CREATE_INFO_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSecondaryViewConfigurationSwapchainCreateInfoMSFT)},

#endif // XRTRANSPORT_EXT_XR_MSFT_secondary_view_configuration
#ifdef XRTRANSPORT_EXT_XR_MSFT_controller_model

    {XR_TYPE_CONTROLLER_MODEL_KEY_STATE_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrControllerModelKeyStateMSFT)},


    {XR_TYPE_CONTROLLER_MODEL_NODE_PROPERTIES_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrControllerModelNodePropertiesMSFT)},


    {XR_TYPE_CONTROLLER_MODEL_PROPERTIES_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrControllerModelPropertiesMSFT)},


    {XR_TYPE_CONTROLLER_MODEL_NODE_STATE_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrControllerModelNodeStateMSFT)},


    {XR_TYPE_CONTROLLER_MODEL_STATE_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrControllerModelStateMSFT)},


    {XR_TYPE_CONTROLLER_MODEL_KEY_STATE_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrControllerModelKeyStateMSFT)},


    {XR_TYPE_CONTROLLER_MODEL_NODE_PROPERTIES_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrControllerModelNodePropertiesMSFT)},


    {XR_TYPE_CONTROLLER_MODEL_PROPERTIES_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrControllerModelPropertiesMSFT)},


    {XR_TYPE_CONTROLLER_MODEL_NODE_STATE_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrControllerModelNodeStateMSFT)},


    {XR_TYPE_CONTROLLER_MODEL_STATE_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrControllerModelStateMSFT)},

#endif // XRTRANSPORT_EXT_XR_MSFT_controller_model
#ifdef XRTRANSPORT_EXT_XR_MSFT_perception_anchor_interop
#endif // XRTRANSPORT_EXT_XR_MSFT_perception_anchor_interop
#ifdef XRTRANSPORT_EXT_XR_EPIC_view_configuration_fov

    {XR_TYPE_VIEW_CONFIGURATION_VIEW_FOV_EPIC, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrViewConfigurationViewFovEPIC)},


    {XR_TYPE_VIEW_CONFIGURATION_VIEW_FOV_EPIC, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrViewConfigurationViewFovEPIC)},

#endif // XRTRANSPORT_EXT_XR_EPIC_view_configuration_fov
#ifdef XRTRANSPORT_EXT_XR_MSFT_holographic_window_attachment

    {XR_TYPE_HOLOGRAPHIC_WINDOW_ATTACHMENT_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrHolographicWindowAttachmentMSFT)},


    {XR_TYPE_HOLOGRAPHIC_WINDOW_ATTACHMENT_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrHolographicWindowAttachmentMSFT)},

#endif // XRTRANSPORT_EXT_XR_MSFT_holographic_window_attachment
#ifdef XRTRANSPORT_EXT_XR_MSFT_composition_layer_reprojection

    {XR_TYPE_COMPOSITION_LAYER_REPROJECTION_INFO_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrCompositionLayerReprojectionInfoMSFT)},


    {XR_TYPE_COMPOSITION_LAYER_REPROJECTION_PLANE_OVERRIDE_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrCompositionLayerReprojectionPlaneOverrideMSFT)},


    {XR_TYPE_COMPOSITION_LAYER_REPROJECTION_INFO_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrCompositionLayerReprojectionInfoMSFT)},


    {XR_TYPE_COMPOSITION_LAYER_REPROJECTION_PLANE_OVERRIDE_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrCompositionLayerReprojectionPlaneOverrideMSFT)},

#endif // XRTRANSPORT_EXT_XR_MSFT_composition_layer_reprojection
#ifdef XRTRANSPORT_EXT_XR_FB_android_surface_swapchain_create

    {XR_TYPE_ANDROID_SURFACE_SWAPCHAIN_CREATE_INFO_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrAndroidSurfaceSwapchainCreateInfoFB)},


    {XR_TYPE_ANDROID_SURFACE_SWAPCHAIN_CREATE_INFO_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrAndroidSurfaceSwapchainCreateInfoFB)},

#endif // XRTRANSPORT_EXT_XR_FB_android_surface_swapchain_create
#ifdef XRTRANSPORT_EXT_XR_FB_swapchain_update_state
#endif // XRTRANSPORT_EXT_XR_FB_swapchain_update_state
#ifdef XRTRANSPORT_EXT_XR_FB_composition_layer_secure_content

    {XR_TYPE_COMPOSITION_LAYER_SECURE_CONTENT_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrCompositionLayerSecureContentFB)},


    {XR_TYPE_COMPOSITION_LAYER_SECURE_CONTENT_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrCompositionLayerSecureContentFB)},

#endif // XRTRANSPORT_EXT_XR_FB_composition_layer_secure_content
#ifdef XRTRANSPORT_EXT_XR_FB_body_tracking

    {XR_TYPE_SYSTEM_BODY_TRACKING_PROPERTIES_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemBodyTrackingPropertiesFB)},


    {XR_TYPE_BODY_TRACKER_CREATE_INFO_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrBodyTrackerCreateInfoFB)},


    {XR_TYPE_BODY_SKELETON_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrBodySkeletonFB)},


    {XR_TYPE_BODY_JOINTS_LOCATE_INFO_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrBodyJointsLocateInfoFB)},


    {XR_TYPE_BODY_JOINT_LOCATIONS_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrBodyJointLocationsFB)},


    {XR_TYPE_BODY_TRACKER_CREATE_INFO_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrBodyTrackerCreateInfoFB)},


    {XR_TYPE_BODY_JOINTS_LOCATE_INFO_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrBodyJointsLocateInfoFB)},


    {XR_TYPE_SYSTEM_BODY_TRACKING_PROPERTIES_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemBodyTrackingPropertiesFB)},


    {XR_TYPE_BODY_JOINT_LOCATIONS_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrBodyJointLocationsFB)},


    {XR_TYPE_BODY_SKELETON_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrBodySkeletonFB)},

#endif // XRTRANSPORT_EXT_XR_FB_body_tracking
#ifdef XRTRANSPORT_EXT_XR_EXT_dpad_binding

    {XR_TYPE_INTERACTION_PROFILE_DPAD_BINDING_EXT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrInteractionProfileDpadBindingEXT)},


    {XR_TYPE_INTERACTION_PROFILE_DPAD_BINDING_EXT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrInteractionProfileDpadBindingEXT)},

#endif // XRTRANSPORT_EXT_XR_EXT_dpad_binding
#ifdef XRTRANSPORT_EXT_XR_VALVE_analog_threshold

    {XR_TYPE_INTERACTION_PROFILE_ANALOG_THRESHOLD_VALVE, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrInteractionProfileAnalogThresholdVALVE)},


    {XR_TYPE_INTERACTION_PROFILE_ANALOG_THRESHOLD_VALVE, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrInteractionProfileAnalogThresholdVALVE)},

#endif // XRTRANSPORT_EXT_XR_VALVE_analog_threshold
#ifdef XRTRANSPORT_EXT_XR_EXT_hand_joints_motion_range

    {XR_TYPE_HAND_JOINTS_MOTION_RANGE_INFO_EXT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrHandJointsMotionRangeInfoEXT)},


    {XR_TYPE_HAND_JOINTS_MOTION_RANGE_INFO_EXT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrHandJointsMotionRangeInfoEXT)},

#endif // XRTRANSPORT_EXT_XR_EXT_hand_joints_motion_range
#ifdef XRTRANSPORT_EXT_XR_KHR_loader_init
#endif // XRTRANSPORT_EXT_XR_KHR_loader_init
#ifdef XRTRANSPORT_EXT_XR_KHR_loader_init_android

    {XR_TYPE_LOADER_INIT_INFO_ANDROID_KHR, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrLoaderInitInfoAndroidKHR)},


    {XR_TYPE_LOADER_INIT_INFO_ANDROID_KHR, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrLoaderInitInfoAndroidKHR)},

#endif // XRTRANSPORT_EXT_XR_KHR_loader_init_android
#ifdef XRTRANSPORT_EXT_XR_KHR_vulkan_enable2

    {XR_TYPE_VULKAN_INSTANCE_CREATE_INFO_KHR, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrVulkanInstanceCreateInfoKHR)},


    {XR_TYPE_VULKAN_DEVICE_CREATE_INFO_KHR, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrVulkanDeviceCreateInfoKHR)},


    {XR_TYPE_VULKAN_GRAPHICS_DEVICE_GET_INFO_KHR, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrVulkanGraphicsDeviceGetInfoKHR)},


    {XR_TYPE_VULKAN_INSTANCE_CREATE_INFO_KHR, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrVulkanInstanceCreateInfoKHR)},


    {XR_TYPE_VULKAN_DEVICE_CREATE_INFO_KHR, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrVulkanDeviceCreateInfoKHR)},


    {XR_TYPE_VULKAN_GRAPHICS_DEVICE_GET_INFO_KHR, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrVulkanGraphicsDeviceGetInfoKHR)},

#endif // XRTRANSPORT_EXT_XR_KHR_vulkan_enable2
#ifdef XRTRANSPORT_EXT_XR_KHR_composition_layer_equirect2

    {XR_TYPE_COMPOSITION_LAYER_EQUIRECT2_KHR, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrCompositionLayerEquirect2KHR)},


    {XR_TYPE_COMPOSITION_LAYER_EQUIRECT2_KHR, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrCompositionLayerEquirect2KHR)},

#endif // XRTRANSPORT_EXT_XR_KHR_composition_layer_equirect2
#ifdef XRTRANSPORT_EXT_XR_MSFT_scene_understanding

    {XR_TYPE_SCENE_OBSERVER_CREATE_INFO_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSceneObserverCreateInfoMSFT)},


    {XR_TYPE_SCENE_CREATE_INFO_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSceneCreateInfoMSFT)},


    {XR_TYPE_NEW_SCENE_COMPUTE_INFO_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrNewSceneComputeInfoMSFT)},


    {XR_TYPE_VISUAL_MESH_COMPUTE_LOD_INFO_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrVisualMeshComputeLodInfoMSFT)},


    {XR_TYPE_SCENE_COMPONENTS_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSceneComponentsMSFT)},


    {XR_TYPE_SCENE_COMPONENTS_GET_INFO_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSceneComponentsGetInfoMSFT)},


    {XR_TYPE_SCENE_COMPONENT_LOCATIONS_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSceneComponentLocationsMSFT)},


    {XR_TYPE_SCENE_COMPONENTS_LOCATE_INFO_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSceneComponentsLocateInfoMSFT)},


    {XR_TYPE_SCENE_OBJECTS_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSceneObjectsMSFT)},


    {XR_TYPE_SCENE_COMPONENT_PARENT_FILTER_INFO_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSceneComponentParentFilterInfoMSFT)},


    {XR_TYPE_SCENE_OBJECT_TYPES_FILTER_INFO_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSceneObjectTypesFilterInfoMSFT)},


    {XR_TYPE_SCENE_PLANES_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrScenePlanesMSFT)},


    {XR_TYPE_SCENE_PLANE_ALIGNMENT_FILTER_INFO_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrScenePlaneAlignmentFilterInfoMSFT)},


    {XR_TYPE_SCENE_MESHES_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSceneMeshesMSFT)},


    {XR_TYPE_SCENE_MESH_BUFFERS_GET_INFO_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSceneMeshBuffersGetInfoMSFT)},


    {XR_TYPE_SCENE_MESH_BUFFERS_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSceneMeshBuffersMSFT)},


    {XR_TYPE_SCENE_MESH_VERTEX_BUFFER_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSceneMeshVertexBufferMSFT)},


    {XR_TYPE_SCENE_MESH_INDICES_UINT32_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSceneMeshIndicesUint32MSFT)},


    {XR_TYPE_SCENE_MESH_INDICES_UINT16_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSceneMeshIndicesUint16MSFT)},


    {XR_TYPE_SCENE_OBSERVER_CREATE_INFO_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSceneObserverCreateInfoMSFT)},


    {XR_TYPE_SCENE_CREATE_INFO_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSceneCreateInfoMSFT)},


    {XR_TYPE_NEW_SCENE_COMPUTE_INFO_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrNewSceneComputeInfoMSFT)},


    {XR_TYPE_VISUAL_MESH_COMPUTE_LOD_INFO_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrVisualMeshComputeLodInfoMSFT)},


    {XR_TYPE_SCENE_COMPONENTS_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSceneComponentsMSFT)},


    {XR_TYPE_SCENE_COMPONENTS_GET_INFO_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSceneComponentsGetInfoMSFT)},


    {XR_TYPE_SCENE_COMPONENT_LOCATIONS_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSceneComponentLocationsMSFT)},


    {XR_TYPE_SCENE_COMPONENTS_LOCATE_INFO_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSceneComponentsLocateInfoMSFT)},


    {XR_TYPE_SCENE_OBJECTS_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSceneObjectsMSFT)},


    {XR_TYPE_SCENE_COMPONENT_PARENT_FILTER_INFO_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSceneComponentParentFilterInfoMSFT)},


    {XR_TYPE_SCENE_OBJECT_TYPES_FILTER_INFO_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSceneObjectTypesFilterInfoMSFT)},


    {XR_TYPE_SCENE_PLANES_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrScenePlanesMSFT)},


    {XR_TYPE_SCENE_PLANE_ALIGNMENT_FILTER_INFO_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrScenePlaneAlignmentFilterInfoMSFT)},


    {XR_TYPE_SCENE_MESHES_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSceneMeshesMSFT)},


    {XR_TYPE_SCENE_MESH_BUFFERS_GET_INFO_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSceneMeshBuffersGetInfoMSFT)},


    {XR_TYPE_SCENE_MESH_BUFFERS_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSceneMeshBuffersMSFT)},


    {XR_TYPE_SCENE_MESH_VERTEX_BUFFER_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSceneMeshVertexBufferMSFT)},


    {XR_TYPE_SCENE_MESH_INDICES_UINT32_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSceneMeshIndicesUint32MSFT)},


    {XR_TYPE_SCENE_MESH_INDICES_UINT16_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSceneMeshIndicesUint16MSFT)},

#endif // XRTRANSPORT_EXT_XR_MSFT_scene_understanding
#ifdef XRTRANSPORT_EXT_XR_MSFT_scene_understanding_serialization

    {XR_TYPE_SERIALIZED_SCENE_FRAGMENT_DATA_GET_INFO_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSerializedSceneFragmentDataGetInfoMSFT)},


    {XR_TYPE_SCENE_DESERIALIZE_INFO_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSceneDeserializeInfoMSFT)},


    {XR_TYPE_SERIALIZED_SCENE_FRAGMENT_DATA_GET_INFO_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSerializedSceneFragmentDataGetInfoMSFT)},


    {XR_TYPE_SCENE_DESERIALIZE_INFO_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSceneDeserializeInfoMSFT)},

#endif // XRTRANSPORT_EXT_XR_MSFT_scene_understanding_serialization
#ifdef XRTRANSPORT_EXT_XR_FB_display_refresh_rate

    {XR_TYPE_EVENT_DATA_DISPLAY_REFRESH_RATE_CHANGED_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEventDataDisplayRefreshRateChangedFB)},


    {XR_TYPE_EVENT_DATA_DISPLAY_REFRESH_RATE_CHANGED_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEventDataDisplayRefreshRateChangedFB)},

#endif // XRTRANSPORT_EXT_XR_FB_display_refresh_rate
#ifdef XRTRANSPORT_EXT_XR_HTCX_vive_tracker_interaction

    {XR_TYPE_VIVE_TRACKER_PATHS_HTCX, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrViveTrackerPathsHTCX)},


    {XR_TYPE_EVENT_DATA_VIVE_TRACKER_CONNECTED_HTCX, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEventDataViveTrackerConnectedHTCX)},


    {XR_TYPE_VIVE_TRACKER_PATHS_HTCX, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrViveTrackerPathsHTCX)},


    {XR_TYPE_EVENT_DATA_VIVE_TRACKER_CONNECTED_HTCX, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEventDataViveTrackerConnectedHTCX)},

#endif // XRTRANSPORT_EXT_XR_HTCX_vive_tracker_interaction
#ifdef XRTRANSPORT_EXT_XR_HTC_facial_tracking

    {XR_TYPE_SYSTEM_FACIAL_TRACKING_PROPERTIES_HTC, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemFacialTrackingPropertiesHTC)},


    {XR_TYPE_FACIAL_EXPRESSIONS_HTC, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrFacialExpressionsHTC)},


    {XR_TYPE_FACIAL_TRACKER_CREATE_INFO_HTC, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrFacialTrackerCreateInfoHTC)},


    {XR_TYPE_SYSTEM_FACIAL_TRACKING_PROPERTIES_HTC, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemFacialTrackingPropertiesHTC)},


    {XR_TYPE_FACIAL_TRACKER_CREATE_INFO_HTC, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrFacialTrackerCreateInfoHTC)},


    {XR_TYPE_FACIAL_EXPRESSIONS_HTC, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrFacialExpressionsHTC)},

#endif // XRTRANSPORT_EXT_XR_HTC_facial_tracking
#ifdef XRTRANSPORT_EXT_XR_FB_color_space

    {XR_TYPE_SYSTEM_COLOR_SPACE_PROPERTIES_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemColorSpacePropertiesFB)},


    {XR_TYPE_SYSTEM_COLOR_SPACE_PROPERTIES_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemColorSpacePropertiesFB)},

#endif // XRTRANSPORT_EXT_XR_FB_color_space
#ifdef XRTRANSPORT_EXT_XR_FB_hand_tracking_mesh

    {XR_TYPE_HAND_TRACKING_MESH_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrHandTrackingMeshFB)},


    {XR_TYPE_HAND_TRACKING_SCALE_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrHandTrackingScaleFB)},


    {XR_TYPE_HAND_TRACKING_MESH_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrHandTrackingMeshFB)},


    {XR_TYPE_HAND_TRACKING_SCALE_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrHandTrackingScaleFB)},

#endif // XRTRANSPORT_EXT_XR_FB_hand_tracking_mesh
#ifdef XRTRANSPORT_EXT_XR_FB_hand_tracking_aim

    {XR_TYPE_HAND_TRACKING_AIM_STATE_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrHandTrackingAimStateFB)},


    {XR_TYPE_HAND_TRACKING_AIM_STATE_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrHandTrackingAimStateFB)},

#endif // XRTRANSPORT_EXT_XR_FB_hand_tracking_aim
#ifdef XRTRANSPORT_EXT_XR_FB_hand_tracking_capsules

    {XR_TYPE_HAND_TRACKING_CAPSULES_STATE_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrHandTrackingCapsulesStateFB)},


    {XR_TYPE_HAND_TRACKING_CAPSULES_STATE_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrHandTrackingCapsulesStateFB)},

#endif // XRTRANSPORT_EXT_XR_FB_hand_tracking_capsules
#ifdef XRTRANSPORT_EXT_XR_FB_spatial_entity

    {XR_TYPE_SYSTEM_SPATIAL_ENTITY_PROPERTIES_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemSpatialEntityPropertiesFB)},


    {XR_TYPE_SPATIAL_ANCHOR_CREATE_INFO_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpatialAnchorCreateInfoFB)},


    {XR_TYPE_SPACE_COMPONENT_STATUS_SET_INFO_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpaceComponentStatusSetInfoFB)},


    {XR_TYPE_SPACE_COMPONENT_STATUS_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpaceComponentStatusFB)},


    {XR_TYPE_EVENT_DATA_SPATIAL_ANCHOR_CREATE_COMPLETE_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEventDataSpatialAnchorCreateCompleteFB)},


    {XR_TYPE_EVENT_DATA_SPACE_SET_STATUS_COMPLETE_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEventDataSpaceSetStatusCompleteFB)},


    {XR_TYPE_SYSTEM_SPATIAL_ENTITY_PROPERTIES_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemSpatialEntityPropertiesFB)},


    {XR_TYPE_SPATIAL_ANCHOR_CREATE_INFO_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpatialAnchorCreateInfoFB)},


    {XR_TYPE_SPACE_COMPONENT_STATUS_SET_INFO_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpaceComponentStatusSetInfoFB)},


    {XR_TYPE_SPACE_COMPONENT_STATUS_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpaceComponentStatusFB)},


    {XR_TYPE_EVENT_DATA_SPATIAL_ANCHOR_CREATE_COMPLETE_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEventDataSpatialAnchorCreateCompleteFB)},


    {XR_TYPE_EVENT_DATA_SPACE_SET_STATUS_COMPLETE_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEventDataSpaceSetStatusCompleteFB)},

#endif // XRTRANSPORT_EXT_XR_FB_spatial_entity
#ifdef XRTRANSPORT_EXT_XR_FB_foveation

    {XR_TYPE_FOVEATION_PROFILE_CREATE_INFO_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrFoveationProfileCreateInfoFB)},


    {XR_TYPE_SWAPCHAIN_CREATE_INFO_FOVEATION_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSwapchainCreateInfoFoveationFB)},


    {XR_TYPE_SWAPCHAIN_STATE_FOVEATION_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSwapchainStateFoveationFB)},


    {XR_TYPE_FOVEATION_PROFILE_CREATE_INFO_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrFoveationProfileCreateInfoFB)},


    {XR_TYPE_SWAPCHAIN_CREATE_INFO_FOVEATION_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSwapchainCreateInfoFoveationFB)},


    {XR_TYPE_SWAPCHAIN_STATE_FOVEATION_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSwapchainStateFoveationFB)},

#endif // XRTRANSPORT_EXT_XR_FB_foveation
#ifdef XRTRANSPORT_EXT_XR_FB_foveation_configuration

    {XR_TYPE_FOVEATION_LEVEL_PROFILE_CREATE_INFO_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrFoveationLevelProfileCreateInfoFB)},


    {XR_TYPE_FOVEATION_LEVEL_PROFILE_CREATE_INFO_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrFoveationLevelProfileCreateInfoFB)},

#endif // XRTRANSPORT_EXT_XR_FB_foveation_configuration
#ifdef XRTRANSPORT_EXT_XR_FB_keyboard_tracking

    {XR_TYPE_SYSTEM_KEYBOARD_TRACKING_PROPERTIES_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemKeyboardTrackingPropertiesFB)},


    {XR_TYPE_KEYBOARD_SPACE_CREATE_INFO_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrKeyboardSpaceCreateInfoFB)},


    {XR_TYPE_KEYBOARD_TRACKING_QUERY_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrKeyboardTrackingQueryFB)},


    {XR_TYPE_KEYBOARD_SPACE_CREATE_INFO_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrKeyboardSpaceCreateInfoFB)},


    {XR_TYPE_KEYBOARD_TRACKING_QUERY_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrKeyboardTrackingQueryFB)},


    {XR_TYPE_SYSTEM_KEYBOARD_TRACKING_PROPERTIES_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemKeyboardTrackingPropertiesFB)},

#endif // XRTRANSPORT_EXT_XR_FB_keyboard_tracking
#ifdef XRTRANSPORT_EXT_XR_FB_triangle_mesh

    {XR_TYPE_TRIANGLE_MESH_CREATE_INFO_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrTriangleMeshCreateInfoFB)},


    {XR_TYPE_TRIANGLE_MESH_CREATE_INFO_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrTriangleMeshCreateInfoFB)},

#endif // XRTRANSPORT_EXT_XR_FB_triangle_mesh
#ifdef XRTRANSPORT_EXT_XR_FB_passthrough

    {XR_TYPE_SYSTEM_PASSTHROUGH_PROPERTIES_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemPassthroughPropertiesFB)},


    {XR_TYPE_SYSTEM_PASSTHROUGH_PROPERTIES2_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemPassthroughProperties2FB)},


    {XR_TYPE_PASSTHROUGH_CREATE_INFO_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrPassthroughCreateInfoFB)},


    {XR_TYPE_PASSTHROUGH_LAYER_CREATE_INFO_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrPassthroughLayerCreateInfoFB)},


    {XR_TYPE_COMPOSITION_LAYER_PASSTHROUGH_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrCompositionLayerPassthroughFB)},


    {XR_TYPE_GEOMETRY_INSTANCE_CREATE_INFO_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrGeometryInstanceCreateInfoFB)},


    {XR_TYPE_GEOMETRY_INSTANCE_TRANSFORM_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrGeometryInstanceTransformFB)},


    {XR_TYPE_PASSTHROUGH_STYLE_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrPassthroughStyleFB)},


    {XR_TYPE_PASSTHROUGH_COLOR_MAP_MONO_TO_RGBA_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrPassthroughColorMapMonoToRgbaFB)},


    {XR_TYPE_PASSTHROUGH_COLOR_MAP_MONO_TO_MONO_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrPassthroughColorMapMonoToMonoFB)},


    {XR_TYPE_PASSTHROUGH_BRIGHTNESS_CONTRAST_SATURATION_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrPassthroughBrightnessContrastSaturationFB)},


    {XR_TYPE_EVENT_DATA_PASSTHROUGH_STATE_CHANGED_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEventDataPassthroughStateChangedFB)},


    {XR_TYPE_SYSTEM_PASSTHROUGH_PROPERTIES_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemPassthroughPropertiesFB)},


    {XR_TYPE_PASSTHROUGH_CREATE_INFO_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrPassthroughCreateInfoFB)},


    {XR_TYPE_PASSTHROUGH_LAYER_CREATE_INFO_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrPassthroughLayerCreateInfoFB)},


    {XR_TYPE_COMPOSITION_LAYER_PASSTHROUGH_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrCompositionLayerPassthroughFB)},


    {XR_TYPE_GEOMETRY_INSTANCE_CREATE_INFO_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrGeometryInstanceCreateInfoFB)},


    {XR_TYPE_GEOMETRY_INSTANCE_TRANSFORM_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrGeometryInstanceTransformFB)},


    {XR_TYPE_SYSTEM_PASSTHROUGH_PROPERTIES2_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemPassthroughProperties2FB)},


    {XR_TYPE_PASSTHROUGH_STYLE_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrPassthroughStyleFB)},


    {XR_TYPE_PASSTHROUGH_COLOR_MAP_MONO_TO_RGBA_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrPassthroughColorMapMonoToRgbaFB)},


    {XR_TYPE_PASSTHROUGH_COLOR_MAP_MONO_TO_MONO_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrPassthroughColorMapMonoToMonoFB)},


    {XR_TYPE_PASSTHROUGH_BRIGHTNESS_CONTRAST_SATURATION_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrPassthroughBrightnessContrastSaturationFB)},


    {XR_TYPE_EVENT_DATA_PASSTHROUGH_STATE_CHANGED_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEventDataPassthroughStateChangedFB)},

#endif // XRTRANSPORT_EXT_XR_FB_passthrough
#ifdef XRTRANSPORT_EXT_XR_FB_render_model

    {XR_TYPE_RENDER_MODEL_PATH_INFO_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrRenderModelPathInfoFB)},


    {XR_TYPE_RENDER_MODEL_PROPERTIES_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrRenderModelPropertiesFB)},


    {XR_TYPE_RENDER_MODEL_BUFFER_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrRenderModelBufferFB)},


    {XR_TYPE_RENDER_MODEL_LOAD_INFO_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrRenderModelLoadInfoFB)},


    {XR_TYPE_SYSTEM_RENDER_MODEL_PROPERTIES_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemRenderModelPropertiesFB)},


    {XR_TYPE_RENDER_MODEL_CAPABILITIES_REQUEST_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrRenderModelCapabilitiesRequestFB)},


    {XR_TYPE_RENDER_MODEL_PATH_INFO_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrRenderModelPathInfoFB)},


    {XR_TYPE_RENDER_MODEL_PROPERTIES_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrRenderModelPropertiesFB)},


    {XR_TYPE_RENDER_MODEL_BUFFER_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrRenderModelBufferFB)},


    {XR_TYPE_RENDER_MODEL_LOAD_INFO_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrRenderModelLoadInfoFB)},


    {XR_TYPE_SYSTEM_RENDER_MODEL_PROPERTIES_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemRenderModelPropertiesFB)},


    {XR_TYPE_RENDER_MODEL_CAPABILITIES_REQUEST_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrRenderModelCapabilitiesRequestFB)},

#endif // XRTRANSPORT_EXT_XR_FB_render_model
#ifdef XRTRANSPORT_EXT_XR_KHR_binding_modification

    {XR_TYPE_BINDING_MODIFICATIONS_KHR, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrBindingModificationsKHR)},


    {XR_TYPE_BINDING_MODIFICATIONS_KHR, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrBindingModificationsKHR)},

#endif // XRTRANSPORT_EXT_XR_KHR_binding_modification
#ifdef XRTRANSPORT_EXT_XR_VARJO_foveated_rendering

    {XR_TYPE_VIEW_LOCATE_FOVEATED_RENDERING_VARJO, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrViewLocateFoveatedRenderingVARJO)},


    {XR_TYPE_FOVEATED_VIEW_CONFIGURATION_VIEW_VARJO, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrFoveatedViewConfigurationViewVARJO)},


    {XR_TYPE_SYSTEM_FOVEATED_RENDERING_PROPERTIES_VARJO, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemFoveatedRenderingPropertiesVARJO)},


    {XR_TYPE_VIEW_LOCATE_FOVEATED_RENDERING_VARJO, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrViewLocateFoveatedRenderingVARJO)},


    {XR_TYPE_FOVEATED_VIEW_CONFIGURATION_VIEW_VARJO, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrFoveatedViewConfigurationViewVARJO)},


    {XR_TYPE_SYSTEM_FOVEATED_RENDERING_PROPERTIES_VARJO, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemFoveatedRenderingPropertiesVARJO)},

#endif // XRTRANSPORT_EXT_XR_VARJO_foveated_rendering
#ifdef XRTRANSPORT_EXT_XR_VARJO_composition_layer_depth_test

    {XR_TYPE_COMPOSITION_LAYER_DEPTH_TEST_VARJO, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrCompositionLayerDepthTestVARJO)},


    {XR_TYPE_COMPOSITION_LAYER_DEPTH_TEST_VARJO, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrCompositionLayerDepthTestVARJO)},

#endif // XRTRANSPORT_EXT_XR_VARJO_composition_layer_depth_test
#ifdef XRTRANSPORT_EXT_XR_VARJO_environment_depth_estimation
#endif // XRTRANSPORT_EXT_XR_VARJO_environment_depth_estimation
#ifdef XRTRANSPORT_EXT_XR_VARJO_marker_tracking

    {XR_TYPE_SYSTEM_MARKER_TRACKING_PROPERTIES_VARJO, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemMarkerTrackingPropertiesVARJO)},


    {XR_TYPE_EVENT_DATA_MARKER_TRACKING_UPDATE_VARJO, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEventDataMarkerTrackingUpdateVARJO)},


    {XR_TYPE_MARKER_SPACE_CREATE_INFO_VARJO, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrMarkerSpaceCreateInfoVARJO)},


    {XR_TYPE_SYSTEM_MARKER_TRACKING_PROPERTIES_VARJO, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemMarkerTrackingPropertiesVARJO)},


    {XR_TYPE_EVENT_DATA_MARKER_TRACKING_UPDATE_VARJO, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEventDataMarkerTrackingUpdateVARJO)},


    {XR_TYPE_MARKER_SPACE_CREATE_INFO_VARJO, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrMarkerSpaceCreateInfoVARJO)},

#endif // XRTRANSPORT_EXT_XR_VARJO_marker_tracking
#ifdef XRTRANSPORT_EXT_XR_VARJO_view_offset
#endif // XRTRANSPORT_EXT_XR_VARJO_view_offset
#ifdef XRTRANSPORT_EXT_XR_ML_frame_end_info

    {XR_TYPE_FRAME_END_INFO_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrFrameEndInfoML)},


    {XR_TYPE_FRAME_END_INFO_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrFrameEndInfoML)},

#endif // XRTRANSPORT_EXT_XR_ML_frame_end_info
#ifdef XRTRANSPORT_EXT_XR_ML_global_dimmer

    {XR_TYPE_GLOBAL_DIMMER_FRAME_END_INFO_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrGlobalDimmerFrameEndInfoML)},


    {XR_TYPE_GLOBAL_DIMMER_FRAME_END_INFO_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrGlobalDimmerFrameEndInfoML)},

#endif // XRTRANSPORT_EXT_XR_ML_global_dimmer
#ifdef XRTRANSPORT_EXT_XR_ML_compat

    {XR_TYPE_COORDINATE_SPACE_CREATE_INFO_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrCoordinateSpaceCreateInfoML)},

#endif // XRTRANSPORT_EXT_XR_ML_compat
#ifdef XRTRANSPORT_EXT_XR_ML_marker_understanding

    {XR_TYPE_SYSTEM_MARKER_UNDERSTANDING_PROPERTIES_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemMarkerUnderstandingPropertiesML)},


    {XR_TYPE_MARKER_DETECTOR_CREATE_INFO_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrMarkerDetectorCreateInfoML)},


    {XR_TYPE_MARKER_DETECTOR_ARUCO_INFO_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrMarkerDetectorArucoInfoML)},


    {XR_TYPE_MARKER_DETECTOR_SIZE_INFO_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrMarkerDetectorSizeInfoML)},


    {XR_TYPE_MARKER_DETECTOR_APRIL_TAG_INFO_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrMarkerDetectorAprilTagInfoML)},


    {XR_TYPE_MARKER_DETECTOR_CUSTOM_PROFILE_INFO_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrMarkerDetectorCustomProfileInfoML)},


    {XR_TYPE_MARKER_DETECTOR_SNAPSHOT_INFO_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrMarkerDetectorSnapshotInfoML)},


    {XR_TYPE_MARKER_DETECTOR_STATE_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrMarkerDetectorStateML)},


    {XR_TYPE_MARKER_SPACE_CREATE_INFO_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrMarkerSpaceCreateInfoML)},


    {XR_TYPE_SYSTEM_MARKER_UNDERSTANDING_PROPERTIES_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemMarkerUnderstandingPropertiesML)},


    {XR_TYPE_MARKER_DETECTOR_CREATE_INFO_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrMarkerDetectorCreateInfoML)},


    {XR_TYPE_MARKER_DETECTOR_ARUCO_INFO_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrMarkerDetectorArucoInfoML)},


    {XR_TYPE_MARKER_DETECTOR_SIZE_INFO_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrMarkerDetectorSizeInfoML)},


    {XR_TYPE_MARKER_DETECTOR_APRIL_TAG_INFO_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrMarkerDetectorAprilTagInfoML)},


    {XR_TYPE_MARKER_DETECTOR_CUSTOM_PROFILE_INFO_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrMarkerDetectorCustomProfileInfoML)},


    {XR_TYPE_MARKER_DETECTOR_SNAPSHOT_INFO_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrMarkerDetectorSnapshotInfoML)},


    {XR_TYPE_MARKER_DETECTOR_STATE_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrMarkerDetectorStateML)},


    {XR_TYPE_MARKER_SPACE_CREATE_INFO_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrMarkerSpaceCreateInfoML)},

#endif // XRTRANSPORT_EXT_XR_ML_marker_understanding
#ifdef XRTRANSPORT_EXT_XR_ML_localization_map

    {XR_TYPE_LOCALIZATION_MAP_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrLocalizationMapML)},


    {XR_TYPE_EVENT_DATA_LOCALIZATION_CHANGED_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEventDataLocalizationChangedML)},


    {XR_TYPE_MAP_LOCALIZATION_REQUEST_INFO_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrMapLocalizationRequestInfoML)},


    {XR_TYPE_LOCALIZATION_MAP_IMPORT_INFO_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrLocalizationMapImportInfoML)},


    {XR_TYPE_LOCALIZATION_ENABLE_EVENTS_INFO_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrLocalizationEnableEventsInfoML)},


    {XR_TYPE_LOCALIZATION_MAP_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrLocalizationMapML)},


    {XR_TYPE_EVENT_DATA_LOCALIZATION_CHANGED_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEventDataLocalizationChangedML)},


    {XR_TYPE_MAP_LOCALIZATION_REQUEST_INFO_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrMapLocalizationRequestInfoML)},


    {XR_TYPE_LOCALIZATION_MAP_IMPORT_INFO_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrLocalizationMapImportInfoML)},


    {XR_TYPE_LOCALIZATION_ENABLE_EVENTS_INFO_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrLocalizationEnableEventsInfoML)},

#endif // XRTRANSPORT_EXT_XR_ML_localization_map
#ifdef XRTRANSPORT_EXT_XR_ML_spatial_anchors

    {XR_TYPE_SPATIAL_ANCHORS_CREATE_INFO_FROM_POSE_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpatialAnchorsCreateInfoFromPoseML)},


    {XR_TYPE_CREATE_SPATIAL_ANCHORS_COMPLETION_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrCreateSpatialAnchorsCompletionML)},


    {XR_TYPE_SPATIAL_ANCHOR_STATE_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpatialAnchorStateML)},


    {XR_TYPE_SPATIAL_ANCHORS_CREATE_INFO_FROM_POSE_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpatialAnchorsCreateInfoFromPoseML)},


    {XR_TYPE_CREATE_SPATIAL_ANCHORS_COMPLETION_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrCreateSpatialAnchorsCompletionML)},


    {XR_TYPE_SPATIAL_ANCHOR_STATE_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpatialAnchorStateML)},

#endif // XRTRANSPORT_EXT_XR_ML_spatial_anchors
#ifdef XRTRANSPORT_EXT_XR_ML_spatial_anchors_storage

    {XR_TYPE_SPATIAL_ANCHORS_CREATE_STORAGE_INFO_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpatialAnchorsCreateStorageInfoML)},


    {XR_TYPE_SPATIAL_ANCHORS_QUERY_INFO_RADIUS_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpatialAnchorsQueryInfoRadiusML)},


    {XR_TYPE_SPATIAL_ANCHORS_QUERY_COMPLETION_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpatialAnchorsQueryCompletionML)},


    {XR_TYPE_SPATIAL_ANCHORS_CREATE_INFO_FROM_UUIDS_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpatialAnchorsCreateInfoFromUuidsML)},


    {XR_TYPE_SPATIAL_ANCHORS_PUBLISH_INFO_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpatialAnchorsPublishInfoML)},


    {XR_TYPE_SPATIAL_ANCHORS_PUBLISH_COMPLETION_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpatialAnchorsPublishCompletionML)},


    {XR_TYPE_SPATIAL_ANCHORS_DELETE_INFO_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpatialAnchorsDeleteInfoML)},


    {XR_TYPE_SPATIAL_ANCHORS_DELETE_COMPLETION_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpatialAnchorsDeleteCompletionML)},


    {XR_TYPE_SPATIAL_ANCHORS_UPDATE_EXPIRATION_INFO_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpatialAnchorsUpdateExpirationInfoML)},


    {XR_TYPE_SPATIAL_ANCHORS_UPDATE_EXPIRATION_COMPLETION_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpatialAnchorsUpdateExpirationCompletionML)},


    {XR_TYPE_SPATIAL_ANCHORS_PUBLISH_COMPLETION_DETAILS_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpatialAnchorsPublishCompletionDetailsML)},


    {XR_TYPE_SPATIAL_ANCHORS_DELETE_COMPLETION_DETAILS_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpatialAnchorsDeleteCompletionDetailsML)},


    {XR_TYPE_SPATIAL_ANCHORS_UPDATE_EXPIRATION_COMPLETION_DETAILS_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpatialAnchorsUpdateExpirationCompletionDetailsML)},


    {XR_TYPE_SPATIAL_ANCHORS_CREATE_STORAGE_INFO_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpatialAnchorsCreateStorageInfoML)},


    {XR_TYPE_SPATIAL_ANCHORS_QUERY_INFO_RADIUS_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpatialAnchorsQueryInfoRadiusML)},


    {XR_TYPE_SPATIAL_ANCHORS_QUERY_COMPLETION_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpatialAnchorsQueryCompletionML)},


    {XR_TYPE_SPATIAL_ANCHORS_CREATE_INFO_FROM_UUIDS_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpatialAnchorsCreateInfoFromUuidsML)},


    {XR_TYPE_SPATIAL_ANCHORS_PUBLISH_INFO_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpatialAnchorsPublishInfoML)},


    {XR_TYPE_SPATIAL_ANCHORS_PUBLISH_COMPLETION_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpatialAnchorsPublishCompletionML)},


    {XR_TYPE_SPATIAL_ANCHORS_DELETE_INFO_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpatialAnchorsDeleteInfoML)},


    {XR_TYPE_SPATIAL_ANCHORS_DELETE_COMPLETION_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpatialAnchorsDeleteCompletionML)},


    {XR_TYPE_SPATIAL_ANCHORS_UPDATE_EXPIRATION_INFO_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpatialAnchorsUpdateExpirationInfoML)},


    {XR_TYPE_SPATIAL_ANCHORS_UPDATE_EXPIRATION_COMPLETION_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpatialAnchorsUpdateExpirationCompletionML)},


    {XR_TYPE_SPATIAL_ANCHORS_PUBLISH_COMPLETION_DETAILS_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpatialAnchorsPublishCompletionDetailsML)},


    {XR_TYPE_SPATIAL_ANCHORS_DELETE_COMPLETION_DETAILS_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpatialAnchorsDeleteCompletionDetailsML)},


    {XR_TYPE_SPATIAL_ANCHORS_UPDATE_EXPIRATION_COMPLETION_DETAILS_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpatialAnchorsUpdateExpirationCompletionDetailsML)},

#endif // XRTRANSPORT_EXT_XR_ML_spatial_anchors_storage
#ifdef XRTRANSPORT_EXT_XR_ML_user_calibration

    {XR_TYPE_EVENT_DATA_HEADSET_FIT_CHANGED_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEventDataHeadsetFitChangedML)},


    {XR_TYPE_EVENT_DATA_EYE_CALIBRATION_CHANGED_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEventDataEyeCalibrationChangedML)},


    {XR_TYPE_USER_CALIBRATION_ENABLE_EVENTS_INFO_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrUserCalibrationEnableEventsInfoML)},


    {XR_TYPE_EVENT_DATA_HEADSET_FIT_CHANGED_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEventDataHeadsetFitChangedML)},


    {XR_TYPE_EVENT_DATA_EYE_CALIBRATION_CHANGED_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEventDataEyeCalibrationChangedML)},


    {XR_TYPE_USER_CALIBRATION_ENABLE_EVENTS_INFO_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrUserCalibrationEnableEventsInfoML)},

#endif // XRTRANSPORT_EXT_XR_ML_user_calibration
#ifdef XRTRANSPORT_EXT_XR_MSFT_spatial_anchor_persistence

    {XR_TYPE_SPATIAL_ANCHOR_PERSISTENCE_INFO_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpatialAnchorPersistenceInfoMSFT)},


    {XR_TYPE_SPATIAL_ANCHOR_FROM_PERSISTED_ANCHOR_CREATE_INFO_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpatialAnchorFromPersistedAnchorCreateInfoMSFT)},


    {XR_TYPE_SPATIAL_ANCHOR_PERSISTENCE_INFO_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpatialAnchorPersistenceInfoMSFT)},


    {XR_TYPE_SPATIAL_ANCHOR_FROM_PERSISTED_ANCHOR_CREATE_INFO_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpatialAnchorFromPersistedAnchorCreateInfoMSFT)},

#endif // XRTRANSPORT_EXT_XR_MSFT_spatial_anchor_persistence
#ifdef XRTRANSPORT_EXT_XR_MSFT_scene_marker

    {XR_TYPE_SCENE_MARKERS_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSceneMarkersMSFT)},


    {XR_TYPE_SCENE_MARKER_TYPE_FILTER_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSceneMarkerTypeFilterMSFT)},


    {XR_TYPE_SCENE_MARKER_QR_CODES_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSceneMarkerQRCodesMSFT)},


    {XR_TYPE_SCENE_MARKERS_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSceneMarkersMSFT)},


    {XR_TYPE_SCENE_MARKER_TYPE_FILTER_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSceneMarkerTypeFilterMSFT)},


    {XR_TYPE_SCENE_MARKER_QR_CODES_MSFT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSceneMarkerQRCodesMSFT)},

#endif // XRTRANSPORT_EXT_XR_MSFT_scene_marker
#ifdef XRTRANSPORT_EXT_XR_KHR_extended_struct_name_lengths
#endif // XRTRANSPORT_EXT_XR_KHR_extended_struct_name_lengths
#ifdef XRTRANSPORT_EXT_XR_FB_spatial_entity_query

    {XR_TYPE_SPACE_QUERY_INFO_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpaceQueryInfoFB)},


    {XR_TYPE_SPACE_STORAGE_LOCATION_FILTER_INFO_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpaceStorageLocationFilterInfoFB)},


    {XR_TYPE_SPACE_UUID_FILTER_INFO_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpaceUuidFilterInfoFB)},


    {XR_TYPE_SPACE_COMPONENT_FILTER_INFO_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpaceComponentFilterInfoFB)},


    {XR_TYPE_SPACE_QUERY_RESULTS_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpaceQueryResultsFB)},


    {XR_TYPE_EVENT_DATA_SPACE_QUERY_RESULTS_AVAILABLE_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEventDataSpaceQueryResultsAvailableFB)},


    {XR_TYPE_EVENT_DATA_SPACE_QUERY_COMPLETE_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEventDataSpaceQueryCompleteFB)},


    {XR_TYPE_SPACE_QUERY_INFO_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpaceQueryInfoFB)},


    {XR_TYPE_SPACE_QUERY_RESULTS_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpaceQueryResultsFB)},


    {XR_TYPE_SPACE_STORAGE_LOCATION_FILTER_INFO_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpaceStorageLocationFilterInfoFB)},


    {XR_TYPE_SPACE_UUID_FILTER_INFO_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpaceUuidFilterInfoFB)},


    {XR_TYPE_SPACE_COMPONENT_FILTER_INFO_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpaceComponentFilterInfoFB)},


    {XR_TYPE_EVENT_DATA_SPACE_QUERY_RESULTS_AVAILABLE_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEventDataSpaceQueryResultsAvailableFB)},


    {XR_TYPE_EVENT_DATA_SPACE_QUERY_COMPLETE_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEventDataSpaceQueryCompleteFB)},

#endif // XRTRANSPORT_EXT_XR_FB_spatial_entity_query
#ifdef XRTRANSPORT_EXT_XR_FB_spatial_entity_storage

    {XR_TYPE_SPACE_SAVE_INFO_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpaceSaveInfoFB)},


    {XR_TYPE_SPACE_ERASE_INFO_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpaceEraseInfoFB)},


    {XR_TYPE_EVENT_DATA_SPACE_SAVE_COMPLETE_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEventDataSpaceSaveCompleteFB)},


    {XR_TYPE_EVENT_DATA_SPACE_ERASE_COMPLETE_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEventDataSpaceEraseCompleteFB)},


    {XR_TYPE_SPACE_SAVE_INFO_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpaceSaveInfoFB)},


    {XR_TYPE_SPACE_ERASE_INFO_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpaceEraseInfoFB)},


    {XR_TYPE_EVENT_DATA_SPACE_SAVE_COMPLETE_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEventDataSpaceSaveCompleteFB)},


    {XR_TYPE_EVENT_DATA_SPACE_ERASE_COMPLETE_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEventDataSpaceEraseCompleteFB)},

#endif // XRTRANSPORT_EXT_XR_FB_spatial_entity_storage
#ifdef XRTRANSPORT_EXT_XR_OCULUS_audio_device_guid
#endif // XRTRANSPORT_EXT_XR_OCULUS_audio_device_guid
#ifdef XRTRANSPORT_EXT_XR_FB_foveation_vulkan

    {XR_TYPE_SWAPCHAIN_IMAGE_FOVEATION_VULKAN_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSwapchainImageFoveationVulkanFB)},


    {XR_TYPE_SWAPCHAIN_IMAGE_FOVEATION_VULKAN_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSwapchainImageFoveationVulkanFB)},

#endif // XRTRANSPORT_EXT_XR_FB_foveation_vulkan
#ifdef XRTRANSPORT_EXT_XR_FB_swapchain_update_state_android_surface

    {XR_TYPE_SWAPCHAIN_STATE_ANDROID_SURFACE_DIMENSIONS_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSwapchainStateAndroidSurfaceDimensionsFB)},


    {XR_TYPE_SWAPCHAIN_STATE_ANDROID_SURFACE_DIMENSIONS_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSwapchainStateAndroidSurfaceDimensionsFB)},

#endif // XRTRANSPORT_EXT_XR_FB_swapchain_update_state_android_surface
#ifdef XRTRANSPORT_EXT_XR_FB_swapchain_update_state_opengl_es

    {XR_TYPE_SWAPCHAIN_STATE_SAMPLER_OPENGL_ES_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSwapchainStateSamplerOpenGLESFB)},


    {XR_TYPE_SWAPCHAIN_STATE_SAMPLER_OPENGL_ES_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSwapchainStateSamplerOpenGLESFB)},

#endif // XRTRANSPORT_EXT_XR_FB_swapchain_update_state_opengl_es
#ifdef XRTRANSPORT_EXT_XR_FB_swapchain_update_state_vulkan

    {XR_TYPE_SWAPCHAIN_STATE_SAMPLER_VULKAN_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSwapchainStateSamplerVulkanFB)},


    {XR_TYPE_SWAPCHAIN_STATE_SAMPLER_VULKAN_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSwapchainStateSamplerVulkanFB)},

#endif // XRTRANSPORT_EXT_XR_FB_swapchain_update_state_vulkan
#ifdef XRTRANSPORT_EXT_XR_FB_spatial_entity_sharing

    {XR_TYPE_SPACE_SHARE_INFO_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpaceShareInfoFB)},


    {XR_TYPE_EVENT_DATA_SPACE_SHARE_COMPLETE_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEventDataSpaceShareCompleteFB)},


    {XR_TYPE_SPACE_SHARE_INFO_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpaceShareInfoFB)},


    {XR_TYPE_EVENT_DATA_SPACE_SHARE_COMPLETE_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEventDataSpaceShareCompleteFB)},

#endif // XRTRANSPORT_EXT_XR_FB_spatial_entity_sharing
#ifdef XRTRANSPORT_EXT_XR_FB_space_warp

    {XR_TYPE_COMPOSITION_LAYER_SPACE_WARP_INFO_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrCompositionLayerSpaceWarpInfoFB)},


    {XR_TYPE_SYSTEM_SPACE_WARP_PROPERTIES_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemSpaceWarpPropertiesFB)},


    {XR_TYPE_COMPOSITION_LAYER_SPACE_WARP_INFO_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrCompositionLayerSpaceWarpInfoFB)},


    {XR_TYPE_SYSTEM_SPACE_WARP_PROPERTIES_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemSpaceWarpPropertiesFB)},

#endif // XRTRANSPORT_EXT_XR_FB_space_warp
#ifdef XRTRANSPORT_EXT_XR_FB_haptic_amplitude_envelope

    {XR_TYPE_HAPTIC_AMPLITUDE_ENVELOPE_VIBRATION_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrHapticAmplitudeEnvelopeVibrationFB)},


    {XR_TYPE_HAPTIC_AMPLITUDE_ENVELOPE_VIBRATION_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrHapticAmplitudeEnvelopeVibrationFB)},

#endif // XRTRANSPORT_EXT_XR_FB_haptic_amplitude_envelope
#ifdef XRTRANSPORT_EXT_XR_FB_scene

    {XR_TYPE_SEMANTIC_LABELS_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSemanticLabelsFB)},


    {XR_TYPE_ROOM_LAYOUT_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrRoomLayoutFB)},


    {XR_TYPE_BOUNDARY_2D_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrBoundary2DFB)},


    {XR_TYPE_SEMANTIC_LABELS_SUPPORT_INFO_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSemanticLabelsSupportInfoFB)},


    {XR_TYPE_SEMANTIC_LABELS_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSemanticLabelsFB)},


    {XR_TYPE_ROOM_LAYOUT_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrRoomLayoutFB)},


    {XR_TYPE_BOUNDARY_2D_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrBoundary2DFB)},


    {XR_TYPE_SEMANTIC_LABELS_SUPPORT_INFO_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSemanticLabelsSupportInfoFB)},

#endif // XRTRANSPORT_EXT_XR_FB_scene
#ifdef XRTRANSPORT_EXT_XR_ALMALENCE_digital_lens_control

    {XR_TYPE_DIGITAL_LENS_CONTROL_ALMALENCE, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrDigitalLensControlALMALENCE)},

#endif // XRTRANSPORT_EXT_XR_ALMALENCE_digital_lens_control
#ifdef XRTRANSPORT_EXT_XR_FB_scene_capture

    {XR_TYPE_EVENT_DATA_SCENE_CAPTURE_COMPLETE_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEventDataSceneCaptureCompleteFB)},


    {XR_TYPE_SCENE_CAPTURE_REQUEST_INFO_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSceneCaptureRequestInfoFB)},


    {XR_TYPE_EVENT_DATA_SCENE_CAPTURE_COMPLETE_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEventDataSceneCaptureCompleteFB)},


    {XR_TYPE_SCENE_CAPTURE_REQUEST_INFO_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSceneCaptureRequestInfoFB)},

#endif // XRTRANSPORT_EXT_XR_FB_scene_capture
#ifdef XRTRANSPORT_EXT_XR_FB_spatial_entity_container

    {XR_TYPE_SPACE_CONTAINER_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpaceContainerFB)},


    {XR_TYPE_SPACE_CONTAINER_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpaceContainerFB)},

#endif // XRTRANSPORT_EXT_XR_FB_spatial_entity_container
#ifdef XRTRANSPORT_EXT_XR_META_foveation_eye_tracked

    {XR_TYPE_FOVEATION_EYE_TRACKED_PROFILE_CREATE_INFO_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrFoveationEyeTrackedProfileCreateInfoMETA)},


    {XR_TYPE_FOVEATION_EYE_TRACKED_STATE_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrFoveationEyeTrackedStateMETA)},


    {XR_TYPE_SYSTEM_FOVEATION_EYE_TRACKED_PROPERTIES_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemFoveationEyeTrackedPropertiesMETA)},


    {XR_TYPE_FOVEATION_EYE_TRACKED_PROFILE_CREATE_INFO_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrFoveationEyeTrackedProfileCreateInfoMETA)},


    {XR_TYPE_FOVEATION_EYE_TRACKED_STATE_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrFoveationEyeTrackedStateMETA)},


    {XR_TYPE_SYSTEM_FOVEATION_EYE_TRACKED_PROPERTIES_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemFoveationEyeTrackedPropertiesMETA)},

#endif // XRTRANSPORT_EXT_XR_META_foveation_eye_tracked
#ifdef XRTRANSPORT_EXT_XR_FB_face_tracking

    {XR_TYPE_SYSTEM_FACE_TRACKING_PROPERTIES_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemFaceTrackingPropertiesFB)},


    {XR_TYPE_FACE_TRACKER_CREATE_INFO_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrFaceTrackerCreateInfoFB)},


    {XR_TYPE_FACE_EXPRESSION_INFO_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrFaceExpressionInfoFB)},


    {XR_TYPE_FACE_EXPRESSION_WEIGHTS_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrFaceExpressionWeightsFB)},


    {XR_TYPE_SYSTEM_FACE_TRACKING_PROPERTIES_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemFaceTrackingPropertiesFB)},


    {XR_TYPE_FACE_TRACKER_CREATE_INFO_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrFaceTrackerCreateInfoFB)},


    {XR_TYPE_FACE_EXPRESSION_INFO_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrFaceExpressionInfoFB)},


    {XR_TYPE_FACE_EXPRESSION_WEIGHTS_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrFaceExpressionWeightsFB)},

#endif // XRTRANSPORT_EXT_XR_FB_face_tracking
#ifdef XRTRANSPORT_EXT_XR_FB_eye_tracking_social

    {XR_TYPE_EYE_TRACKER_CREATE_INFO_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEyeTrackerCreateInfoFB)},


    {XR_TYPE_EYE_GAZES_INFO_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEyeGazesInfoFB)},


    {XR_TYPE_SYSTEM_EYE_TRACKING_PROPERTIES_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemEyeTrackingPropertiesFB)},


    {XR_TYPE_EYE_GAZES_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEyeGazesFB)},


    {XR_TYPE_EYE_TRACKER_CREATE_INFO_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEyeTrackerCreateInfoFB)},


    {XR_TYPE_EYE_GAZES_INFO_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEyeGazesInfoFB)},


    {XR_TYPE_EYE_GAZES_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEyeGazesFB)},


    {XR_TYPE_SYSTEM_EYE_TRACKING_PROPERTIES_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemEyeTrackingPropertiesFB)},

#endif // XRTRANSPORT_EXT_XR_FB_eye_tracking_social
#ifdef XRTRANSPORT_EXT_XR_FB_passthrough_keyboard_hands

    {XR_TYPE_PASSTHROUGH_KEYBOARD_HANDS_INTENSITY_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrPassthroughKeyboardHandsIntensityFB)},


    {XR_TYPE_PASSTHROUGH_KEYBOARD_HANDS_INTENSITY_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrPassthroughKeyboardHandsIntensityFB)},

#endif // XRTRANSPORT_EXT_XR_FB_passthrough_keyboard_hands
#ifdef XRTRANSPORT_EXT_XR_FB_composition_layer_settings

    {XR_TYPE_COMPOSITION_LAYER_SETTINGS_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrCompositionLayerSettingsFB)},


    {XR_TYPE_COMPOSITION_LAYER_SETTINGS_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrCompositionLayerSettingsFB)},

#endif // XRTRANSPORT_EXT_XR_FB_composition_layer_settings
#ifdef XRTRANSPORT_EXT_XR_FB_haptic_pcm

    {XR_TYPE_HAPTIC_PCM_VIBRATION_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrHapticPcmVibrationFB)},


    {XR_TYPE_DEVICE_PCM_SAMPLE_RATE_STATE_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrDevicePcmSampleRateStateFB)},


    {XR_TYPE_HAPTIC_PCM_VIBRATION_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrHapticPcmVibrationFB)},


    {XR_TYPE_DEVICE_PCM_SAMPLE_RATE_STATE_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrDevicePcmSampleRateStateFB)},

#endif // XRTRANSPORT_EXT_XR_FB_haptic_pcm
#ifdef XRTRANSPORT_EXT_XR_EXT_frame_synthesis

    {XR_TYPE_FRAME_SYNTHESIS_INFO_EXT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrFrameSynthesisInfoEXT)},


    {XR_TYPE_FRAME_SYNTHESIS_CONFIG_VIEW_EXT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrFrameSynthesisConfigViewEXT)},


    {XR_TYPE_FRAME_SYNTHESIS_INFO_EXT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrFrameSynthesisInfoEXT)},


    {XR_TYPE_FRAME_SYNTHESIS_CONFIG_VIEW_EXT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrFrameSynthesisConfigViewEXT)},

#endif // XRTRANSPORT_EXT_XR_EXT_frame_synthesis
#ifdef XRTRANSPORT_EXT_XR_FB_composition_layer_depth_test

    {XR_TYPE_COMPOSITION_LAYER_DEPTH_TEST_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrCompositionLayerDepthTestFB)},


    {XR_TYPE_COMPOSITION_LAYER_DEPTH_TEST_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrCompositionLayerDepthTestFB)},

#endif // XRTRANSPORT_EXT_XR_FB_composition_layer_depth_test
#ifdef XRTRANSPORT_EXT_XR_META_local_dimming

    {XR_TYPE_LOCAL_DIMMING_FRAME_END_INFO_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrLocalDimmingFrameEndInfoMETA)},


    {XR_TYPE_LOCAL_DIMMING_FRAME_END_INFO_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrLocalDimmingFrameEndInfoMETA)},

#endif // XRTRANSPORT_EXT_XR_META_local_dimming
#ifdef XRTRANSPORT_EXT_XR_META_passthrough_preferences

    {XR_TYPE_PASSTHROUGH_PREFERENCES_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrPassthroughPreferencesMETA)},


    {XR_TYPE_PASSTHROUGH_PREFERENCES_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrPassthroughPreferencesMETA)},

#endif // XRTRANSPORT_EXT_XR_META_passthrough_preferences
#ifdef XRTRANSPORT_EXT_XR_META_virtual_keyboard

    {XR_TYPE_SYSTEM_VIRTUAL_KEYBOARD_PROPERTIES_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemVirtualKeyboardPropertiesMETA)},


    {XR_TYPE_VIRTUAL_KEYBOARD_CREATE_INFO_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrVirtualKeyboardCreateInfoMETA)},


    {XR_TYPE_VIRTUAL_KEYBOARD_SPACE_CREATE_INFO_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrVirtualKeyboardSpaceCreateInfoMETA)},


    {XR_TYPE_VIRTUAL_KEYBOARD_LOCATION_INFO_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrVirtualKeyboardLocationInfoMETA)},


    {XR_TYPE_VIRTUAL_KEYBOARD_MODEL_VISIBILITY_SET_INFO_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrVirtualKeyboardModelVisibilitySetInfoMETA)},


    {XR_TYPE_VIRTUAL_KEYBOARD_ANIMATION_STATE_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrVirtualKeyboardAnimationStateMETA)},


    {XR_TYPE_VIRTUAL_KEYBOARD_MODEL_ANIMATION_STATES_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrVirtualKeyboardModelAnimationStatesMETA)},


    {XR_TYPE_VIRTUAL_KEYBOARD_TEXTURE_DATA_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrVirtualKeyboardTextureDataMETA)},


    {XR_TYPE_VIRTUAL_KEYBOARD_INPUT_INFO_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrVirtualKeyboardInputInfoMETA)},


    {XR_TYPE_VIRTUAL_KEYBOARD_TEXT_CONTEXT_CHANGE_INFO_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrVirtualKeyboardTextContextChangeInfoMETA)},


    {XR_TYPE_EVENT_DATA_VIRTUAL_KEYBOARD_COMMIT_TEXT_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEventDataVirtualKeyboardCommitTextMETA)},


    {XR_TYPE_EVENT_DATA_VIRTUAL_KEYBOARD_BACKSPACE_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEventDataVirtualKeyboardBackspaceMETA)},


    {XR_TYPE_EVENT_DATA_VIRTUAL_KEYBOARD_ENTER_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEventDataVirtualKeyboardEnterMETA)},


    {XR_TYPE_EVENT_DATA_VIRTUAL_KEYBOARD_SHOWN_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEventDataVirtualKeyboardShownMETA)},


    {XR_TYPE_EVENT_DATA_VIRTUAL_KEYBOARD_HIDDEN_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEventDataVirtualKeyboardHiddenMETA)},


    {XR_TYPE_SYSTEM_VIRTUAL_KEYBOARD_PROPERTIES_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemVirtualKeyboardPropertiesMETA)},


    {XR_TYPE_VIRTUAL_KEYBOARD_CREATE_INFO_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrVirtualKeyboardCreateInfoMETA)},


    {XR_TYPE_VIRTUAL_KEYBOARD_SPACE_CREATE_INFO_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrVirtualKeyboardSpaceCreateInfoMETA)},


    {XR_TYPE_VIRTUAL_KEYBOARD_LOCATION_INFO_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrVirtualKeyboardLocationInfoMETA)},


    {XR_TYPE_VIRTUAL_KEYBOARD_MODEL_VISIBILITY_SET_INFO_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrVirtualKeyboardModelVisibilitySetInfoMETA)},


    {XR_TYPE_VIRTUAL_KEYBOARD_ANIMATION_STATE_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrVirtualKeyboardAnimationStateMETA)},


    {XR_TYPE_VIRTUAL_KEYBOARD_MODEL_ANIMATION_STATES_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrVirtualKeyboardModelAnimationStatesMETA)},


    {XR_TYPE_VIRTUAL_KEYBOARD_TEXTURE_DATA_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrVirtualKeyboardTextureDataMETA)},


    {XR_TYPE_VIRTUAL_KEYBOARD_INPUT_INFO_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrVirtualKeyboardInputInfoMETA)},


    {XR_TYPE_VIRTUAL_KEYBOARD_TEXT_CONTEXT_CHANGE_INFO_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrVirtualKeyboardTextContextChangeInfoMETA)},


    {XR_TYPE_EVENT_DATA_VIRTUAL_KEYBOARD_COMMIT_TEXT_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEventDataVirtualKeyboardCommitTextMETA)},


    {XR_TYPE_EVENT_DATA_VIRTUAL_KEYBOARD_BACKSPACE_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEventDataVirtualKeyboardBackspaceMETA)},


    {XR_TYPE_EVENT_DATA_VIRTUAL_KEYBOARD_ENTER_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEventDataVirtualKeyboardEnterMETA)},


    {XR_TYPE_EVENT_DATA_VIRTUAL_KEYBOARD_SHOWN_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEventDataVirtualKeyboardShownMETA)},


    {XR_TYPE_EVENT_DATA_VIRTUAL_KEYBOARD_HIDDEN_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEventDataVirtualKeyboardHiddenMETA)},

#endif // XRTRANSPORT_EXT_XR_META_virtual_keyboard
#ifdef XRTRANSPORT_EXT_XR_OCULUS_external_camera

    {XR_TYPE_EXTERNAL_CAMERA_OCULUS, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrExternalCameraOCULUS)},


    {XR_TYPE_EXTERNAL_CAMERA_OCULUS, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrExternalCameraOCULUS)},

#endif // XRTRANSPORT_EXT_XR_OCULUS_external_camera
#ifdef XRTRANSPORT_EXT_XR_META_vulkan_swapchain_create_info

    {XR_TYPE_VULKAN_SWAPCHAIN_CREATE_INFO_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrVulkanSwapchainCreateInfoMETA)},


    {XR_TYPE_VULKAN_SWAPCHAIN_CREATE_INFO_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrVulkanSwapchainCreateInfoMETA)},

#endif // XRTRANSPORT_EXT_XR_META_vulkan_swapchain_create_info
#ifdef XRTRANSPORT_EXT_XR_META_performance_metrics

    {XR_TYPE_PERFORMANCE_METRICS_STATE_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrPerformanceMetricsStateMETA)},


    {XR_TYPE_PERFORMANCE_METRICS_COUNTER_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrPerformanceMetricsCounterMETA)},


    {XR_TYPE_PERFORMANCE_METRICS_STATE_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrPerformanceMetricsStateMETA)},


    {XR_TYPE_PERFORMANCE_METRICS_COUNTER_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrPerformanceMetricsCounterMETA)},

#endif // XRTRANSPORT_EXT_XR_META_performance_metrics
#ifdef XRTRANSPORT_EXT_XR_FB_spatial_entity_storage_batch

    {XR_TYPE_SPACE_LIST_SAVE_INFO_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpaceListSaveInfoFB)},


    {XR_TYPE_EVENT_DATA_SPACE_LIST_SAVE_COMPLETE_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEventDataSpaceListSaveCompleteFB)},


    {XR_TYPE_SPACE_LIST_SAVE_INFO_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpaceListSaveInfoFB)},


    {XR_TYPE_EVENT_DATA_SPACE_LIST_SAVE_COMPLETE_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEventDataSpaceListSaveCompleteFB)},

#endif // XRTRANSPORT_EXT_XR_FB_spatial_entity_storage_batch
#ifdef XRTRANSPORT_EXT_XR_FB_spatial_entity_user

    {XR_TYPE_SPACE_USER_CREATE_INFO_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpaceUserCreateInfoFB)},


    {XR_TYPE_SPACE_USER_CREATE_INFO_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpaceUserCreateInfoFB)},

#endif // XRTRANSPORT_EXT_XR_FB_spatial_entity_user
#ifdef XRTRANSPORT_EXT_XR_META_headset_id

    {XR_TYPE_SYSTEM_HEADSET_ID_PROPERTIES_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemHeadsetIdPropertiesMETA)},


    {XR_TYPE_SYSTEM_HEADSET_ID_PROPERTIES_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemHeadsetIdPropertiesMETA)},

#endif // XRTRANSPORT_EXT_XR_META_headset_id
#ifdef XRTRANSPORT_EXT_XR_META_recommended_layer_resolution

    {XR_TYPE_RECOMMENDED_LAYER_RESOLUTION_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrRecommendedLayerResolutionMETA)},


    {XR_TYPE_RECOMMENDED_LAYER_RESOLUTION_GET_INFO_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrRecommendedLayerResolutionGetInfoMETA)},


    {XR_TYPE_RECOMMENDED_LAYER_RESOLUTION_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrRecommendedLayerResolutionMETA)},


    {XR_TYPE_RECOMMENDED_LAYER_RESOLUTION_GET_INFO_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrRecommendedLayerResolutionGetInfoMETA)},

#endif // XRTRANSPORT_EXT_XR_META_recommended_layer_resolution
#ifdef XRTRANSPORT_EXT_XR_META_passthrough_color_lut

    {XR_TYPE_PASSTHROUGH_COLOR_LUT_CREATE_INFO_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrPassthroughColorLutCreateInfoMETA)},


    {XR_TYPE_PASSTHROUGH_COLOR_LUT_UPDATE_INFO_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrPassthroughColorLutUpdateInfoMETA)},


    {XR_TYPE_PASSTHROUGH_COLOR_MAP_LUT_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrPassthroughColorMapLutMETA)},


    {XR_TYPE_PASSTHROUGH_COLOR_MAP_INTERPOLATED_LUT_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrPassthroughColorMapInterpolatedLutMETA)},


    {XR_TYPE_SYSTEM_PASSTHROUGH_COLOR_LUT_PROPERTIES_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemPassthroughColorLutPropertiesMETA)},


    {XR_TYPE_SYSTEM_PASSTHROUGH_COLOR_LUT_PROPERTIES_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemPassthroughColorLutPropertiesMETA)},


    {XR_TYPE_PASSTHROUGH_COLOR_LUT_CREATE_INFO_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrPassthroughColorLutCreateInfoMETA)},


    {XR_TYPE_PASSTHROUGH_COLOR_LUT_UPDATE_INFO_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrPassthroughColorLutUpdateInfoMETA)},


    {XR_TYPE_PASSTHROUGH_COLOR_MAP_LUT_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrPassthroughColorMapLutMETA)},


    {XR_TYPE_PASSTHROUGH_COLOR_MAP_INTERPOLATED_LUT_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrPassthroughColorMapInterpolatedLutMETA)},

#endif // XRTRANSPORT_EXT_XR_META_passthrough_color_lut
#ifdef XRTRANSPORT_EXT_XR_META_spatial_entity_mesh

    {XR_TYPE_SPACE_TRIANGLE_MESH_GET_INFO_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpaceTriangleMeshGetInfoMETA)},


    {XR_TYPE_SPACE_TRIANGLE_MESH_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpaceTriangleMeshMETA)},


    {XR_TYPE_SPACE_TRIANGLE_MESH_GET_INFO_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpaceTriangleMeshGetInfoMETA)},


    {XR_TYPE_SPACE_TRIANGLE_MESH_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpaceTriangleMeshMETA)},

#endif // XRTRANSPORT_EXT_XR_META_spatial_entity_mesh
#ifdef XRTRANSPORT_EXT_XR_META_body_tracking_full_body

    {XR_TYPE_SYSTEM_PROPERTIES_BODY_TRACKING_FULL_BODY_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemPropertiesBodyTrackingFullBodyMETA)},


    {XR_TYPE_SYSTEM_PROPERTIES_BODY_TRACKING_FULL_BODY_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemPropertiesBodyTrackingFullBodyMETA)},

#endif // XRTRANSPORT_EXT_XR_META_body_tracking_full_body
#ifdef XRTRANSPORT_EXT_XR_META_passthrough_layer_resumed_event

    {XR_TYPE_EVENT_DATA_PASSTHROUGH_LAYER_RESUMED_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEventDataPassthroughLayerResumedMETA)},


    {XR_TYPE_EVENT_DATA_PASSTHROUGH_LAYER_RESUMED_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEventDataPassthroughLayerResumedMETA)},

#endif // XRTRANSPORT_EXT_XR_META_passthrough_layer_resumed_event
#ifdef XRTRANSPORT_EXT_XR_FB_face_tracking2

    {XR_TYPE_SYSTEM_FACE_TRACKING_PROPERTIES2_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemFaceTrackingProperties2FB)},


    {XR_TYPE_FACE_TRACKER_CREATE_INFO2_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrFaceTrackerCreateInfo2FB)},


    {XR_TYPE_FACE_EXPRESSION_INFO2_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrFaceExpressionInfo2FB)},


    {XR_TYPE_FACE_EXPRESSION_WEIGHTS2_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrFaceExpressionWeights2FB)},


    {XR_TYPE_SYSTEM_FACE_TRACKING_PROPERTIES2_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemFaceTrackingProperties2FB)},


    {XR_TYPE_FACE_TRACKER_CREATE_INFO2_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrFaceTrackerCreateInfo2FB)},


    {XR_TYPE_FACE_EXPRESSION_INFO2_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrFaceExpressionInfo2FB)},


    {XR_TYPE_FACE_EXPRESSION_WEIGHTS2_FB, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrFaceExpressionWeights2FB)},

#endif // XRTRANSPORT_EXT_XR_FB_face_tracking2
#ifdef XRTRANSPORT_EXT_XR_META_spatial_entity_sharing

    {XR_TYPE_SYSTEM_SPATIAL_ENTITY_SHARING_PROPERTIES_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemSpatialEntitySharingPropertiesMETA)},


    {XR_TYPE_SHARE_SPACES_INFO_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrShareSpacesInfoMETA)},


    {XR_TYPE_EVENT_DATA_SHARE_SPACES_COMPLETE_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEventDataShareSpacesCompleteMETA)},


    {XR_TYPE_SYSTEM_SPATIAL_ENTITY_SHARING_PROPERTIES_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemSpatialEntitySharingPropertiesMETA)},


    {XR_TYPE_SHARE_SPACES_INFO_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrShareSpacesInfoMETA)},


    {XR_TYPE_EVENT_DATA_SHARE_SPACES_COMPLETE_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEventDataShareSpacesCompleteMETA)},

#endif // XRTRANSPORT_EXT_XR_META_spatial_entity_sharing
#ifdef XRTRANSPORT_EXT_XR_META_environment_depth

    {XR_TYPE_ENVIRONMENT_DEPTH_PROVIDER_CREATE_INFO_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEnvironmentDepthProviderCreateInfoMETA)},


    {XR_TYPE_ENVIRONMENT_DEPTH_SWAPCHAIN_CREATE_INFO_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEnvironmentDepthSwapchainCreateInfoMETA)},


    {XR_TYPE_ENVIRONMENT_DEPTH_SWAPCHAIN_STATE_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEnvironmentDepthSwapchainStateMETA)},


    {XR_TYPE_ENVIRONMENT_DEPTH_IMAGE_ACQUIRE_INFO_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEnvironmentDepthImageAcquireInfoMETA)},


    {XR_TYPE_ENVIRONMENT_DEPTH_IMAGE_VIEW_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEnvironmentDepthImageViewMETA)},


    {XR_TYPE_ENVIRONMENT_DEPTH_IMAGE_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEnvironmentDepthImageMETA)},


    {XR_TYPE_ENVIRONMENT_DEPTH_HAND_REMOVAL_SET_INFO_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEnvironmentDepthHandRemovalSetInfoMETA)},


    {XR_TYPE_SYSTEM_ENVIRONMENT_DEPTH_PROPERTIES_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemEnvironmentDepthPropertiesMETA)},


    {XR_TYPE_ENVIRONMENT_DEPTH_PROVIDER_CREATE_INFO_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEnvironmentDepthProviderCreateInfoMETA)},


    {XR_TYPE_ENVIRONMENT_DEPTH_SWAPCHAIN_CREATE_INFO_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEnvironmentDepthSwapchainCreateInfoMETA)},


    {XR_TYPE_ENVIRONMENT_DEPTH_SWAPCHAIN_STATE_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEnvironmentDepthSwapchainStateMETA)},


    {XR_TYPE_ENVIRONMENT_DEPTH_IMAGE_ACQUIRE_INFO_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEnvironmentDepthImageAcquireInfoMETA)},


    {XR_TYPE_ENVIRONMENT_DEPTH_IMAGE_VIEW_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEnvironmentDepthImageViewMETA)},


    {XR_TYPE_ENVIRONMENT_DEPTH_IMAGE_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEnvironmentDepthImageMETA)},


    {XR_TYPE_ENVIRONMENT_DEPTH_HAND_REMOVAL_SET_INFO_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEnvironmentDepthHandRemovalSetInfoMETA)},


    {XR_TYPE_SYSTEM_ENVIRONMENT_DEPTH_PROPERTIES_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemEnvironmentDepthPropertiesMETA)},

#endif // XRTRANSPORT_EXT_XR_META_environment_depth
#ifdef XRTRANSPORT_EXT_XR_QCOM_tracking_optimization_settings
#endif // XRTRANSPORT_EXT_XR_QCOM_tracking_optimization_settings
#ifdef XRTRANSPORT_EXT_XR_HTC_passthrough

    {XR_TYPE_PASSTHROUGH_CREATE_INFO_HTC, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrPassthroughCreateInfoHTC)},


    {XR_TYPE_PASSTHROUGH_COLOR_HTC, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrPassthroughColorHTC)},


    {XR_TYPE_PASSTHROUGH_MESH_TRANSFORM_INFO_HTC, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrPassthroughMeshTransformInfoHTC)},


    {XR_TYPE_COMPOSITION_LAYER_PASSTHROUGH_HTC, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrCompositionLayerPassthroughHTC)},


    {XR_TYPE_PASSTHROUGH_CREATE_INFO_HTC, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrPassthroughCreateInfoHTC)},


    {XR_TYPE_PASSTHROUGH_COLOR_HTC, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrPassthroughColorHTC)},


    {XR_TYPE_PASSTHROUGH_MESH_TRANSFORM_INFO_HTC, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrPassthroughMeshTransformInfoHTC)},


    {XR_TYPE_COMPOSITION_LAYER_PASSTHROUGH_HTC, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrCompositionLayerPassthroughHTC)},

#endif // XRTRANSPORT_EXT_XR_HTC_passthrough
#ifdef XRTRANSPORT_EXT_XR_HTC_foveation

    {XR_TYPE_FOVEATION_APPLY_INFO_HTC, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrFoveationApplyInfoHTC)},


    {XR_TYPE_FOVEATION_DYNAMIC_MODE_INFO_HTC, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrFoveationDynamicModeInfoHTC)},


    {XR_TYPE_FOVEATION_CUSTOM_MODE_INFO_HTC, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrFoveationCustomModeInfoHTC)},


    {XR_TYPE_FOVEATION_APPLY_INFO_HTC, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrFoveationApplyInfoHTC)},


    {XR_TYPE_FOVEATION_DYNAMIC_MODE_INFO_HTC, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrFoveationDynamicModeInfoHTC)},


    {XR_TYPE_FOVEATION_CUSTOM_MODE_INFO_HTC, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrFoveationCustomModeInfoHTC)},

#endif // XRTRANSPORT_EXT_XR_HTC_foveation
#ifdef XRTRANSPORT_EXT_XR_HTC_anchor

    {XR_TYPE_SYSTEM_ANCHOR_PROPERTIES_HTC, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemAnchorPropertiesHTC)},


    {XR_TYPE_SPATIAL_ANCHOR_CREATE_INFO_HTC, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpatialAnchorCreateInfoHTC)},


    {XR_TYPE_SYSTEM_ANCHOR_PROPERTIES_HTC, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemAnchorPropertiesHTC)},


    {XR_TYPE_SPATIAL_ANCHOR_CREATE_INFO_HTC, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpatialAnchorCreateInfoHTC)},

#endif // XRTRANSPORT_EXT_XR_HTC_anchor
#ifdef XRTRANSPORT_EXT_XR_HTC_body_tracking

    {XR_TYPE_SYSTEM_BODY_TRACKING_PROPERTIES_HTC, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemBodyTrackingPropertiesHTC)},


    {XR_TYPE_BODY_TRACKER_CREATE_INFO_HTC, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrBodyTrackerCreateInfoHTC)},


    {XR_TYPE_BODY_JOINTS_LOCATE_INFO_HTC, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrBodyJointsLocateInfoHTC)},


    {XR_TYPE_BODY_JOINT_LOCATIONS_HTC, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrBodyJointLocationsHTC)},


    {XR_TYPE_BODY_SKELETON_HTC, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrBodySkeletonHTC)},


    {XR_TYPE_SYSTEM_BODY_TRACKING_PROPERTIES_HTC, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemBodyTrackingPropertiesHTC)},


    {XR_TYPE_BODY_TRACKER_CREATE_INFO_HTC, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrBodyTrackerCreateInfoHTC)},


    {XR_TYPE_BODY_JOINTS_LOCATE_INFO_HTC, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrBodyJointsLocateInfoHTC)},


    {XR_TYPE_BODY_JOINT_LOCATIONS_HTC, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrBodyJointLocationsHTC)},


    {XR_TYPE_BODY_SKELETON_HTC, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrBodySkeletonHTC)},

#endif // XRTRANSPORT_EXT_XR_HTC_body_tracking
#ifdef XRTRANSPORT_EXT_XR_EXT_active_action_set_priority

    {XR_TYPE_ACTIVE_ACTION_SET_PRIORITIES_EXT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrActiveActionSetPrioritiesEXT)},


    {XR_TYPE_ACTIVE_ACTION_SET_PRIORITIES_EXT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrActiveActionSetPrioritiesEXT)},

#endif // XRTRANSPORT_EXT_XR_EXT_active_action_set_priority
#ifdef XRTRANSPORT_EXT_XR_MNDX_force_feedback_curl

    {XR_TYPE_SYSTEM_FORCE_FEEDBACK_CURL_PROPERTIES_MNDX, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemForceFeedbackCurlPropertiesMNDX)},


    {XR_TYPE_FORCE_FEEDBACK_CURL_APPLY_LOCATIONS_MNDX, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrForceFeedbackCurlApplyLocationsMNDX)},


    {XR_TYPE_SYSTEM_FORCE_FEEDBACK_CURL_PROPERTIES_MNDX, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemForceFeedbackCurlPropertiesMNDX)},


    {XR_TYPE_FORCE_FEEDBACK_CURL_APPLY_LOCATIONS_MNDX, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrForceFeedbackCurlApplyLocationsMNDX)},

#endif // XRTRANSPORT_EXT_XR_MNDX_force_feedback_curl
#ifdef XRTRANSPORT_EXT_XR_BD_body_tracking

    {XR_TYPE_SYSTEM_BODY_TRACKING_PROPERTIES_BD, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemBodyTrackingPropertiesBD)},


    {XR_TYPE_BODY_TRACKER_CREATE_INFO_BD, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrBodyTrackerCreateInfoBD)},


    {XR_TYPE_BODY_JOINTS_LOCATE_INFO_BD, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrBodyJointsLocateInfoBD)},


    {XR_TYPE_BODY_JOINT_LOCATIONS_BD, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrBodyJointLocationsBD)},


    {XR_TYPE_BODY_TRACKER_CREATE_INFO_BD, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrBodyTrackerCreateInfoBD)},


    {XR_TYPE_BODY_JOINTS_LOCATE_INFO_BD, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrBodyJointsLocateInfoBD)},


    {XR_TYPE_BODY_JOINT_LOCATIONS_BD, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrBodyJointLocationsBD)},


    {XR_TYPE_SYSTEM_BODY_TRACKING_PROPERTIES_BD, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemBodyTrackingPropertiesBD)},

#endif // XRTRANSPORT_EXT_XR_BD_body_tracking
#ifdef XRTRANSPORT_EXT_XR_BD_spatial_sensing

    {XR_TYPE_SYSTEM_SPATIAL_SENSING_PROPERTIES_BD, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemSpatialSensingPropertiesBD)},


    {XR_TYPE_SPATIAL_ENTITY_COMPONENT_GET_INFO_BD, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpatialEntityComponentGetInfoBD)},


    {XR_TYPE_SPATIAL_ENTITY_LOCATION_GET_INFO_BD, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpatialEntityLocationGetInfoBD)},


    {XR_TYPE_SPATIAL_ENTITY_COMPONENT_DATA_LOCATION_BD, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpatialEntityComponentDataLocationBD)},


    {XR_TYPE_SPATIAL_ENTITY_COMPONENT_DATA_SEMANTIC_BD, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpatialEntityComponentDataSemanticBD)},


    {XR_TYPE_SPATIAL_ENTITY_COMPONENT_DATA_BOUNDING_BOX_2D_BD, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpatialEntityComponentDataBoundingBox2DBD)},


    {XR_TYPE_SPATIAL_ENTITY_COMPONENT_DATA_POLYGON_BD, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpatialEntityComponentDataPolygonBD)},


    {XR_TYPE_SPATIAL_ENTITY_COMPONENT_DATA_BOUNDING_BOX_3D_BD, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpatialEntityComponentDataBoundingBox3DBD)},


    {XR_TYPE_SPATIAL_ENTITY_COMPONENT_DATA_TRIANGLE_MESH_BD, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpatialEntityComponentDataTriangleMeshBD)},


    {XR_TYPE_SENSE_DATA_PROVIDER_CREATE_INFO_BD, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSenseDataProviderCreateInfoBD)},


    {XR_TYPE_SENSE_DATA_PROVIDER_START_INFO_BD, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSenseDataProviderStartInfoBD)},


    {XR_TYPE_EVENT_DATA_SENSE_DATA_PROVIDER_STATE_CHANGED_BD, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEventDataSenseDataProviderStateChangedBD)},


    {XR_TYPE_EVENT_DATA_SENSE_DATA_UPDATED_BD, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEventDataSenseDataUpdatedBD)},


    {XR_TYPE_SENSE_DATA_QUERY_INFO_BD, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSenseDataQueryInfoBD)},


    {XR_TYPE_SENSE_DATA_QUERY_COMPLETION_BD, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSenseDataQueryCompletionBD)},


    {XR_TYPE_QUERIED_SENSE_DATA_GET_INFO_BD, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrQueriedSenseDataGetInfoBD)},


    {XR_TYPE_QUERIED_SENSE_DATA_BD, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrQueriedSenseDataBD)},


    {XR_TYPE_SPATIAL_ENTITY_STATE_BD, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpatialEntityStateBD)},


    {XR_TYPE_SENSE_DATA_FILTER_UUID_BD, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSenseDataFilterUuidBD)},


    {XR_TYPE_SENSE_DATA_FILTER_SEMANTIC_BD, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSenseDataFilterSemanticBD)},


    {XR_TYPE_SPATIAL_ENTITY_ANCHOR_CREATE_INFO_BD, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpatialEntityAnchorCreateInfoBD)},


    {XR_TYPE_ANCHOR_SPACE_CREATE_INFO_BD, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrAnchorSpaceCreateInfoBD)},


    {XR_TYPE_SYSTEM_SPATIAL_SENSING_PROPERTIES_BD, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemSpatialSensingPropertiesBD)},


    {XR_TYPE_SPATIAL_ENTITY_COMPONENT_GET_INFO_BD, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpatialEntityComponentGetInfoBD)},


    {XR_TYPE_SPATIAL_ENTITY_LOCATION_GET_INFO_BD, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpatialEntityLocationGetInfoBD)},


    {XR_TYPE_SPATIAL_ENTITY_COMPONENT_DATA_LOCATION_BD, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpatialEntityComponentDataLocationBD)},


    {XR_TYPE_SPATIAL_ENTITY_COMPONENT_DATA_SEMANTIC_BD, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpatialEntityComponentDataSemanticBD)},


    {XR_TYPE_SPATIAL_ENTITY_COMPONENT_DATA_BOUNDING_BOX_2D_BD, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpatialEntityComponentDataBoundingBox2DBD)},


    {XR_TYPE_SPATIAL_ENTITY_COMPONENT_DATA_POLYGON_BD, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpatialEntityComponentDataPolygonBD)},


    {XR_TYPE_SPATIAL_ENTITY_COMPONENT_DATA_BOUNDING_BOX_3D_BD, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpatialEntityComponentDataBoundingBox3DBD)},


    {XR_TYPE_SPATIAL_ENTITY_COMPONENT_DATA_TRIANGLE_MESH_BD, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpatialEntityComponentDataTriangleMeshBD)},


    {XR_TYPE_SENSE_DATA_PROVIDER_CREATE_INFO_BD, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSenseDataProviderCreateInfoBD)},


    {XR_TYPE_SENSE_DATA_PROVIDER_START_INFO_BD, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSenseDataProviderStartInfoBD)},


    {XR_TYPE_EVENT_DATA_SENSE_DATA_PROVIDER_STATE_CHANGED_BD, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEventDataSenseDataProviderStateChangedBD)},


    {XR_TYPE_EVENT_DATA_SENSE_DATA_UPDATED_BD, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEventDataSenseDataUpdatedBD)},


    {XR_TYPE_SENSE_DATA_QUERY_INFO_BD, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSenseDataQueryInfoBD)},


    {XR_TYPE_SENSE_DATA_QUERY_COMPLETION_BD, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSenseDataQueryCompletionBD)},


    {XR_TYPE_SENSE_DATA_FILTER_UUID_BD, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSenseDataFilterUuidBD)},


    {XR_TYPE_SENSE_DATA_FILTER_SEMANTIC_BD, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSenseDataFilterSemanticBD)},


    {XR_TYPE_QUERIED_SENSE_DATA_GET_INFO_BD, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrQueriedSenseDataGetInfoBD)},


    {XR_TYPE_QUERIED_SENSE_DATA_BD, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrQueriedSenseDataBD)},


    {XR_TYPE_SPATIAL_ENTITY_STATE_BD, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpatialEntityStateBD)},


    {XR_TYPE_SPATIAL_ENTITY_ANCHOR_CREATE_INFO_BD, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpatialEntityAnchorCreateInfoBD)},


    {XR_TYPE_ANCHOR_SPACE_CREATE_INFO_BD, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrAnchorSpaceCreateInfoBD)},

#endif // XRTRANSPORT_EXT_XR_BD_spatial_sensing
#ifdef XRTRANSPORT_EXT_XR_BD_spatial_anchor

    {XR_TYPE_SYSTEM_SPATIAL_ANCHOR_PROPERTIES_BD, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemSpatialAnchorPropertiesBD)},


    {XR_TYPE_SPATIAL_ANCHOR_CREATE_INFO_BD, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpatialAnchorCreateInfoBD)},


    {XR_TYPE_SPATIAL_ANCHOR_CREATE_COMPLETION_BD, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpatialAnchorCreateCompletionBD)},


    {XR_TYPE_SPATIAL_ANCHOR_PERSIST_INFO_BD, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpatialAnchorPersistInfoBD)},


    {XR_TYPE_SPATIAL_ANCHOR_UNPERSIST_INFO_BD, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpatialAnchorUnpersistInfoBD)},


    {XR_TYPE_SYSTEM_SPATIAL_ANCHOR_PROPERTIES_BD, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemSpatialAnchorPropertiesBD)},


    {XR_TYPE_SPATIAL_ANCHOR_CREATE_INFO_BD, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpatialAnchorCreateInfoBD)},


    {XR_TYPE_SPATIAL_ANCHOR_CREATE_COMPLETION_BD, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpatialAnchorCreateCompletionBD)},


    {XR_TYPE_SPATIAL_ANCHOR_PERSIST_INFO_BD, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpatialAnchorPersistInfoBD)},


    {XR_TYPE_SPATIAL_ANCHOR_UNPERSIST_INFO_BD, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpatialAnchorUnpersistInfoBD)},

#endif // XRTRANSPORT_EXT_XR_BD_spatial_anchor
#ifdef XRTRANSPORT_EXT_XR_BD_spatial_anchor_sharing

    {XR_TYPE_SYSTEM_SPATIAL_ANCHOR_SHARING_PROPERTIES_BD, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemSpatialAnchorSharingPropertiesBD)},


    {XR_TYPE_SPATIAL_ANCHOR_SHARE_INFO_BD, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpatialAnchorShareInfoBD)},


    {XR_TYPE_SHARED_SPATIAL_ANCHOR_DOWNLOAD_INFO_BD, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSharedSpatialAnchorDownloadInfoBD)},


    {XR_TYPE_SYSTEM_SPATIAL_ANCHOR_SHARING_PROPERTIES_BD, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemSpatialAnchorSharingPropertiesBD)},


    {XR_TYPE_SPATIAL_ANCHOR_SHARE_INFO_BD, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpatialAnchorShareInfoBD)},


    {XR_TYPE_SHARED_SPATIAL_ANCHOR_DOWNLOAD_INFO_BD, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSharedSpatialAnchorDownloadInfoBD)},

#endif // XRTRANSPORT_EXT_XR_BD_spatial_anchor_sharing
#ifdef XRTRANSPORT_EXT_XR_BD_spatial_scene

    {XR_TYPE_SYSTEM_SPATIAL_SCENE_PROPERTIES_BD, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemSpatialScenePropertiesBD)},


    {XR_TYPE_SCENE_CAPTURE_INFO_BD, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSceneCaptureInfoBD)},


    {XR_TYPE_SYSTEM_SPATIAL_SCENE_PROPERTIES_BD, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemSpatialScenePropertiesBD)},


    {XR_TYPE_SCENE_CAPTURE_INFO_BD, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSceneCaptureInfoBD)},

#endif // XRTRANSPORT_EXT_XR_BD_spatial_scene
#ifdef XRTRANSPORT_EXT_XR_BD_spatial_mesh

    {XR_TYPE_SYSTEM_SPATIAL_MESH_PROPERTIES_BD, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemSpatialMeshPropertiesBD)},


    {XR_TYPE_SENSE_DATA_PROVIDER_CREATE_INFO_SPATIAL_MESH_BD, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSenseDataProviderCreateInfoSpatialMeshBD)},


    {XR_TYPE_SYSTEM_SPATIAL_MESH_PROPERTIES_BD, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemSpatialMeshPropertiesBD)},


    {XR_TYPE_SENSE_DATA_PROVIDER_CREATE_INFO_SPATIAL_MESH_BD, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSenseDataProviderCreateInfoSpatialMeshBD)},

#endif // XRTRANSPORT_EXT_XR_BD_spatial_mesh
#ifdef XRTRANSPORT_EXT_XR_BD_future_progress

    {XR_TYPE_FUTURE_POLL_RESULT_PROGRESS_BD, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrFuturePollResultProgressBD)},


    {XR_TYPE_FUTURE_POLL_RESULT_PROGRESS_BD, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrFuturePollResultProgressBD)},

#endif // XRTRANSPORT_EXT_XR_BD_future_progress
#ifdef XRTRANSPORT_EXT_XR_EXT_hand_tracking_data_source

    {XR_TYPE_HAND_TRACKING_DATA_SOURCE_INFO_EXT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrHandTrackingDataSourceInfoEXT)},


    {XR_TYPE_HAND_TRACKING_DATA_SOURCE_STATE_EXT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrHandTrackingDataSourceStateEXT)},


    {XR_TYPE_HAND_TRACKING_DATA_SOURCE_INFO_EXT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrHandTrackingDataSourceInfoEXT)},


    {XR_TYPE_HAND_TRACKING_DATA_SOURCE_STATE_EXT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrHandTrackingDataSourceStateEXT)},

#endif // XRTRANSPORT_EXT_XR_EXT_hand_tracking_data_source
#ifdef XRTRANSPORT_EXT_XR_EXT_plane_detection

    {XR_TYPE_SYSTEM_PLANE_DETECTION_PROPERTIES_EXT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemPlaneDetectionPropertiesEXT)},


    {XR_TYPE_PLANE_DETECTOR_CREATE_INFO_EXT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrPlaneDetectorCreateInfoEXT)},


    {XR_TYPE_PLANE_DETECTOR_BEGIN_INFO_EXT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrPlaneDetectorBeginInfoEXT)},


    {XR_TYPE_PLANE_DETECTOR_GET_INFO_EXT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrPlaneDetectorGetInfoEXT)},


    {XR_TYPE_PLANE_DETECTOR_LOCATION_EXT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrPlaneDetectorLocationEXT)},


    {XR_TYPE_PLANE_DETECTOR_LOCATIONS_EXT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrPlaneDetectorLocationsEXT)},


    {XR_TYPE_PLANE_DETECTOR_POLYGON_BUFFER_EXT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrPlaneDetectorPolygonBufferEXT)},


    {XR_TYPE_PLANE_DETECTOR_CREATE_INFO_EXT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrPlaneDetectorCreateInfoEXT)},


    {XR_TYPE_PLANE_DETECTOR_BEGIN_INFO_EXT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrPlaneDetectorBeginInfoEXT)},


    {XR_TYPE_PLANE_DETECTOR_GET_INFO_EXT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrPlaneDetectorGetInfoEXT)},


    {XR_TYPE_PLANE_DETECTOR_LOCATIONS_EXT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrPlaneDetectorLocationsEXT)},


    {XR_TYPE_PLANE_DETECTOR_LOCATION_EXT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrPlaneDetectorLocationEXT)},


    {XR_TYPE_PLANE_DETECTOR_POLYGON_BUFFER_EXT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrPlaneDetectorPolygonBufferEXT)},


    {XR_TYPE_SYSTEM_PLANE_DETECTION_PROPERTIES_EXT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemPlaneDetectionPropertiesEXT)},

#endif // XRTRANSPORT_EXT_XR_EXT_plane_detection
#ifdef XRTRANSPORT_EXT_XR_EXT_future

    {XR_TYPE_FUTURE_CANCEL_INFO_EXT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrFutureCancelInfoEXT)},


    {XR_TYPE_FUTURE_POLL_INFO_EXT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrFuturePollInfoEXT)},


    {XR_TYPE_FUTURE_COMPLETION_EXT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrFutureCompletionEXT)},


    {XR_TYPE_FUTURE_POLL_RESULT_EXT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrFuturePollResultEXT)},


    {XR_TYPE_FUTURE_CANCEL_INFO_EXT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrFutureCancelInfoEXT)},


    {XR_TYPE_FUTURE_POLL_INFO_EXT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrFuturePollInfoEXT)},


    {XR_TYPE_FUTURE_COMPLETION_EXT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrFutureCompletionEXT)},


    {XR_TYPE_FUTURE_POLL_RESULT_EXT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrFuturePollResultEXT)},

#endif // XRTRANSPORT_EXT_XR_EXT_future
#ifdef XRTRANSPORT_EXT_XR_EXT_user_presence

    {XR_TYPE_EVENT_DATA_USER_PRESENCE_CHANGED_EXT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEventDataUserPresenceChangedEXT)},


    {XR_TYPE_SYSTEM_USER_PRESENCE_PROPERTIES_EXT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemUserPresencePropertiesEXT)},


    {XR_TYPE_EVENT_DATA_USER_PRESENCE_CHANGED_EXT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEventDataUserPresenceChangedEXT)},


    {XR_TYPE_SYSTEM_USER_PRESENCE_PROPERTIES_EXT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemUserPresencePropertiesEXT)},

#endif // XRTRANSPORT_EXT_XR_EXT_user_presence
#ifdef XRTRANSPORT_EXT_XR_ML_system_notifications

    {XR_TYPE_SYSTEM_NOTIFICATIONS_SET_INFO_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemNotificationsSetInfoML)},


    {XR_TYPE_SYSTEM_NOTIFICATIONS_SET_INFO_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemNotificationsSetInfoML)},

#endif // XRTRANSPORT_EXT_XR_ML_system_notifications
#ifdef XRTRANSPORT_EXT_XR_ML_world_mesh_detection

    {XR_TYPE_WORLD_MESH_DETECTOR_CREATE_INFO_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrWorldMeshDetectorCreateInfoML)},


    {XR_TYPE_WORLD_MESH_BLOCK_STATE_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrWorldMeshBlockStateML)},


    {XR_TYPE_WORLD_MESH_STATE_REQUEST_INFO_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrWorldMeshStateRequestInfoML)},


    {XR_TYPE_WORLD_MESH_STATE_REQUEST_COMPLETION_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrWorldMeshStateRequestCompletionML)},


    {XR_TYPE_WORLD_MESH_BUFFER_RECOMMENDED_SIZE_INFO_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrWorldMeshBufferRecommendedSizeInfoML)},


    {XR_TYPE_WORLD_MESH_BUFFER_SIZE_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrWorldMeshBufferSizeML)},


    {XR_TYPE_WORLD_MESH_BUFFER_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrWorldMeshBufferML)},


    {XR_TYPE_WORLD_MESH_BLOCK_REQUEST_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrWorldMeshBlockRequestML)},


    {XR_TYPE_WORLD_MESH_GET_INFO_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrWorldMeshGetInfoML)},


    {XR_TYPE_WORLD_MESH_BLOCK_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrWorldMeshBlockML)},


    {XR_TYPE_WORLD_MESH_REQUEST_COMPLETION_INFO_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrWorldMeshRequestCompletionInfoML)},


    {XR_TYPE_WORLD_MESH_REQUEST_COMPLETION_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrWorldMeshRequestCompletionML)},


    {XR_TYPE_WORLD_MESH_DETECTOR_CREATE_INFO_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrWorldMeshDetectorCreateInfoML)},


    {XR_TYPE_WORLD_MESH_STATE_REQUEST_INFO_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrWorldMeshStateRequestInfoML)},


    {XR_TYPE_WORLD_MESH_BLOCK_STATE_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrWorldMeshBlockStateML)},


    {XR_TYPE_WORLD_MESH_STATE_REQUEST_COMPLETION_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrWorldMeshStateRequestCompletionML)},


    {XR_TYPE_WORLD_MESH_BUFFER_RECOMMENDED_SIZE_INFO_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrWorldMeshBufferRecommendedSizeInfoML)},


    {XR_TYPE_WORLD_MESH_BUFFER_SIZE_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrWorldMeshBufferSizeML)},


    {XR_TYPE_WORLD_MESH_BUFFER_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrWorldMeshBufferML)},


    {XR_TYPE_WORLD_MESH_BLOCK_REQUEST_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrWorldMeshBlockRequestML)},


    {XR_TYPE_WORLD_MESH_GET_INFO_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrWorldMeshGetInfoML)},


    {XR_TYPE_WORLD_MESH_BLOCK_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrWorldMeshBlockML)},


    {XR_TYPE_WORLD_MESH_REQUEST_COMPLETION_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrWorldMeshRequestCompletionML)},


    {XR_TYPE_WORLD_MESH_REQUEST_COMPLETION_INFO_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrWorldMeshRequestCompletionInfoML)},

#endif // XRTRANSPORT_EXT_XR_ML_world_mesh_detection
#ifdef XRTRANSPORT_EXT_XR_ML_facial_expression

    {XR_TYPE_SYSTEM_FACIAL_EXPRESSION_PROPERTIES_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemFacialExpressionPropertiesML)},


    {XR_TYPE_FACIAL_EXPRESSION_CLIENT_CREATE_INFO_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrFacialExpressionClientCreateInfoML)},


    {XR_TYPE_FACIAL_EXPRESSION_BLEND_SHAPE_GET_INFO_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrFacialExpressionBlendShapeGetInfoML)},


    {XR_TYPE_FACIAL_EXPRESSION_BLEND_SHAPE_PROPERTIES_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrFacialExpressionBlendShapePropertiesML)},


    {XR_TYPE_SYSTEM_FACIAL_EXPRESSION_PROPERTIES_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemFacialExpressionPropertiesML)},


    {XR_TYPE_FACIAL_EXPRESSION_CLIENT_CREATE_INFO_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrFacialExpressionClientCreateInfoML)},


    {XR_TYPE_FACIAL_EXPRESSION_BLEND_SHAPE_GET_INFO_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrFacialExpressionBlendShapeGetInfoML)},


    {XR_TYPE_FACIAL_EXPRESSION_BLEND_SHAPE_PROPERTIES_ML, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrFacialExpressionBlendShapePropertiesML)},

#endif // XRTRANSPORT_EXT_XR_ML_facial_expression
#ifdef XRTRANSPORT_EXT_XR_META_simultaneous_hands_and_controllers

    {XR_TYPE_SYSTEM_SIMULTANEOUS_HANDS_AND_CONTROLLERS_PROPERTIES_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemSimultaneousHandsAndControllersPropertiesMETA)},


    {XR_TYPE_SIMULTANEOUS_HANDS_AND_CONTROLLERS_TRACKING_RESUME_INFO_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSimultaneousHandsAndControllersTrackingResumeInfoMETA)},


    {XR_TYPE_SIMULTANEOUS_HANDS_AND_CONTROLLERS_TRACKING_PAUSE_INFO_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSimultaneousHandsAndControllersTrackingPauseInfoMETA)},


    {XR_TYPE_SYSTEM_SIMULTANEOUS_HANDS_AND_CONTROLLERS_PROPERTIES_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemSimultaneousHandsAndControllersPropertiesMETA)},


    {XR_TYPE_SIMULTANEOUS_HANDS_AND_CONTROLLERS_TRACKING_RESUME_INFO_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSimultaneousHandsAndControllersTrackingResumeInfoMETA)},


    {XR_TYPE_SIMULTANEOUS_HANDS_AND_CONTROLLERS_TRACKING_PAUSE_INFO_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSimultaneousHandsAndControllersTrackingPauseInfoMETA)},

#endif // XRTRANSPORT_EXT_XR_META_simultaneous_hands_and_controllers
#ifdef XRTRANSPORT_EXT_XR_META_colocation_discovery

    {XR_TYPE_COLOCATION_DISCOVERY_START_INFO_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrColocationDiscoveryStartInfoMETA)},


    {XR_TYPE_COLOCATION_DISCOVERY_STOP_INFO_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrColocationDiscoveryStopInfoMETA)},


    {XR_TYPE_COLOCATION_ADVERTISEMENT_START_INFO_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrColocationAdvertisementStartInfoMETA)},


    {XR_TYPE_COLOCATION_ADVERTISEMENT_STOP_INFO_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrColocationAdvertisementStopInfoMETA)},


    {XR_TYPE_EVENT_DATA_START_COLOCATION_ADVERTISEMENT_COMPLETE_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEventDataStartColocationAdvertisementCompleteMETA)},


    {XR_TYPE_EVENT_DATA_STOP_COLOCATION_ADVERTISEMENT_COMPLETE_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEventDataStopColocationAdvertisementCompleteMETA)},


    {XR_TYPE_EVENT_DATA_COLOCATION_ADVERTISEMENT_COMPLETE_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEventDataColocationAdvertisementCompleteMETA)},


    {XR_TYPE_EVENT_DATA_START_COLOCATION_DISCOVERY_COMPLETE_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEventDataStartColocationDiscoveryCompleteMETA)},


    {XR_TYPE_EVENT_DATA_COLOCATION_DISCOVERY_RESULT_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEventDataColocationDiscoveryResultMETA)},


    {XR_TYPE_EVENT_DATA_COLOCATION_DISCOVERY_COMPLETE_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEventDataColocationDiscoveryCompleteMETA)},


    {XR_TYPE_EVENT_DATA_STOP_COLOCATION_DISCOVERY_COMPLETE_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEventDataStopColocationDiscoveryCompleteMETA)},


    {XR_TYPE_SYSTEM_COLOCATION_DISCOVERY_PROPERTIES_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemColocationDiscoveryPropertiesMETA)},


    {XR_TYPE_COLOCATION_DISCOVERY_START_INFO_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrColocationDiscoveryStartInfoMETA)},


    {XR_TYPE_COLOCATION_DISCOVERY_STOP_INFO_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrColocationDiscoveryStopInfoMETA)},


    {XR_TYPE_COLOCATION_ADVERTISEMENT_START_INFO_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrColocationAdvertisementStartInfoMETA)},


    {XR_TYPE_COLOCATION_ADVERTISEMENT_STOP_INFO_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrColocationAdvertisementStopInfoMETA)},


    {XR_TYPE_EVENT_DATA_START_COLOCATION_ADVERTISEMENT_COMPLETE_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEventDataStartColocationAdvertisementCompleteMETA)},


    {XR_TYPE_EVENT_DATA_STOP_COLOCATION_ADVERTISEMENT_COMPLETE_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEventDataStopColocationAdvertisementCompleteMETA)},


    {XR_TYPE_EVENT_DATA_COLOCATION_ADVERTISEMENT_COMPLETE_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEventDataColocationAdvertisementCompleteMETA)},


    {XR_TYPE_EVENT_DATA_START_COLOCATION_DISCOVERY_COMPLETE_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEventDataStartColocationDiscoveryCompleteMETA)},


    {XR_TYPE_EVENT_DATA_COLOCATION_DISCOVERY_RESULT_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEventDataColocationDiscoveryResultMETA)},


    {XR_TYPE_EVENT_DATA_COLOCATION_DISCOVERY_COMPLETE_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEventDataColocationDiscoveryCompleteMETA)},


    {XR_TYPE_EVENT_DATA_STOP_COLOCATION_DISCOVERY_COMPLETE_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEventDataStopColocationDiscoveryCompleteMETA)},


    {XR_TYPE_SYSTEM_COLOCATION_DISCOVERY_PROPERTIES_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemColocationDiscoveryPropertiesMETA)},

#endif // XRTRANSPORT_EXT_XR_META_colocation_discovery
#ifdef XRTRANSPORT_EXT_XR_META_spatial_entity_group_sharing

    {XR_TYPE_SYSTEM_SPATIAL_ENTITY_GROUP_SHARING_PROPERTIES_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemSpatialEntityGroupSharingPropertiesMETA)},


    {XR_TYPE_SHARE_SPACES_RECIPIENT_GROUPS_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrShareSpacesRecipientGroupsMETA)},


    {XR_TYPE_SPACE_GROUP_UUID_FILTER_INFO_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpaceGroupUuidFilterInfoMETA)},


    {XR_TYPE_SHARE_SPACES_RECIPIENT_GROUPS_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrShareSpacesRecipientGroupsMETA)},


    {XR_TYPE_SPACE_GROUP_UUID_FILTER_INFO_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpaceGroupUuidFilterInfoMETA)},


    {XR_TYPE_SYSTEM_SPATIAL_ENTITY_GROUP_SHARING_PROPERTIES_META, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemSpatialEntityGroupSharingPropertiesMETA)},

#endif // XRTRANSPORT_EXT_XR_META_spatial_entity_group_sharing

    {XR_TYPE_ACTION_CREATE_INFO, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrActionCreateInfo)},


    {XR_TYPE_ACTION_SET_CREATE_INFO, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrActionSetCreateInfo)},


    {XR_TYPE_ACTION_SPACE_CREATE_INFO, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrActionSpaceCreateInfo)},


    {XR_TYPE_ACTION_STATE_BOOLEAN, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrActionStateBoolean)},


    {XR_TYPE_ACTION_STATE_FLOAT, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrActionStateFloat)},


    {XR_TYPE_ACTION_STATE_GET_INFO, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrActionStateGetInfo)},


    {XR_TYPE_ACTION_STATE_POSE, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrActionStatePose)},


    {XR_TYPE_ACTION_STATE_VECTOR2F, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrActionStateVector2f)},


    {XR_TYPE_ACTIONS_SYNC_INFO, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrActionsSyncInfo)},


    {XR_TYPE_API_LAYER_PROPERTIES, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrApiLayerProperties)},


    {XR_TYPE_BOUND_SOURCES_FOR_ACTION_ENUMERATE_INFO, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrBoundSourcesForActionEnumerateInfo)},


    {XR_TYPE_COMPOSITION_LAYER_PROJECTION, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrCompositionLayerProjection)},


    {XR_TYPE_COMPOSITION_LAYER_PROJECTION_VIEW, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrCompositionLayerProjectionView)},


    {XR_TYPE_COMPOSITION_LAYER_QUAD, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrCompositionLayerQuad)},


    {XR_TYPE_EVENT_DATA_BUFFER, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEventDataBuffer)},


    {XR_TYPE_EVENT_DATA_EVENTS_LOST, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEventDataEventsLost)},


    {XR_TYPE_EVENT_DATA_INSTANCE_LOSS_PENDING, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEventDataInstanceLossPending)},


    {XR_TYPE_EVENT_DATA_INTERACTION_PROFILE_CHANGED, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEventDataInteractionProfileChanged)},


    {XR_TYPE_EVENT_DATA_REFERENCE_SPACE_CHANGE_PENDING, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEventDataReferenceSpaceChangePending)},


    {XR_TYPE_EVENT_DATA_SESSION_STATE_CHANGED, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrEventDataSessionStateChanged)},


    {XR_TYPE_EXTENSION_PROPERTIES, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrExtensionProperties)},


    {XR_TYPE_FRAME_BEGIN_INFO, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrFrameBeginInfo)},


    {XR_TYPE_FRAME_END_INFO, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrFrameEndInfo)},


    {XR_TYPE_FRAME_STATE, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrFrameState)},


    {XR_TYPE_FRAME_WAIT_INFO, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrFrameWaitInfo)},


    {XR_TYPE_HAPTIC_ACTION_INFO, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrHapticActionInfo)},


    {XR_TYPE_HAPTIC_VIBRATION, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrHapticVibration)},


    {XR_TYPE_INPUT_SOURCE_LOCALIZED_NAME_GET_INFO, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrInputSourceLocalizedNameGetInfo)},


    {XR_TYPE_INSTANCE_CREATE_INFO, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrInstanceCreateInfo)},


    {XR_TYPE_INSTANCE_PROPERTIES, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrInstanceProperties)},


    {XR_TYPE_INTERACTION_PROFILE_STATE, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrInteractionProfileState)},


    {XR_TYPE_INTERACTION_PROFILE_SUGGESTED_BINDING, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrInteractionProfileSuggestedBinding)},


    {XR_TYPE_REFERENCE_SPACE_CREATE_INFO, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrReferenceSpaceCreateInfo)},


    {XR_TYPE_SESSION_ACTION_SETS_ATTACH_INFO, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSessionActionSetsAttachInfo)},


    {XR_TYPE_SESSION_BEGIN_INFO, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSessionBeginInfo)},


    {XR_TYPE_SESSION_CREATE_INFO, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSessionCreateInfo)},


    {XR_TYPE_SPACE_LOCATION, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpaceLocation)},


    {XR_TYPE_SPACE_LOCATIONS, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpaceLocations)},


    {XR_TYPE_SPACE_VELOCITIES, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpaceVelocities)},


    {XR_TYPE_SPACE_VELOCITY, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpaceVelocity)},


    {XR_TYPE_SPACES_LOCATE_INFO, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSpacesLocateInfo)},


    {XR_TYPE_SWAPCHAIN_CREATE_INFO, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSwapchainCreateInfo)},


    {XR_TYPE_SWAPCHAIN_IMAGE_ACQUIRE_INFO, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSwapchainImageAcquireInfo)},


    {XR_TYPE_SWAPCHAIN_IMAGE_RELEASE_INFO, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSwapchainImageReleaseInfo)},


    {XR_TYPE_SWAPCHAIN_IMAGE_WAIT_INFO, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSwapchainImageWaitInfo)},


    {XR_TYPE_SYSTEM_GET_INFO, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemGetInfo)},


    {XR_TYPE_SYSTEM_PROPERTIES, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrSystemProperties)},


    {XR_TYPE_VIEW, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrView)},


    {XR_TYPE_VIEW_CONFIGURATION_PROPERTIES, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrViewConfigurationProperties)},


    {XR_TYPE_VIEW_CONFIGURATION_VIEW, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrViewConfigurationView)},


    {XR_TYPE_VIEW_LOCATE_INFO, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrViewLocateInfo)},


    {XR_TYPE_VIEW_STATE, STRUCT_DESERIALIZER_IN_PLACE_PTR(XrViewState)},


};

StructDeserializerInPlace deserializer_in_place_lookup(XrStructureType struct_type) {
    assert(deserializer_in_place_lookup_table.find(struct_type) != deserializer_in_place_lookup_table.end());
    return deserializer_in_place_lookup_table[struct_type];
}

void deserialize_in_place_xr(const void** p_s, std::istream& in) {
    XrStructureType type{};
    deserialize_in_place(&type, in);
    if (!type) {
        if (*p_s != nullptr) {
            assert(false && "Incoming pNext chain is shorter than local chain");
        }
        else {
            // End of chain
            return;
        }
    }
    if (*p_s == nullptr) {
        assert(false && "Incoming pNext chain is longer than local chain");
    }
    XrBaseOutStructure* p_xr = static_cast<XrBaseOutStructure*>(const_cast<void*>(*p_s));
    if (p_xr->type != type) {
        assert(false && "Existing XR struct type does not match incoming struct");
    }
    deserializer_in_place_lookup(type)(p_xr, in);
}

void deserialize_in_place_xr(void** p_s, std::istream& in) {
    XrStructureType type{};
    deserialize_in_place(&type, in);
    if (!type) {
        if (*p_s != nullptr) {
            assert(false && "Incoming pNext chain is shorter than local chain");
        }
        else {
            // End of chain
            return;
        }
    }
    if (*p_s == nullptr) {
        assert(false && "Incoming pNext chain is longer than local chain");
    }
    XrBaseOutStructure* p_xr = static_cast<XrBaseOutStructure*>(const_cast<void*>(*p_s));
    if (p_xr->type != type) {
        assert(false && "Existing XR struct type does not match incoming struct");
    }
    deserializer_in_place_lookup(type)(p_xr, in);
}

// In-place deserializers

#ifdef XRTRANSPORT_EXT_XR_KHR_android_thread_settings
#endif // XRTRANSPORT_EXT_XR_KHR_android_thread_settings
#ifdef XRTRANSPORT_EXT_XR_KHR_android_surface_swapchain
#endif // XRTRANSPORT_EXT_XR_KHR_android_surface_swapchain
#ifdef XRTRANSPORT_EXT_XR_KHR_composition_layer_cube


void deserialize_in_place(XrCompositionLayerCubeKHR* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->layerFlags, in);

        

    deserialize_in_place(&s->space, in);

        

    deserialize_in_place(&s->eyeVisibility, in);

        

    deserialize_in_place(&s->swapchain, in);

        

    deserialize_in_place(&s->imageArrayIndex, in);

        

    deserialize_in_place(&s->orientation, in);

}




void deserialize_in_place(XrCompositionLayerCubeKHR* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->layerFlags, in);

        

    deserialize_in_place(&s->space, in);

        

    deserialize_in_place(&s->eyeVisibility, in);

        

    deserialize_in_place(&s->swapchain, in);

        

    deserialize_in_place(&s->imageArrayIndex, in);

        

    deserialize_in_place(&s->orientation, in);

}


#endif // XRTRANSPORT_EXT_XR_KHR_composition_layer_cube
#ifdef XRTRANSPORT_EXT_XR_KHR_android_create_instance


void deserialize_in_place(XrInstanceCreateInfoAndroidKHR* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place_ptr(&s->applicationVM, in);

        

    deserialize_in_place_ptr(&s->applicationActivity, in);

}




void deserialize_in_place(XrInstanceCreateInfoAndroidKHR* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place_ptr(&s->applicationVM, in);

        

    deserialize_in_place_ptr(&s->applicationActivity, in);

}


#endif // XRTRANSPORT_EXT_XR_KHR_android_create_instance
#ifdef XRTRANSPORT_EXT_XR_KHR_composition_layer_depth


void deserialize_in_place(XrCompositionLayerDepthInfoKHR* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->subImage, in);

        

    deserialize_in_place(&s->minDepth, in);

        

    deserialize_in_place(&s->maxDepth, in);

        

    deserialize_in_place(&s->nearZ, in);

        

    deserialize_in_place(&s->farZ, in);

}




void deserialize_in_place(XrCompositionLayerDepthInfoKHR* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->subImage, in);

        

    deserialize_in_place(&s->minDepth, in);

        

    deserialize_in_place(&s->maxDepth, in);

        

    deserialize_in_place(&s->nearZ, in);

        

    deserialize_in_place(&s->farZ, in);

}


#endif // XRTRANSPORT_EXT_XR_KHR_composition_layer_depth
#ifdef XRTRANSPORT_EXT_XR_KHR_vulkan_swapchain_format_list


void deserialize_in_place(XrVulkanSwapchainFormatListCreateInfoKHR* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->viewFormatCount, in);

        

    deserialize_in_place_ptr(&s->viewFormats, in);

}




void deserialize_in_place(XrVulkanSwapchainFormatListCreateInfoKHR* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->viewFormatCount, in);

        

    deserialize_in_place_ptr(&s->viewFormats, in);

}


#endif // XRTRANSPORT_EXT_XR_KHR_vulkan_swapchain_format_list
#ifdef XRTRANSPORT_EXT_XR_EXT_performance_settings


void deserialize_in_place(XrEventDataPerfSettingsEXT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->domain, in);

        

    deserialize_in_place(&s->subDomain, in);

        

    deserialize_in_place(&s->fromLevel, in);

        

    deserialize_in_place(&s->toLevel, in);

}




void deserialize_in_place(XrEventDataPerfSettingsEXT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->domain, in);

        

    deserialize_in_place(&s->subDomain, in);

        

    deserialize_in_place(&s->fromLevel, in);

        

    deserialize_in_place(&s->toLevel, in);

}


#endif // XRTRANSPORT_EXT_XR_EXT_performance_settings
#ifdef XRTRANSPORT_EXT_XR_EXT_thermal_query
#endif // XRTRANSPORT_EXT_XR_EXT_thermal_query
#ifdef XRTRANSPORT_EXT_XR_KHR_composition_layer_cylinder


void deserialize_in_place(XrCompositionLayerCylinderKHR* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->layerFlags, in);

        

    deserialize_in_place(&s->space, in);

        

    deserialize_in_place(&s->eyeVisibility, in);

        

    deserialize_in_place(&s->subImage, in);

        

    deserialize_in_place(&s->pose, in);

        

    deserialize_in_place(&s->radius, in);

        

    deserialize_in_place(&s->centralAngle, in);

        

    deserialize_in_place(&s->aspectRatio, in);

}




void deserialize_in_place(XrCompositionLayerCylinderKHR* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->layerFlags, in);

        

    deserialize_in_place(&s->space, in);

        

    deserialize_in_place(&s->eyeVisibility, in);

        

    deserialize_in_place(&s->subImage, in);

        

    deserialize_in_place(&s->pose, in);

        

    deserialize_in_place(&s->radius, in);

        

    deserialize_in_place(&s->centralAngle, in);

        

    deserialize_in_place(&s->aspectRatio, in);

}


#endif // XRTRANSPORT_EXT_XR_KHR_composition_layer_cylinder
#ifdef XRTRANSPORT_EXT_XR_KHR_composition_layer_equirect


void deserialize_in_place(XrCompositionLayerEquirectKHR* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->layerFlags, in);

        

    deserialize_in_place(&s->space, in);

        

    deserialize_in_place(&s->eyeVisibility, in);

        

    deserialize_in_place(&s->subImage, in);

        

    deserialize_in_place(&s->pose, in);

        

    deserialize_in_place(&s->radius, in);

        

    deserialize_in_place(&s->scale, in);

        

    deserialize_in_place(&s->bias, in);

}




void deserialize_in_place(XrCompositionLayerEquirectKHR* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->layerFlags, in);

        

    deserialize_in_place(&s->space, in);

        

    deserialize_in_place(&s->eyeVisibility, in);

        

    deserialize_in_place(&s->subImage, in);

        

    deserialize_in_place(&s->pose, in);

        

    deserialize_in_place(&s->radius, in);

        

    deserialize_in_place(&s->scale, in);

        

    deserialize_in_place(&s->bias, in);

}


#endif // XRTRANSPORT_EXT_XR_KHR_composition_layer_equirect
#ifdef XRTRANSPORT_EXT_XR_EXT_debug_utils


void deserialize_in_place(XrDebugUtilsObjectNameInfoEXT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->objectType, in);

        

    deserialize_in_place(&s->objectHandle, in);

        

    deserialize_in_place_ptr(&s->objectName, in);

}




void deserialize_in_place(XrDebugUtilsLabelEXT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place_ptr(&s->labelName, in);

}




void deserialize_in_place(XrDebugUtilsMessengerCallbackDataEXT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place_ptr(&s->messageId, in);

        

    deserialize_in_place_ptr(&s->functionName, in);

        

    deserialize_in_place_ptr(&s->message, in);

        

    deserialize_in_place(&s->objectCount, in);

        

    deserialize_in_place_ptr(&s->objects, in);

        

    deserialize_in_place(&s->sessionLabelCount, in);

        

    deserialize_in_place_ptr(&s->sessionLabels, in);

}




void deserialize_in_place(XrDebugUtilsMessengerCreateInfoEXT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->messageSeverities, in);

        

    deserialize_in_place(&s->messageTypes, in);

        

    deserialize_in_place(&s->userCallback, in);

        

    deserialize_in_place_ptr(&s->userData, in);

}




void deserialize_in_place(XrDebugUtilsObjectNameInfoEXT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->objectType, in);

        

    deserialize_in_place(&s->objectHandle, in);

        

    deserialize_in_place_ptr(&s->objectName, in);

}




void deserialize_in_place(XrDebugUtilsMessengerCallbackDataEXT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place_ptr(&s->messageId, in);

        

    deserialize_in_place_ptr(&s->functionName, in);

        

    deserialize_in_place_ptr(&s->message, in);

        

    deserialize_in_place(&s->objectCount, in);

        

    deserialize_in_place_ptr(&s->objects, in);

        

    deserialize_in_place(&s->sessionLabelCount, in);

        

    deserialize_in_place_ptr(&s->sessionLabels, in);

}




void deserialize_in_place(XrDebugUtilsMessengerCreateInfoEXT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->messageSeverities, in);

        

    deserialize_in_place(&s->messageTypes, in);

        

    deserialize_in_place(&s->userCallback, in);

        

    deserialize_in_place_ptr(&s->userData, in);

}




void deserialize_in_place(XrDebugUtilsLabelEXT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place_ptr(&s->labelName, in);

}


#endif // XRTRANSPORT_EXT_XR_EXT_debug_utils
#ifdef XRTRANSPORT_EXT_XR_KHR_opengl_enable


void deserialize_in_place(XrGraphicsBindingOpenGLWin32KHR* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->hDC, in);

        

    deserialize_in_place(&s->hGLRC, in);

}




void deserialize_in_place(XrGraphicsBindingOpenGLXlibKHR* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place_ptr(&s->xDisplay, in);

        

    deserialize_in_place(&s->visualid, in);

        

    deserialize_in_place(&s->glxFBConfig, in);

        

    deserialize_in_place(&s->glxDrawable, in);

        

    deserialize_in_place(&s->glxContext, in);

}




void deserialize_in_place(XrGraphicsBindingOpenGLXcbKHR* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place_ptr(&s->connection, in);

        

    deserialize_in_place(&s->screenNumber, in);

        

    deserialize_in_place(&s->fbconfigid, in);

        

    deserialize_in_place(&s->visualid, in);

        

    deserialize_in_place(&s->glxDrawable, in);

        

    deserialize_in_place(&s->glxContext, in);

}




void deserialize_in_place(XrGraphicsBindingOpenGLWaylandKHR* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place_ptr(&s->display, in);

}




void deserialize_in_place(XrSwapchainImageOpenGLKHR* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->image, in);

}




void deserialize_in_place(XrGraphicsRequirementsOpenGLKHR* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->minApiVersionSupported, in);

        

    deserialize_in_place(&s->maxApiVersionSupported, in);

}




void deserialize_in_place(XrGraphicsBindingOpenGLWin32KHR* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->hDC, in);

        

    deserialize_in_place(&s->hGLRC, in);

}




void deserialize_in_place(XrGraphicsBindingOpenGLXlibKHR* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place_ptr(&s->xDisplay, in);

        

    deserialize_in_place(&s->visualid, in);

        

    deserialize_in_place(&s->glxFBConfig, in);

        

    deserialize_in_place(&s->glxDrawable, in);

        

    deserialize_in_place(&s->glxContext, in);

}




void deserialize_in_place(XrGraphicsBindingOpenGLXcbKHR* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place_ptr(&s->connection, in);

        

    deserialize_in_place(&s->screenNumber, in);

        

    deserialize_in_place(&s->fbconfigid, in);

        

    deserialize_in_place(&s->visualid, in);

        

    deserialize_in_place(&s->glxDrawable, in);

        

    deserialize_in_place(&s->glxContext, in);

}




void deserialize_in_place(XrGraphicsBindingOpenGLWaylandKHR* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place_ptr(&s->display, in);

}




void deserialize_in_place(XrSwapchainImageOpenGLKHR* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->image, in);

}




void deserialize_in_place(XrGraphicsRequirementsOpenGLKHR* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->minApiVersionSupported, in);

        

    deserialize_in_place(&s->maxApiVersionSupported, in);

}


#endif // XRTRANSPORT_EXT_XR_KHR_opengl_enable
#ifdef XRTRANSPORT_EXT_XR_KHR_opengl_es_enable


void deserialize_in_place(XrGraphicsBindingOpenGLESAndroidKHR* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->display, in);

        

    deserialize_in_place(&s->config, in);

        

    deserialize_in_place(&s->context, in);

}




void deserialize_in_place(XrSwapchainImageOpenGLESKHR* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->image, in);

}




void deserialize_in_place(XrGraphicsRequirementsOpenGLESKHR* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->minApiVersionSupported, in);

        

    deserialize_in_place(&s->maxApiVersionSupported, in);

}




void deserialize_in_place(XrGraphicsBindingOpenGLESAndroidKHR* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->display, in);

        

    deserialize_in_place(&s->config, in);

        

    deserialize_in_place(&s->context, in);

}




void deserialize_in_place(XrSwapchainImageOpenGLESKHR* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->image, in);

}




void deserialize_in_place(XrGraphicsRequirementsOpenGLESKHR* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->minApiVersionSupported, in);

        

    deserialize_in_place(&s->maxApiVersionSupported, in);

}


#endif // XRTRANSPORT_EXT_XR_KHR_opengl_es_enable
#ifdef XRTRANSPORT_EXT_XR_KHR_vulkan_enable


void deserialize_in_place(XrGraphicsBindingVulkanKHR* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->instance, in);

        

    deserialize_in_place(&s->physicalDevice, in);

        

    deserialize_in_place(&s->device, in);

        

    deserialize_in_place(&s->queueFamilyIndex, in);

        

    deserialize_in_place(&s->queueIndex, in);

}




void deserialize_in_place(XrSwapchainImageVulkanKHR* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->image, in);

}




void deserialize_in_place(XrGraphicsRequirementsVulkanKHR* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->minApiVersionSupported, in);

        

    deserialize_in_place(&s->maxApiVersionSupported, in);

}




void deserialize_in_place(XrGraphicsBindingVulkanKHR* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->instance, in);

        

    deserialize_in_place(&s->physicalDevice, in);

        

    deserialize_in_place(&s->device, in);

        

    deserialize_in_place(&s->queueFamilyIndex, in);

        

    deserialize_in_place(&s->queueIndex, in);

}




void deserialize_in_place(XrSwapchainImageVulkanKHR* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->image, in);

}




void deserialize_in_place(XrGraphicsRequirementsVulkanKHR* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->minApiVersionSupported, in);

        

    deserialize_in_place(&s->maxApiVersionSupported, in);

}


#endif // XRTRANSPORT_EXT_XR_KHR_vulkan_enable
#ifdef XRTRANSPORT_EXT_XR_KHR_D3D11_enable


void deserialize_in_place(XrGraphicsBindingD3D11KHR* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place_ptr(&s->device, in);

}




void deserialize_in_place(XrSwapchainImageD3D11KHR* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place_ptr(&s->texture, in);

}




void deserialize_in_place(XrGraphicsRequirementsD3D11KHR* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->adapterLuid, in);

        

    deserialize_in_place(&s->minFeatureLevel, in);

}




void deserialize_in_place(XrGraphicsBindingD3D11KHR* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place_ptr(&s->device, in);

}




void deserialize_in_place(XrSwapchainImageD3D11KHR* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place_ptr(&s->texture, in);

}




void deserialize_in_place(XrGraphicsRequirementsD3D11KHR* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->adapterLuid, in);

        

    deserialize_in_place(&s->minFeatureLevel, in);

}


#endif // XRTRANSPORT_EXT_XR_KHR_D3D11_enable
#ifdef XRTRANSPORT_EXT_XR_KHR_D3D12_enable


void deserialize_in_place(XrGraphicsBindingD3D12KHR* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place_ptr(&s->device, in);

        

    deserialize_in_place_ptr(&s->queue, in);

}




void deserialize_in_place(XrSwapchainImageD3D12KHR* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place_ptr(&s->texture, in);

}




void deserialize_in_place(XrGraphicsRequirementsD3D12KHR* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->adapterLuid, in);

        

    deserialize_in_place(&s->minFeatureLevel, in);

}




void deserialize_in_place(XrGraphicsBindingD3D12KHR* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place_ptr(&s->device, in);

        

    deserialize_in_place_ptr(&s->queue, in);

}




void deserialize_in_place(XrSwapchainImageD3D12KHR* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place_ptr(&s->texture, in);

}




void deserialize_in_place(XrGraphicsRequirementsD3D12KHR* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->adapterLuid, in);

        

    deserialize_in_place(&s->minFeatureLevel, in);

}


#endif // XRTRANSPORT_EXT_XR_KHR_D3D12_enable
#ifdef XRTRANSPORT_EXT_XR_KHR_metal_enable


void deserialize_in_place(XrGraphicsBindingMetalKHR* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place_ptr(&s->commandQueue, in);

}




void deserialize_in_place(XrSwapchainImageMetalKHR* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place_ptr(&s->texture, in);

}




void deserialize_in_place(XrGraphicsRequirementsMetalKHR* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place_ptr(&s->metalDevice, in);

}




void deserialize_in_place(XrGraphicsBindingMetalKHR* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place_ptr(&s->commandQueue, in);

}




void deserialize_in_place(XrSwapchainImageMetalKHR* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place_ptr(&s->texture, in);

}




void deserialize_in_place(XrGraphicsRequirementsMetalKHR* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place_ptr(&s->metalDevice, in);

}


#endif // XRTRANSPORT_EXT_XR_KHR_metal_enable
#ifdef XRTRANSPORT_EXT_XR_EXT_eye_gaze_interaction


void deserialize_in_place(XrSystemEyeGazeInteractionPropertiesEXT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->supportsEyeGazeInteraction, in);

}




void deserialize_in_place(XrEyeGazeSampleTimeEXT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->time, in);

}




void deserialize_in_place(XrSystemEyeGazeInteractionPropertiesEXT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->supportsEyeGazeInteraction, in);

}




void deserialize_in_place(XrEyeGazeSampleTimeEXT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->time, in);

}


#endif // XRTRANSPORT_EXT_XR_EXT_eye_gaze_interaction
#ifdef XRTRANSPORT_EXT_XR_KHR_visibility_mask


void deserialize_in_place(XrVisibilityMaskKHR* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->vertexCapacityInput, in);

        

    deserialize_in_place(&s->vertexCountOutput, in);

        

    deserialize_in_place_ptr(&s->vertices, in);

        

    deserialize_in_place(&s->indexCapacityInput, in);

        

    deserialize_in_place(&s->indexCountOutput, in);

        

    deserialize_in_place_ptr(&s->indices, in);

}




void deserialize_in_place(XrEventDataVisibilityMaskChangedKHR* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->session, in);

        

    deserialize_in_place(&s->viewConfigurationType, in);

        

    deserialize_in_place(&s->viewIndex, in);

}




void deserialize_in_place(XrVisibilityMaskKHR* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->vertexCapacityInput, in);

        

    deserialize_in_place(&s->vertexCountOutput, in);

        

    deserialize_in_place_ptr(&s->vertices, in);

        

    deserialize_in_place(&s->indexCapacityInput, in);

        

    deserialize_in_place(&s->indexCountOutput, in);

        

    deserialize_in_place_ptr(&s->indices, in);

}




void deserialize_in_place(XrEventDataVisibilityMaskChangedKHR* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->session, in);

        

    deserialize_in_place(&s->viewConfigurationType, in);

        

    deserialize_in_place(&s->viewIndex, in);

}


#endif // XRTRANSPORT_EXT_XR_KHR_visibility_mask
#ifdef XRTRANSPORT_EXT_XR_EXTX_overlay


void deserialize_in_place(XrSessionCreateInfoOverlayEXTX* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->createFlags, in);

        

    deserialize_in_place(&s->sessionLayersPlacement, in);

}




void deserialize_in_place(XrEventDataMainSessionVisibilityChangedEXTX* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->visible, in);

        

    deserialize_in_place(&s->flags, in);

}




void deserialize_in_place(XrSessionCreateInfoOverlayEXTX* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->createFlags, in);

        

    deserialize_in_place(&s->sessionLayersPlacement, in);

}




void deserialize_in_place(XrEventDataMainSessionVisibilityChangedEXTX* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->visible, in);

        

    deserialize_in_place(&s->flags, in);

}


#endif // XRTRANSPORT_EXT_XR_EXTX_overlay
#ifdef XRTRANSPORT_EXT_XR_KHR_composition_layer_color_scale_bias


void deserialize_in_place(XrCompositionLayerColorScaleBiasKHR* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->colorScale, in);

        

    deserialize_in_place(&s->colorBias, in);

}




void deserialize_in_place(XrCompositionLayerColorScaleBiasKHR* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->colorScale, in);

        

    deserialize_in_place(&s->colorBias, in);

}


#endif // XRTRANSPORT_EXT_XR_KHR_composition_layer_color_scale_bias
#ifdef XRTRANSPORT_EXT_XR_KHR_win32_convert_performance_counter_time
#endif // XRTRANSPORT_EXT_XR_KHR_win32_convert_performance_counter_time
#ifdef XRTRANSPORT_EXT_XR_KHR_convert_timespec_time
#endif // XRTRANSPORT_EXT_XR_KHR_convert_timespec_time
#ifdef XRTRANSPORT_EXT_XR_MSFT_spatial_anchor


void deserialize_in_place(XrSpatialAnchorCreateInfoMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->space, in);

        

    deserialize_in_place(&s->pose, in);

        

    deserialize_in_place(&s->time, in);

}




void deserialize_in_place(XrSpatialAnchorSpaceCreateInfoMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->anchor, in);

        

    deserialize_in_place(&s->poseInAnchorSpace, in);

}


#endif // XRTRANSPORT_EXT_XR_MSFT_spatial_anchor
#ifdef XRTRANSPORT_EXT_XR_FB_composition_layer_image_layout


void deserialize_in_place(XrCompositionLayerImageLayoutFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->flags, in);

}




void deserialize_in_place(XrCompositionLayerImageLayoutFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->flags, in);

}


#endif // XRTRANSPORT_EXT_XR_FB_composition_layer_image_layout
#ifdef XRTRANSPORT_EXT_XR_FB_composition_layer_alpha_blend


void deserialize_in_place(XrCompositionLayerAlphaBlendFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->srcFactorColor, in);

        

    deserialize_in_place(&s->dstFactorColor, in);

        

    deserialize_in_place(&s->srcFactorAlpha, in);

        

    deserialize_in_place(&s->dstFactorAlpha, in);

}




void deserialize_in_place(XrCompositionLayerAlphaBlendFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->srcFactorColor, in);

        

    deserialize_in_place(&s->dstFactorColor, in);

        

    deserialize_in_place(&s->srcFactorAlpha, in);

        

    deserialize_in_place(&s->dstFactorAlpha, in);

}


#endif // XRTRANSPORT_EXT_XR_FB_composition_layer_alpha_blend
#ifdef XRTRANSPORT_EXT_XR_EXT_view_configuration_depth_range


void deserialize_in_place(XrViewConfigurationDepthRangeEXT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->recommendedNearZ, in);

        

    deserialize_in_place(&s->minNearZ, in);

        

    deserialize_in_place(&s->recommendedFarZ, in);

        

    deserialize_in_place(&s->maxFarZ, in);

}




void deserialize_in_place(XrViewConfigurationDepthRangeEXT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->recommendedNearZ, in);

        

    deserialize_in_place(&s->minNearZ, in);

        

    deserialize_in_place(&s->recommendedFarZ, in);

        

    deserialize_in_place(&s->maxFarZ, in);

}


#endif // XRTRANSPORT_EXT_XR_EXT_view_configuration_depth_range
#ifdef XRTRANSPORT_EXT_XR_EXT_conformance_automation
#endif // XRTRANSPORT_EXT_XR_EXT_conformance_automation
#ifdef XRTRANSPORT_EXT_XR_MNDX_egl_enable


void deserialize_in_place(XrGraphicsBindingEGLMNDX* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->getProcAddress, in);

        

    deserialize_in_place(&s->display, in);

        

    deserialize_in_place(&s->config, in);

        

    deserialize_in_place(&s->context, in);

}




void deserialize_in_place(XrGraphicsBindingEGLMNDX* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->getProcAddress, in);

        

    deserialize_in_place(&s->display, in);

        

    deserialize_in_place(&s->config, in);

        

    deserialize_in_place(&s->context, in);

}


#endif // XRTRANSPORT_EXT_XR_MNDX_egl_enable
#ifdef XRTRANSPORT_EXT_XR_MSFT_spatial_graph_bridge


void deserialize_in_place(XrSpatialGraphNodeSpaceCreateInfoMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->nodeType, in);

        

    deserialize_in_place_array(s->nodeId, XR_GUID_SIZE_MSFT, in);

        

    deserialize_in_place(&s->pose, in);

}




void deserialize_in_place(XrSpatialGraphStaticNodeBindingCreateInfoMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->space, in);

        

    deserialize_in_place(&s->poseInSpace, in);

        

    deserialize_in_place(&s->time, in);

}




void deserialize_in_place(XrSpatialGraphNodeBindingPropertiesGetInfoMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

}




void deserialize_in_place(XrSpatialGraphNodeBindingPropertiesMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place_array(s->nodeId, XR_GUID_SIZE_MSFT, in);

        

    deserialize_in_place(&s->poseInNodeSpace, in);

}




void deserialize_in_place(XrSpatialGraphNodeSpaceCreateInfoMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->nodeType, in);

        

    deserialize_in_place_array(s->nodeId, XR_GUID_SIZE_MSFT, in);

        

    deserialize_in_place(&s->pose, in);

}




void deserialize_in_place(XrSpatialGraphStaticNodeBindingCreateInfoMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->space, in);

        

    deserialize_in_place(&s->poseInSpace, in);

        

    deserialize_in_place(&s->time, in);

}




void deserialize_in_place(XrSpatialGraphNodeBindingPropertiesGetInfoMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

}




void deserialize_in_place(XrSpatialGraphNodeBindingPropertiesMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place_array(s->nodeId, XR_GUID_SIZE_MSFT, in);

        

    deserialize_in_place(&s->poseInNodeSpace, in);

}


#endif // XRTRANSPORT_EXT_XR_MSFT_spatial_graph_bridge
#ifdef XRTRANSPORT_EXT_XR_EXT_hand_tracking


void deserialize_in_place(XrSystemHandTrackingPropertiesEXT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->supportsHandTracking, in);

}




void deserialize_in_place(XrHandTrackerCreateInfoEXT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->hand, in);

        

    deserialize_in_place(&s->handJointSet, in);

}




void deserialize_in_place(XrHandJointsLocateInfoEXT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->baseSpace, in);

        

    deserialize_in_place(&s->time, in);

}




void deserialize_in_place(XrHandJointLocationEXT* s, std::istream& in) {
        

    deserialize_in_place(&s->locationFlags, in);

        

    deserialize_in_place(&s->pose, in);

        

    deserialize_in_place(&s->radius, in);

}




void deserialize_in_place(XrHandJointVelocityEXT* s, std::istream& in) {
        

    deserialize_in_place(&s->velocityFlags, in);

        

    deserialize_in_place(&s->linearVelocity, in);

        

    deserialize_in_place(&s->angularVelocity, in);

}




void deserialize_in_place(XrHandJointLocationsEXT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->isActive, in);

        

    deserialize_in_place(&s->jointCount, in);

        

    deserialize_in_place_ptr(&s->jointLocations, in);

}




void deserialize_in_place(XrHandJointVelocitiesEXT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->jointCount, in);

        

    deserialize_in_place_ptr(&s->jointVelocities, in);

}




void deserialize_in_place(XrSystemHandTrackingPropertiesEXT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->supportsHandTracking, in);

}




void deserialize_in_place(XrHandTrackerCreateInfoEXT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->hand, in);

        

    deserialize_in_place(&s->handJointSet, in);

}




void deserialize_in_place(XrHandJointsLocateInfoEXT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->baseSpace, in);

        

    deserialize_in_place(&s->time, in);

}




void deserialize_in_place(XrHandJointLocationsEXT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->isActive, in);

        

    deserialize_in_place(&s->jointCount, in);

        

    deserialize_in_place_ptr(&s->jointLocations, in);

}




void deserialize_in_place(XrHandJointVelocitiesEXT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->jointCount, in);

        

    deserialize_in_place_ptr(&s->jointVelocities, in);

}


#endif // XRTRANSPORT_EXT_XR_EXT_hand_tracking
#ifdef XRTRANSPORT_EXT_XR_MSFT_hand_tracking_mesh


void deserialize_in_place(XrSystemHandTrackingMeshPropertiesMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->supportsHandTrackingMesh, in);

        

    deserialize_in_place(&s->maxHandMeshIndexCount, in);

        

    deserialize_in_place(&s->maxHandMeshVertexCount, in);

}




void deserialize_in_place(XrHandMeshSpaceCreateInfoMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->handPoseType, in);

        

    deserialize_in_place(&s->poseInHandMeshSpace, in);

}




void deserialize_in_place(XrHandMeshUpdateInfoMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->time, in);

        

    deserialize_in_place(&s->handPoseType, in);

}




void deserialize_in_place(XrHandMeshMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->isActive, in);

        

    deserialize_in_place(&s->indexBufferChanged, in);

        

    deserialize_in_place(&s->vertexBufferChanged, in);

        

    deserialize_in_place(&s->indexBuffer, in);

        

    deserialize_in_place(&s->vertexBuffer, in);

}




void deserialize_in_place(XrHandMeshIndexBufferMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->indexBufferKey, in);

        

    deserialize_in_place(&s->indexCapacityInput, in);

        

    deserialize_in_place(&s->indexCountOutput, in);

        

    deserialize_in_place_ptr(&s->indices, in);

}




void deserialize_in_place(XrHandMeshVertexBufferMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->vertexUpdateTime, in);

        

    deserialize_in_place(&s->vertexCapacityInput, in);

        

    deserialize_in_place(&s->vertexCountOutput, in);

        

    deserialize_in_place_ptr(&s->vertices, in);

}




void deserialize_in_place(XrHandMeshVertexMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->position, in);

        

    deserialize_in_place(&s->normal, in);

}




void deserialize_in_place(XrHandPoseTypeInfoMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->handPoseType, in);

}




void deserialize_in_place(XrSystemHandTrackingMeshPropertiesMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->supportsHandTrackingMesh, in);

        

    deserialize_in_place(&s->maxHandMeshIndexCount, in);

        

    deserialize_in_place(&s->maxHandMeshVertexCount, in);

}




void deserialize_in_place(XrHandMeshSpaceCreateInfoMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->handPoseType, in);

        

    deserialize_in_place(&s->poseInHandMeshSpace, in);

}




void deserialize_in_place(XrHandMeshUpdateInfoMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->time, in);

        

    deserialize_in_place(&s->handPoseType, in);

}




void deserialize_in_place(XrHandMeshMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->isActive, in);

        

    deserialize_in_place(&s->indexBufferChanged, in);

        

    deserialize_in_place(&s->vertexBufferChanged, in);

        

    deserialize_in_place(&s->indexBuffer, in);

        

    deserialize_in_place(&s->vertexBuffer, in);

}




void deserialize_in_place(XrHandPoseTypeInfoMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->handPoseType, in);

}


#endif // XRTRANSPORT_EXT_XR_MSFT_hand_tracking_mesh
#ifdef XRTRANSPORT_EXT_XR_MSFT_secondary_view_configuration


void deserialize_in_place(XrSecondaryViewConfigurationSessionBeginInfoMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->viewConfigurationCount, in);

        

    deserialize_in_place_ptr(&s->enabledViewConfigurationTypes, in);

}




void deserialize_in_place(XrSecondaryViewConfigurationStateMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->viewConfigurationType, in);

        

    deserialize_in_place(&s->active, in);

}




void deserialize_in_place(XrSecondaryViewConfigurationFrameStateMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->viewConfigurationCount, in);

        

    deserialize_in_place_ptr(&s->viewConfigurationStates, in);

}




void deserialize_in_place(XrSecondaryViewConfigurationFrameEndInfoMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->viewConfigurationCount, in);

        

    deserialize_in_place_ptr(&s->viewConfigurationLayersInfo, in);

}




void deserialize_in_place(XrSecondaryViewConfigurationLayerInfoMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->viewConfigurationType, in);

        

    deserialize_in_place(&s->environmentBlendMode, in);

        

    deserialize_in_place(&s->layerCount, in);

        

    #error "auto-generator doesn't support double pointers (s->layers)"
    None
}




void deserialize_in_place(XrSecondaryViewConfigurationSwapchainCreateInfoMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->viewConfigurationType, in);

}




void deserialize_in_place(XrSecondaryViewConfigurationSessionBeginInfoMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->viewConfigurationCount, in);

        

    deserialize_in_place_ptr(&s->enabledViewConfigurationTypes, in);

}




void deserialize_in_place(XrSecondaryViewConfigurationStateMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->viewConfigurationType, in);

        

    deserialize_in_place(&s->active, in);

}




void deserialize_in_place(XrSecondaryViewConfigurationFrameStateMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->viewConfigurationCount, in);

        

    deserialize_in_place_ptr(&s->viewConfigurationStates, in);

}




void deserialize_in_place(XrSecondaryViewConfigurationFrameEndInfoMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->viewConfigurationCount, in);

        

    deserialize_in_place_ptr(&s->viewConfigurationLayersInfo, in);

}




void deserialize_in_place(XrSecondaryViewConfigurationLayerInfoMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->viewConfigurationType, in);

        

    deserialize_in_place(&s->environmentBlendMode, in);

        

    deserialize_in_place(&s->layerCount, in);

        

    #error "auto-generator doesn't support double pointers (s->layers)"
    None
}




void deserialize_in_place(XrSecondaryViewConfigurationSwapchainCreateInfoMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->viewConfigurationType, in);

}


#endif // XRTRANSPORT_EXT_XR_MSFT_secondary_view_configuration
#ifdef XRTRANSPORT_EXT_XR_MSFT_controller_model


void deserialize_in_place(XrControllerModelKeyStateMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->modelKey, in);

}




void deserialize_in_place(XrControllerModelNodePropertiesMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place_array(s->parentNodeName, XR_MAX_CONTROLLER_MODEL_NODE_NAME_SIZE_MSFT, in);

        

    deserialize_in_place_array(s->nodeName, XR_MAX_CONTROLLER_MODEL_NODE_NAME_SIZE_MSFT, in);

}




void deserialize_in_place(XrControllerModelPropertiesMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->nodeCapacityInput, in);

        

    deserialize_in_place(&s->nodeCountOutput, in);

        

    deserialize_in_place_ptr(&s->nodeProperties, in);

}




void deserialize_in_place(XrControllerModelNodeStateMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->nodePose, in);

}




void deserialize_in_place(XrControllerModelStateMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->nodeCapacityInput, in);

        

    deserialize_in_place(&s->nodeCountOutput, in);

        

    deserialize_in_place_ptr(&s->nodeStates, in);

}




void deserialize_in_place(XrControllerModelKeyStateMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->modelKey, in);

}




void deserialize_in_place(XrControllerModelNodePropertiesMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place_array(s->parentNodeName, XR_MAX_CONTROLLER_MODEL_NODE_NAME_SIZE_MSFT, in);

        

    deserialize_in_place_array(s->nodeName, XR_MAX_CONTROLLER_MODEL_NODE_NAME_SIZE_MSFT, in);

}




void deserialize_in_place(XrControllerModelPropertiesMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->nodeCapacityInput, in);

        

    deserialize_in_place(&s->nodeCountOutput, in);

        

    deserialize_in_place_ptr(&s->nodeProperties, in);

}




void deserialize_in_place(XrControllerModelNodeStateMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->nodePose, in);

}




void deserialize_in_place(XrControllerModelStateMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->nodeCapacityInput, in);

        

    deserialize_in_place(&s->nodeCountOutput, in);

        

    deserialize_in_place_ptr(&s->nodeStates, in);

}


#endif // XRTRANSPORT_EXT_XR_MSFT_controller_model
#ifdef XRTRANSPORT_EXT_XR_MSFT_perception_anchor_interop
#endif // XRTRANSPORT_EXT_XR_MSFT_perception_anchor_interop
#ifdef XRTRANSPORT_EXT_XR_EPIC_view_configuration_fov


void deserialize_in_place(XrViewConfigurationViewFovEPIC* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->recommendedFov, in);

        

    deserialize_in_place(&s->maxMutableFov, in);

}




void deserialize_in_place(XrViewConfigurationViewFovEPIC* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->recommendedFov, in);

        

    deserialize_in_place(&s->maxMutableFov, in);

}


#endif // XRTRANSPORT_EXT_XR_EPIC_view_configuration_fov
#ifdef XRTRANSPORT_EXT_XR_MSFT_holographic_window_attachment


void deserialize_in_place(XrHolographicWindowAttachmentMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place_ptr(&s->holographicSpace, in);

        

    deserialize_in_place_ptr(&s->coreWindow, in);

}




void deserialize_in_place(XrHolographicWindowAttachmentMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place_ptr(&s->holographicSpace, in);

        

    deserialize_in_place_ptr(&s->coreWindow, in);

}


#endif // XRTRANSPORT_EXT_XR_MSFT_holographic_window_attachment
#ifdef XRTRANSPORT_EXT_XR_MSFT_composition_layer_reprojection


void deserialize_in_place(XrCompositionLayerReprojectionInfoMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->reprojectionMode, in);

}




void deserialize_in_place(XrCompositionLayerReprojectionPlaneOverrideMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->position, in);

        

    deserialize_in_place(&s->normal, in);

        

    deserialize_in_place(&s->velocity, in);

}




void deserialize_in_place(XrCompositionLayerReprojectionInfoMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->reprojectionMode, in);

}




void deserialize_in_place(XrCompositionLayerReprojectionPlaneOverrideMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->position, in);

        

    deserialize_in_place(&s->normal, in);

        

    deserialize_in_place(&s->velocity, in);

}


#endif // XRTRANSPORT_EXT_XR_MSFT_composition_layer_reprojection
#ifdef XRTRANSPORT_EXT_XR_FB_android_surface_swapchain_create


void deserialize_in_place(XrAndroidSurfaceSwapchainCreateInfoFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->createFlags, in);

}




void deserialize_in_place(XrAndroidSurfaceSwapchainCreateInfoFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->createFlags, in);

}


#endif // XRTRANSPORT_EXT_XR_FB_android_surface_swapchain_create
#ifdef XRTRANSPORT_EXT_XR_FB_swapchain_update_state


void deserialize_in_place(XrSwapchainStateBaseHeaderFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

}


#endif // XRTRANSPORT_EXT_XR_FB_swapchain_update_state
#ifdef XRTRANSPORT_EXT_XR_FB_composition_layer_secure_content


void deserialize_in_place(XrCompositionLayerSecureContentFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->flags, in);

}




void deserialize_in_place(XrCompositionLayerSecureContentFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->flags, in);

}


#endif // XRTRANSPORT_EXT_XR_FB_composition_layer_secure_content
#ifdef XRTRANSPORT_EXT_XR_FB_body_tracking


void deserialize_in_place(XrBodyJointLocationFB* s, std::istream& in) {
        

    deserialize_in_place(&s->locationFlags, in);

        

    deserialize_in_place(&s->pose, in);

}




void deserialize_in_place(XrSystemBodyTrackingPropertiesFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->supportsBodyTracking, in);

}




void deserialize_in_place(XrBodyTrackerCreateInfoFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->bodyJointSet, in);

}




void deserialize_in_place(XrBodySkeletonJointFB* s, std::istream& in) {
        

    deserialize_in_place(&s->joint, in);

        

    deserialize_in_place(&s->parentJoint, in);

        

    deserialize_in_place(&s->pose, in);

}




void deserialize_in_place(XrBodySkeletonFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->jointCount, in);

        

    deserialize_in_place_ptr(&s->joints, in);

}




void deserialize_in_place(XrBodyJointsLocateInfoFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->baseSpace, in);

        

    deserialize_in_place(&s->time, in);

}




void deserialize_in_place(XrBodyJointLocationsFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->isActive, in);

        

    deserialize_in_place(&s->confidence, in);

        

    deserialize_in_place(&s->jointCount, in);

        

    deserialize_in_place_ptr(&s->jointLocations, in);

        

    deserialize_in_place(&s->skeletonChangedCount, in);

        

    deserialize_in_place(&s->time, in);

}




void deserialize_in_place(XrBodyTrackerCreateInfoFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->bodyJointSet, in);

}




void deserialize_in_place(XrBodyJointsLocateInfoFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->baseSpace, in);

        

    deserialize_in_place(&s->time, in);

}




void deserialize_in_place(XrSystemBodyTrackingPropertiesFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->supportsBodyTracking, in);

}




void deserialize_in_place(XrBodyJointLocationsFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->isActive, in);

        

    deserialize_in_place(&s->confidence, in);

        

    deserialize_in_place(&s->jointCount, in);

        

    deserialize_in_place_ptr(&s->jointLocations, in);

        

    deserialize_in_place(&s->skeletonChangedCount, in);

        

    deserialize_in_place(&s->time, in);

}




void deserialize_in_place(XrBodySkeletonFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->jointCount, in);

        

    deserialize_in_place_ptr(&s->joints, in);

}


#endif // XRTRANSPORT_EXT_XR_FB_body_tracking
#ifdef XRTRANSPORT_EXT_XR_EXT_dpad_binding


void deserialize_in_place(XrInteractionProfileDpadBindingEXT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->binding, in);

        

    deserialize_in_place(&s->actionSet, in);

        

    deserialize_in_place(&s->forceThreshold, in);

        

    deserialize_in_place(&s->forceThresholdReleased, in);

        

    deserialize_in_place(&s->centerRegion, in);

        

    deserialize_in_place(&s->wedgeAngle, in);

        

    deserialize_in_place(&s->isSticky, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place_xr(&s->next, in);

}




void deserialize_in_place(XrInteractionProfileDpadBindingEXT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->binding, in);

        

    deserialize_in_place(&s->actionSet, in);

        

    deserialize_in_place(&s->forceThreshold, in);

        

    deserialize_in_place(&s->forceThresholdReleased, in);

        

    deserialize_in_place(&s->centerRegion, in);

        

    deserialize_in_place(&s->wedgeAngle, in);

        

    deserialize_in_place(&s->isSticky, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place_xr(&s->next, in);

}


#endif // XRTRANSPORT_EXT_XR_EXT_dpad_binding
#ifdef XRTRANSPORT_EXT_XR_VALVE_analog_threshold


void deserialize_in_place(XrInteractionProfileAnalogThresholdVALVE* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->action, in);

        

    deserialize_in_place(&s->binding, in);

        

    deserialize_in_place(&s->onThreshold, in);

        

    deserialize_in_place(&s->offThreshold, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place_xr(&s->next, in);

}




void deserialize_in_place(XrInteractionProfileAnalogThresholdVALVE* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->action, in);

        

    deserialize_in_place(&s->binding, in);

        

    deserialize_in_place(&s->onThreshold, in);

        

    deserialize_in_place(&s->offThreshold, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place_xr(&s->next, in);

}


#endif // XRTRANSPORT_EXT_XR_VALVE_analog_threshold
#ifdef XRTRANSPORT_EXT_XR_EXT_hand_joints_motion_range


void deserialize_in_place(XrHandJointsMotionRangeInfoEXT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->handJointsMotionRange, in);

}




void deserialize_in_place(XrHandJointsMotionRangeInfoEXT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->handJointsMotionRange, in);

}


#endif // XRTRANSPORT_EXT_XR_EXT_hand_joints_motion_range
#ifdef XRTRANSPORT_EXT_XR_KHR_loader_init


void deserialize_in_place(XrLoaderInitInfoBaseHeaderKHR* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

}


#endif // XRTRANSPORT_EXT_XR_KHR_loader_init
#ifdef XRTRANSPORT_EXT_XR_KHR_loader_init_android


void deserialize_in_place(XrLoaderInitInfoAndroidKHR* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place_ptr(&s->applicationVM, in);

        

    deserialize_in_place_ptr(&s->applicationContext, in);

}




void deserialize_in_place(XrLoaderInitInfoAndroidKHR* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place_ptr(&s->applicationVM, in);

        

    deserialize_in_place_ptr(&s->applicationContext, in);

}


#endif // XRTRANSPORT_EXT_XR_KHR_loader_init_android
#ifdef XRTRANSPORT_EXT_XR_KHR_vulkan_enable2


void deserialize_in_place(XrVulkanInstanceCreateInfoKHR* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->systemId, in);

        

    deserialize_in_place(&s->createFlags, in);

        

    deserialize_in_place(&s->pfnGetInstanceProcAddr, in);

        

    deserialize_in_place_ptr(&s->vulkanCreateInfo, in);

        

    deserialize_in_place_ptr(&s->vulkanAllocator, in);

}




void deserialize_in_place(XrVulkanDeviceCreateInfoKHR* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->systemId, in);

        

    deserialize_in_place(&s->createFlags, in);

        

    deserialize_in_place(&s->pfnGetInstanceProcAddr, in);

        

    deserialize_in_place(&s->vulkanPhysicalDevice, in);

        

    deserialize_in_place_ptr(&s->vulkanCreateInfo, in);

        

    deserialize_in_place_ptr(&s->vulkanAllocator, in);

}




void deserialize_in_place(XrVulkanGraphicsDeviceGetInfoKHR* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->systemId, in);

        

    deserialize_in_place(&s->vulkanInstance, in);

}




void deserialize_in_place(XrVulkanInstanceCreateInfoKHR* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->systemId, in);

        

    deserialize_in_place(&s->createFlags, in);

        

    deserialize_in_place(&s->pfnGetInstanceProcAddr, in);

        

    deserialize_in_place_ptr(&s->vulkanCreateInfo, in);

        

    deserialize_in_place_ptr(&s->vulkanAllocator, in);

}




void deserialize_in_place(XrVulkanDeviceCreateInfoKHR* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->systemId, in);

        

    deserialize_in_place(&s->createFlags, in);

        

    deserialize_in_place(&s->pfnGetInstanceProcAddr, in);

        

    deserialize_in_place(&s->vulkanPhysicalDevice, in);

        

    deserialize_in_place_ptr(&s->vulkanCreateInfo, in);

        

    deserialize_in_place_ptr(&s->vulkanAllocator, in);

}




void deserialize_in_place(XrVulkanGraphicsDeviceGetInfoKHR* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->systemId, in);

        

    deserialize_in_place(&s->vulkanInstance, in);

}


#endif // XRTRANSPORT_EXT_XR_KHR_vulkan_enable2
#ifdef XRTRANSPORT_EXT_XR_KHR_composition_layer_equirect2


void deserialize_in_place(XrCompositionLayerEquirect2KHR* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->layerFlags, in);

        

    deserialize_in_place(&s->space, in);

        

    deserialize_in_place(&s->eyeVisibility, in);

        

    deserialize_in_place(&s->subImage, in);

        

    deserialize_in_place(&s->pose, in);

        

    deserialize_in_place(&s->radius, in);

        

    deserialize_in_place(&s->centralHorizontalAngle, in);

        

    deserialize_in_place(&s->upperVerticalAngle, in);

        

    deserialize_in_place(&s->lowerVerticalAngle, in);

}




void deserialize_in_place(XrCompositionLayerEquirect2KHR* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->layerFlags, in);

        

    deserialize_in_place(&s->space, in);

        

    deserialize_in_place(&s->eyeVisibility, in);

        

    deserialize_in_place(&s->subImage, in);

        

    deserialize_in_place(&s->pose, in);

        

    deserialize_in_place(&s->radius, in);

        

    deserialize_in_place(&s->centralHorizontalAngle, in);

        

    deserialize_in_place(&s->upperVerticalAngle, in);

        

    deserialize_in_place(&s->lowerVerticalAngle, in);

}


#endif // XRTRANSPORT_EXT_XR_KHR_composition_layer_equirect2
#ifdef XRTRANSPORT_EXT_XR_MSFT_scene_understanding


void deserialize_in_place(XrUuidMSFT* s, std::istream& in) {
        

    deserialize_in_place_array(s->bytes, 16, in);

}




void deserialize_in_place(XrSceneObserverCreateInfoMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

}




void deserialize_in_place(XrSceneCreateInfoMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

}




void deserialize_in_place(XrNewSceneComputeInfoMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->requestedFeatureCount, in);

        

    deserialize_in_place_ptr(&s->requestedFeatures, in);

        

    deserialize_in_place(&s->consistency, in);

        

    deserialize_in_place(&s->bounds, in);

}




void deserialize_in_place(XrVisualMeshComputeLodInfoMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->lod, in);

}




void deserialize_in_place(XrSceneSphereBoundMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->center, in);

        

    deserialize_in_place(&s->radius, in);

}




void deserialize_in_place(XrSceneOrientedBoxBoundMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->pose, in);

        

    deserialize_in_place(&s->extents, in);

}




void deserialize_in_place(XrSceneFrustumBoundMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->pose, in);

        

    deserialize_in_place(&s->fov, in);

        

    deserialize_in_place(&s->farDistance, in);

}




void deserialize_in_place(XrSceneBoundsMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->space, in);

        

    deserialize_in_place(&s->time, in);

        

    deserialize_in_place(&s->sphereCount, in);

        

    deserialize_in_place_ptr(&s->spheres, in);

        

    deserialize_in_place(&s->boxCount, in);

        

    deserialize_in_place_ptr(&s->boxes, in);

        

    deserialize_in_place(&s->frustumCount, in);

        

    deserialize_in_place_ptr(&s->frustums, in);

}




void deserialize_in_place(XrSceneComponentMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->componentType, in);

        

    deserialize_in_place(&s->id, in);

        

    deserialize_in_place(&s->parentId, in);

        

    deserialize_in_place(&s->updateTime, in);

}




void deserialize_in_place(XrSceneComponentsMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->componentCapacityInput, in);

        

    deserialize_in_place(&s->componentCountOutput, in);

        

    deserialize_in_place_ptr(&s->components, in);

}




void deserialize_in_place(XrSceneComponentsGetInfoMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->componentType, in);

}




void deserialize_in_place(XrSceneComponentLocationMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->flags, in);

        

    deserialize_in_place(&s->pose, in);

}




void deserialize_in_place(XrSceneComponentLocationsMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->locationCount, in);

        

    deserialize_in_place_ptr(&s->locations, in);

}




void deserialize_in_place(XrSceneComponentsLocateInfoMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->baseSpace, in);

        

    deserialize_in_place(&s->time, in);

        

    deserialize_in_place(&s->componentIdCount, in);

        

    deserialize_in_place_ptr(&s->componentIds, in);

}




void deserialize_in_place(XrSceneObjectMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->objectType, in);

}




void deserialize_in_place(XrSceneObjectsMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->sceneObjectCount, in);

        

    deserialize_in_place_ptr(&s->sceneObjects, in);

}




void deserialize_in_place(XrSceneComponentParentFilterInfoMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->parentId, in);

}




void deserialize_in_place(XrSceneObjectTypesFilterInfoMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->objectTypeCount, in);

        

    deserialize_in_place_ptr(&s->objectTypes, in);

}




void deserialize_in_place(XrScenePlaneMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->alignment, in);

        

    deserialize_in_place(&s->size, in);

        

    deserialize_in_place(&s->meshBufferId, in);

        

    deserialize_in_place(&s->supportsIndicesUint16, in);

}




void deserialize_in_place(XrScenePlanesMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->scenePlaneCount, in);

        

    deserialize_in_place_ptr(&s->scenePlanes, in);

}




void deserialize_in_place(XrScenePlaneAlignmentFilterInfoMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->alignmentCount, in);

        

    deserialize_in_place_ptr(&s->alignments, in);

}




void deserialize_in_place(XrSceneMeshMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->meshBufferId, in);

        

    deserialize_in_place(&s->supportsIndicesUint16, in);

}




void deserialize_in_place(XrSceneMeshesMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->sceneMeshCount, in);

        

    deserialize_in_place_ptr(&s->sceneMeshes, in);

}




void deserialize_in_place(XrSceneMeshBuffersGetInfoMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->meshBufferId, in);

}




void deserialize_in_place(XrSceneMeshBuffersMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

}




void deserialize_in_place(XrSceneMeshVertexBufferMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->vertexCapacityInput, in);

        

    deserialize_in_place(&s->vertexCountOutput, in);

        

    deserialize_in_place_ptr(&s->vertices, in);

}




void deserialize_in_place(XrSceneMeshIndicesUint32MSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->indexCapacityInput, in);

        

    deserialize_in_place(&s->indexCountOutput, in);

        

    deserialize_in_place_ptr(&s->indices, in);

}




void deserialize_in_place(XrSceneMeshIndicesUint16MSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->indexCapacityInput, in);

        

    deserialize_in_place(&s->indexCountOutput, in);

        

    deserialize_in_place_ptr(&s->indices, in);

}




void deserialize_in_place(XrSceneObserverCreateInfoMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

}




void deserialize_in_place(XrSceneCreateInfoMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

}




void deserialize_in_place(XrNewSceneComputeInfoMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->requestedFeatureCount, in);

        

    deserialize_in_place_ptr(&s->requestedFeatures, in);

        

    deserialize_in_place(&s->consistency, in);

        

    deserialize_in_place(&s->bounds, in);

}




void deserialize_in_place(XrVisualMeshComputeLodInfoMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->lod, in);

}




void deserialize_in_place(XrSceneComponentsMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->componentCapacityInput, in);

        

    deserialize_in_place(&s->componentCountOutput, in);

        

    deserialize_in_place_ptr(&s->components, in);

}




void deserialize_in_place(XrSceneComponentsGetInfoMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->componentType, in);

}




void deserialize_in_place(XrSceneComponentLocationsMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->locationCount, in);

        

    deserialize_in_place_ptr(&s->locations, in);

}




void deserialize_in_place(XrSceneComponentsLocateInfoMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->baseSpace, in);

        

    deserialize_in_place(&s->time, in);

        

    deserialize_in_place(&s->componentIdCount, in);

        

    deserialize_in_place_ptr(&s->componentIds, in);

}




void deserialize_in_place(XrSceneObjectsMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->sceneObjectCount, in);

        

    deserialize_in_place_ptr(&s->sceneObjects, in);

}




void deserialize_in_place(XrSceneComponentParentFilterInfoMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->parentId, in);

}




void deserialize_in_place(XrSceneObjectTypesFilterInfoMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->objectTypeCount, in);

        

    deserialize_in_place_ptr(&s->objectTypes, in);

}




void deserialize_in_place(XrScenePlanesMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->scenePlaneCount, in);

        

    deserialize_in_place_ptr(&s->scenePlanes, in);

}




void deserialize_in_place(XrScenePlaneAlignmentFilterInfoMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->alignmentCount, in);

        

    deserialize_in_place_ptr(&s->alignments, in);

}




void deserialize_in_place(XrSceneMeshesMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->sceneMeshCount, in);

        

    deserialize_in_place_ptr(&s->sceneMeshes, in);

}




void deserialize_in_place(XrSceneMeshBuffersGetInfoMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->meshBufferId, in);

}




void deserialize_in_place(XrSceneMeshBuffersMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

}




void deserialize_in_place(XrSceneMeshVertexBufferMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->vertexCapacityInput, in);

        

    deserialize_in_place(&s->vertexCountOutput, in);

        

    deserialize_in_place_ptr(&s->vertices, in);

}




void deserialize_in_place(XrSceneMeshIndicesUint32MSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->indexCapacityInput, in);

        

    deserialize_in_place(&s->indexCountOutput, in);

        

    deserialize_in_place_ptr(&s->indices, in);

}




void deserialize_in_place(XrSceneMeshIndicesUint16MSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->indexCapacityInput, in);

        

    deserialize_in_place(&s->indexCountOutput, in);

        

    deserialize_in_place_ptr(&s->indices, in);

}


#endif // XRTRANSPORT_EXT_XR_MSFT_scene_understanding
#ifdef XRTRANSPORT_EXT_XR_MSFT_scene_understanding_serialization


void deserialize_in_place(XrSerializedSceneFragmentDataGetInfoMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->sceneFragmentId, in);

}




void deserialize_in_place(XrDeserializeSceneFragmentMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->bufferSize, in);

        

    deserialize_in_place_ptr(&s->buffer, in);

}




void deserialize_in_place(XrSceneDeserializeInfoMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->fragmentCount, in);

        

    deserialize_in_place_ptr(&s->fragments, in);

}




void deserialize_in_place(XrSerializedSceneFragmentDataGetInfoMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->sceneFragmentId, in);

}




void deserialize_in_place(XrSceneDeserializeInfoMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->fragmentCount, in);

        

    deserialize_in_place_ptr(&s->fragments, in);

}


#endif // XRTRANSPORT_EXT_XR_MSFT_scene_understanding_serialization
#ifdef XRTRANSPORT_EXT_XR_FB_display_refresh_rate


void deserialize_in_place(XrEventDataDisplayRefreshRateChangedFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->fromDisplayRefreshRate, in);

        

    deserialize_in_place(&s->toDisplayRefreshRate, in);

}




void deserialize_in_place(XrEventDataDisplayRefreshRateChangedFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->fromDisplayRefreshRate, in);

        

    deserialize_in_place(&s->toDisplayRefreshRate, in);

}


#endif // XRTRANSPORT_EXT_XR_FB_display_refresh_rate
#ifdef XRTRANSPORT_EXT_XR_HTCX_vive_tracker_interaction


void deserialize_in_place(XrViveTrackerPathsHTCX* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->persistentPath, in);

        

    deserialize_in_place(&s->rolePath, in);

}




void deserialize_in_place(XrEventDataViveTrackerConnectedHTCX* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place_ptr(&s->paths, in);

}




void deserialize_in_place(XrViveTrackerPathsHTCX* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->persistentPath, in);

        

    deserialize_in_place(&s->rolePath, in);

}




void deserialize_in_place(XrEventDataViveTrackerConnectedHTCX* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place_ptr(&s->paths, in);

}


#endif // XRTRANSPORT_EXT_XR_HTCX_vive_tracker_interaction
#ifdef XRTRANSPORT_EXT_XR_HTC_facial_tracking


void deserialize_in_place(XrSystemFacialTrackingPropertiesHTC* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->supportEyeFacialTracking, in);

        

    deserialize_in_place(&s->supportLipFacialTracking, in);

}




void deserialize_in_place(XrFacialExpressionsHTC* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->isActive, in);

        

    deserialize_in_place(&s->sampleTime, in);

        

    deserialize_in_place(&s->expressionCount, in);

        

    deserialize_in_place_ptr(&s->expressionWeightings, in);

}




void deserialize_in_place(XrFacialTrackerCreateInfoHTC* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->facialTrackingType, in);

}




void deserialize_in_place(XrSystemFacialTrackingPropertiesHTC* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->supportEyeFacialTracking, in);

        

    deserialize_in_place(&s->supportLipFacialTracking, in);

}




void deserialize_in_place(XrFacialTrackerCreateInfoHTC* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->facialTrackingType, in);

}




void deserialize_in_place(XrFacialExpressionsHTC* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->isActive, in);

        

    deserialize_in_place(&s->sampleTime, in);

        

    deserialize_in_place(&s->expressionCount, in);

        

    deserialize_in_place_ptr(&s->expressionWeightings, in);

}


#endif // XRTRANSPORT_EXT_XR_HTC_facial_tracking
#ifdef XRTRANSPORT_EXT_XR_FB_color_space


void deserialize_in_place(XrSystemColorSpacePropertiesFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->colorSpace, in);

}




void deserialize_in_place(XrSystemColorSpacePropertiesFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->colorSpace, in);

}


#endif // XRTRANSPORT_EXT_XR_FB_color_space
#ifdef XRTRANSPORT_EXT_XR_FB_hand_tracking_mesh


void deserialize_in_place(XrVector4sFB* s, std::istream& in) {
        

    deserialize_in_place(&s->x, in);

        

    deserialize_in_place(&s->y, in);

        

    deserialize_in_place(&s->z, in);

        

    deserialize_in_place(&s->w, in);

}




void deserialize_in_place(XrHandTrackingMeshFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->jointCapacityInput, in);

        

    deserialize_in_place(&s->jointCountOutput, in);

        

    deserialize_in_place_ptr(&s->jointBindPoses, in);

        

    deserialize_in_place_ptr(&s->jointRadii, in);

        

    deserialize_in_place_ptr(&s->jointParents, in);

        

    deserialize_in_place(&s->vertexCapacityInput, in);

        

    deserialize_in_place(&s->vertexCountOutput, in);

        

    deserialize_in_place_ptr(&s->vertexPositions, in);

        

    deserialize_in_place_ptr(&s->vertexNormals, in);

        

    deserialize_in_place_ptr(&s->vertexUVs, in);

        

    deserialize_in_place_ptr(&s->vertexBlendIndices, in);

        

    deserialize_in_place_ptr(&s->vertexBlendWeights, in);

        

    deserialize_in_place(&s->indexCapacityInput, in);

        

    deserialize_in_place(&s->indexCountOutput, in);

        

    deserialize_in_place_ptr(&s->indices, in);

}




void deserialize_in_place(XrHandTrackingScaleFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->sensorOutput, in);

        

    deserialize_in_place(&s->currentOutput, in);

        

    deserialize_in_place(&s->overrideHandScale, in);

        

    deserialize_in_place(&s->overrideValueInput, in);

}




void deserialize_in_place(XrHandTrackingMeshFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->jointCapacityInput, in);

        

    deserialize_in_place(&s->jointCountOutput, in);

        

    deserialize_in_place_ptr(&s->jointBindPoses, in);

        

    deserialize_in_place_ptr(&s->jointRadii, in);

        

    deserialize_in_place_ptr(&s->jointParents, in);

        

    deserialize_in_place(&s->vertexCapacityInput, in);

        

    deserialize_in_place(&s->vertexCountOutput, in);

        

    deserialize_in_place_ptr(&s->vertexPositions, in);

        

    deserialize_in_place_ptr(&s->vertexNormals, in);

        

    deserialize_in_place_ptr(&s->vertexUVs, in);

        

    deserialize_in_place_ptr(&s->vertexBlendIndices, in);

        

    deserialize_in_place_ptr(&s->vertexBlendWeights, in);

        

    deserialize_in_place(&s->indexCapacityInput, in);

        

    deserialize_in_place(&s->indexCountOutput, in);

        

    deserialize_in_place_ptr(&s->indices, in);

}




void deserialize_in_place(XrHandTrackingScaleFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->sensorOutput, in);

        

    deserialize_in_place(&s->currentOutput, in);

        

    deserialize_in_place(&s->overrideHandScale, in);

        

    deserialize_in_place(&s->overrideValueInput, in);

}


#endif // XRTRANSPORT_EXT_XR_FB_hand_tracking_mesh
#ifdef XRTRANSPORT_EXT_XR_FB_hand_tracking_aim


void deserialize_in_place(XrHandTrackingAimStateFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->status, in);

        

    deserialize_in_place(&s->aimPose, in);

        

    deserialize_in_place(&s->pinchStrengthIndex, in);

        

    deserialize_in_place(&s->pinchStrengthMiddle, in);

        

    deserialize_in_place(&s->pinchStrengthRing, in);

        

    deserialize_in_place(&s->pinchStrengthLittle, in);

}




void deserialize_in_place(XrHandTrackingAimStateFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->status, in);

        

    deserialize_in_place(&s->aimPose, in);

        

    deserialize_in_place(&s->pinchStrengthIndex, in);

        

    deserialize_in_place(&s->pinchStrengthMiddle, in);

        

    deserialize_in_place(&s->pinchStrengthRing, in);

        

    deserialize_in_place(&s->pinchStrengthLittle, in);

}


#endif // XRTRANSPORT_EXT_XR_FB_hand_tracking_aim
#ifdef XRTRANSPORT_EXT_XR_FB_hand_tracking_capsules


void deserialize_in_place(XrHandCapsuleFB* s, std::istream& in) {
        

    deserialize_in_place_array(s->points, XR_HAND_TRACKING_CAPSULE_POINT_COUNT_FB, in);

        

    deserialize_in_place(&s->radius, in);

        

    deserialize_in_place(&s->joint, in);

}




void deserialize_in_place(XrHandTrackingCapsulesStateFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place_array(s->capsules, XR_HAND_TRACKING_CAPSULE_COUNT_FB, in);

}




void deserialize_in_place(XrHandTrackingCapsulesStateFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place_array(s->capsules, XR_HAND_TRACKING_CAPSULE_COUNT_FB, in);

}


#endif // XRTRANSPORT_EXT_XR_FB_hand_tracking_capsules
#ifdef XRTRANSPORT_EXT_XR_FB_spatial_entity


void deserialize_in_place(XrSystemSpatialEntityPropertiesFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->supportsSpatialEntity, in);

}




void deserialize_in_place(XrSpatialAnchorCreateInfoFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->space, in);

        

    deserialize_in_place(&s->poseInSpace, in);

        

    deserialize_in_place(&s->time, in);

}




void deserialize_in_place(XrSpaceComponentStatusSetInfoFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->componentType, in);

        

    deserialize_in_place(&s->enabled, in);

        

    deserialize_in_place(&s->timeout, in);

}




void deserialize_in_place(XrSpaceComponentStatusFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->enabled, in);

        

    deserialize_in_place(&s->changePending, in);

}




void deserialize_in_place(XrEventDataSpatialAnchorCreateCompleteFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->requestId, in);

        

    deserialize_in_place(&s->result, in);

        

    deserialize_in_place(&s->space, in);

        

    deserialize_in_place(&s->uuid, in);

}




void deserialize_in_place(XrEventDataSpaceSetStatusCompleteFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->requestId, in);

        

    deserialize_in_place(&s->result, in);

        

    deserialize_in_place(&s->space, in);

        

    deserialize_in_place(&s->uuid, in);

        

    deserialize_in_place(&s->componentType, in);

        

    deserialize_in_place(&s->enabled, in);

}




void deserialize_in_place(XrSystemSpatialEntityPropertiesFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->supportsSpatialEntity, in);

}




void deserialize_in_place(XrSpatialAnchorCreateInfoFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->space, in);

        

    deserialize_in_place(&s->poseInSpace, in);

        

    deserialize_in_place(&s->time, in);

}




void deserialize_in_place(XrSpaceComponentStatusSetInfoFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->componentType, in);

        

    deserialize_in_place(&s->enabled, in);

        

    deserialize_in_place(&s->timeout, in);

}




void deserialize_in_place(XrSpaceComponentStatusFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->enabled, in);

        

    deserialize_in_place(&s->changePending, in);

}




void deserialize_in_place(XrEventDataSpatialAnchorCreateCompleteFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->requestId, in);

        

    deserialize_in_place(&s->result, in);

        

    deserialize_in_place(&s->space, in);

        

    deserialize_in_place(&s->uuid, in);

}




void deserialize_in_place(XrEventDataSpaceSetStatusCompleteFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->requestId, in);

        

    deserialize_in_place(&s->result, in);

        

    deserialize_in_place(&s->space, in);

        

    deserialize_in_place(&s->uuid, in);

        

    deserialize_in_place(&s->componentType, in);

        

    deserialize_in_place(&s->enabled, in);

}


#endif // XRTRANSPORT_EXT_XR_FB_spatial_entity
#ifdef XRTRANSPORT_EXT_XR_FB_foveation


void deserialize_in_place(XrFoveationProfileCreateInfoFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

}




void deserialize_in_place(XrSwapchainCreateInfoFoveationFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->flags, in);

}




void deserialize_in_place(XrSwapchainStateFoveationFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->flags, in);

        

    deserialize_in_place(&s->profile, in);

}




void deserialize_in_place(XrFoveationProfileCreateInfoFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

}




void deserialize_in_place(XrSwapchainCreateInfoFoveationFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->flags, in);

}




void deserialize_in_place(XrSwapchainStateFoveationFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->flags, in);

        

    deserialize_in_place(&s->profile, in);

}


#endif // XRTRANSPORT_EXT_XR_FB_foveation
#ifdef XRTRANSPORT_EXT_XR_FB_foveation_configuration


void deserialize_in_place(XrFoveationLevelProfileCreateInfoFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->level, in);

        

    deserialize_in_place(&s->verticalOffset, in);

        

    deserialize_in_place(&s->dynamic, in);

}




void deserialize_in_place(XrFoveationLevelProfileCreateInfoFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->level, in);

        

    deserialize_in_place(&s->verticalOffset, in);

        

    deserialize_in_place(&s->dynamic, in);

}


#endif // XRTRANSPORT_EXT_XR_FB_foveation_configuration
#ifdef XRTRANSPORT_EXT_XR_FB_keyboard_tracking


void deserialize_in_place(XrSystemKeyboardTrackingPropertiesFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->supportsKeyboardTracking, in);

}




void deserialize_in_place(XrKeyboardTrackingDescriptionFB* s, std::istream& in) {
        

    deserialize_in_place(&s->trackedKeyboardId, in);

        

    deserialize_in_place(&s->size, in);

        

    deserialize_in_place(&s->flags, in);

        

    deserialize_in_place_array(s->name, XR_MAX_KEYBOARD_TRACKING_NAME_SIZE_FB, in);

}




void deserialize_in_place(XrKeyboardSpaceCreateInfoFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->trackedKeyboardId, in);

}




void deserialize_in_place(XrKeyboardTrackingQueryFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->flags, in);

}




void deserialize_in_place(XrKeyboardSpaceCreateInfoFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->trackedKeyboardId, in);

}




void deserialize_in_place(XrKeyboardTrackingQueryFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->flags, in);

}




void deserialize_in_place(XrSystemKeyboardTrackingPropertiesFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->supportsKeyboardTracking, in);

}


#endif // XRTRANSPORT_EXT_XR_FB_keyboard_tracking
#ifdef XRTRANSPORT_EXT_XR_FB_triangle_mesh


void deserialize_in_place(XrTriangleMeshCreateInfoFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->flags, in);

        

    deserialize_in_place(&s->windingOrder, in);

        

    deserialize_in_place(&s->vertexCount, in);

        

    deserialize_in_place_ptr(&s->vertexBuffer, in);

        

    deserialize_in_place(&s->triangleCount, in);

        

    deserialize_in_place_ptr(&s->indexBuffer, in);

}




void deserialize_in_place(XrTriangleMeshCreateInfoFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->flags, in);

        

    deserialize_in_place(&s->windingOrder, in);

        

    deserialize_in_place(&s->vertexCount, in);

        

    deserialize_in_place_ptr(&s->vertexBuffer, in);

        

    deserialize_in_place(&s->triangleCount, in);

        

    deserialize_in_place_ptr(&s->indexBuffer, in);

}


#endif // XRTRANSPORT_EXT_XR_FB_triangle_mesh
#ifdef XRTRANSPORT_EXT_XR_FB_passthrough


void deserialize_in_place(XrSystemPassthroughPropertiesFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->supportsPassthrough, in);

}




void deserialize_in_place(XrSystemPassthroughProperties2FB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->capabilities, in);

}




void deserialize_in_place(XrPassthroughCreateInfoFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->flags, in);

}




void deserialize_in_place(XrPassthroughLayerCreateInfoFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->passthrough, in);

        

    deserialize_in_place(&s->flags, in);

        

    deserialize_in_place(&s->purpose, in);

}




void deserialize_in_place(XrCompositionLayerPassthroughFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->flags, in);

        

    deserialize_in_place(&s->space, in);

        

    deserialize_in_place(&s->layerHandle, in);

}




void deserialize_in_place(XrGeometryInstanceCreateInfoFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->layer, in);

        

    deserialize_in_place(&s->mesh, in);

        

    deserialize_in_place(&s->baseSpace, in);

        

    deserialize_in_place(&s->pose, in);

        

    deserialize_in_place(&s->scale, in);

}




void deserialize_in_place(XrGeometryInstanceTransformFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->baseSpace, in);

        

    deserialize_in_place(&s->time, in);

        

    deserialize_in_place(&s->pose, in);

        

    deserialize_in_place(&s->scale, in);

}




void deserialize_in_place(XrPassthroughStyleFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->textureOpacityFactor, in);

        

    deserialize_in_place(&s->edgeColor, in);

}




void deserialize_in_place(XrPassthroughColorMapMonoToRgbaFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place_array(s->textureColorMap, XR_PASSTHROUGH_COLOR_MAP_MONO_SIZE_FB, in);

}




void deserialize_in_place(XrPassthroughColorMapMonoToMonoFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place_array(s->textureColorMap, XR_PASSTHROUGH_COLOR_MAP_MONO_SIZE_FB, in);

}




void deserialize_in_place(XrPassthroughBrightnessContrastSaturationFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->brightness, in);

        

    deserialize_in_place(&s->contrast, in);

        

    deserialize_in_place(&s->saturation, in);

}




void deserialize_in_place(XrEventDataPassthroughStateChangedFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->flags, in);

}




void deserialize_in_place(XrSystemPassthroughPropertiesFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->supportsPassthrough, in);

}




void deserialize_in_place(XrPassthroughCreateInfoFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->flags, in);

}




void deserialize_in_place(XrPassthroughLayerCreateInfoFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->passthrough, in);

        

    deserialize_in_place(&s->flags, in);

        

    deserialize_in_place(&s->purpose, in);

}




void deserialize_in_place(XrCompositionLayerPassthroughFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->flags, in);

        

    deserialize_in_place(&s->space, in);

        

    deserialize_in_place(&s->layerHandle, in);

}




void deserialize_in_place(XrGeometryInstanceCreateInfoFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->layer, in);

        

    deserialize_in_place(&s->mesh, in);

        

    deserialize_in_place(&s->baseSpace, in);

        

    deserialize_in_place(&s->pose, in);

        

    deserialize_in_place(&s->scale, in);

}




void deserialize_in_place(XrGeometryInstanceTransformFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->baseSpace, in);

        

    deserialize_in_place(&s->time, in);

        

    deserialize_in_place(&s->pose, in);

        

    deserialize_in_place(&s->scale, in);

}




void deserialize_in_place(XrSystemPassthroughProperties2FB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->capabilities, in);

}




void deserialize_in_place(XrPassthroughStyleFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->textureOpacityFactor, in);

        

    deserialize_in_place(&s->edgeColor, in);

}




void deserialize_in_place(XrPassthroughColorMapMonoToRgbaFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place_array(s->textureColorMap, XR_PASSTHROUGH_COLOR_MAP_MONO_SIZE_FB, in);

}




void deserialize_in_place(XrPassthroughColorMapMonoToMonoFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place_array(s->textureColorMap, XR_PASSTHROUGH_COLOR_MAP_MONO_SIZE_FB, in);

}




void deserialize_in_place(XrPassthroughBrightnessContrastSaturationFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->brightness, in);

        

    deserialize_in_place(&s->contrast, in);

        

    deserialize_in_place(&s->saturation, in);

}




void deserialize_in_place(XrEventDataPassthroughStateChangedFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->flags, in);

}


#endif // XRTRANSPORT_EXT_XR_FB_passthrough
#ifdef XRTRANSPORT_EXT_XR_FB_render_model


void deserialize_in_place(XrRenderModelPathInfoFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->path, in);

}




void deserialize_in_place(XrRenderModelPropertiesFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->vendorId, in);

        

    deserialize_in_place_array(s->modelName, XR_MAX_RENDER_MODEL_NAME_SIZE_FB, in);

        

    deserialize_in_place(&s->modelKey, in);

        

    deserialize_in_place(&s->modelVersion, in);

        

    deserialize_in_place(&s->flags, in);

}




void deserialize_in_place(XrRenderModelBufferFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->bufferCapacityInput, in);

        

    deserialize_in_place(&s->bufferCountOutput, in);

        

    deserialize_in_place_ptr(&s->buffer, in);

}




void deserialize_in_place(XrRenderModelLoadInfoFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->modelKey, in);

}




void deserialize_in_place(XrSystemRenderModelPropertiesFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->supportsRenderModelLoading, in);

}




void deserialize_in_place(XrRenderModelCapabilitiesRequestFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->flags, in);

}




void deserialize_in_place(XrRenderModelPathInfoFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->path, in);

}




void deserialize_in_place(XrRenderModelPropertiesFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->vendorId, in);

        

    deserialize_in_place_array(s->modelName, XR_MAX_RENDER_MODEL_NAME_SIZE_FB, in);

        

    deserialize_in_place(&s->modelKey, in);

        

    deserialize_in_place(&s->modelVersion, in);

        

    deserialize_in_place(&s->flags, in);

}




void deserialize_in_place(XrRenderModelBufferFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->bufferCapacityInput, in);

        

    deserialize_in_place(&s->bufferCountOutput, in);

        

    deserialize_in_place_ptr(&s->buffer, in);

}




void deserialize_in_place(XrRenderModelLoadInfoFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->modelKey, in);

}




void deserialize_in_place(XrSystemRenderModelPropertiesFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->supportsRenderModelLoading, in);

}




void deserialize_in_place(XrRenderModelCapabilitiesRequestFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->flags, in);

}


#endif // XRTRANSPORT_EXT_XR_FB_render_model
#ifdef XRTRANSPORT_EXT_XR_KHR_binding_modification


void deserialize_in_place(XrBindingModificationsKHR* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->bindingModificationCount, in);

        

    #error "auto-generator doesn't support double pointers (s->bindingModifications)"
    None
}




void deserialize_in_place(XrBindingModificationBaseHeaderKHR* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

}




void deserialize_in_place(XrBindingModificationsKHR* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->bindingModificationCount, in);

        

    #error "auto-generator doesn't support double pointers (s->bindingModifications)"
    None
}


#endif // XRTRANSPORT_EXT_XR_KHR_binding_modification
#ifdef XRTRANSPORT_EXT_XR_VARJO_foveated_rendering


void deserialize_in_place(XrViewLocateFoveatedRenderingVARJO* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->foveatedRenderingActive, in);

}




void deserialize_in_place(XrFoveatedViewConfigurationViewVARJO* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->foveatedRenderingActive, in);

}




void deserialize_in_place(XrSystemFoveatedRenderingPropertiesVARJO* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->supportsFoveatedRendering, in);

}




void deserialize_in_place(XrViewLocateFoveatedRenderingVARJO* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->foveatedRenderingActive, in);

}




void deserialize_in_place(XrFoveatedViewConfigurationViewVARJO* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->foveatedRenderingActive, in);

}




void deserialize_in_place(XrSystemFoveatedRenderingPropertiesVARJO* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->supportsFoveatedRendering, in);

}


#endif // XRTRANSPORT_EXT_XR_VARJO_foveated_rendering
#ifdef XRTRANSPORT_EXT_XR_VARJO_composition_layer_depth_test


void deserialize_in_place(XrCompositionLayerDepthTestVARJO* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->depthTestRangeNearZ, in);

        

    deserialize_in_place(&s->depthTestRangeFarZ, in);

}




void deserialize_in_place(XrCompositionLayerDepthTestVARJO* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->depthTestRangeNearZ, in);

        

    deserialize_in_place(&s->depthTestRangeFarZ, in);

}


#endif // XRTRANSPORT_EXT_XR_VARJO_composition_layer_depth_test
#ifdef XRTRANSPORT_EXT_XR_VARJO_environment_depth_estimation
#endif // XRTRANSPORT_EXT_XR_VARJO_environment_depth_estimation
#ifdef XRTRANSPORT_EXT_XR_VARJO_marker_tracking


void deserialize_in_place(XrSystemMarkerTrackingPropertiesVARJO* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->supportsMarkerTracking, in);

}




void deserialize_in_place(XrEventDataMarkerTrackingUpdateVARJO* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->markerId, in);

        

    deserialize_in_place(&s->isActive, in);

        

    deserialize_in_place(&s->isPredicted, in);

        

    deserialize_in_place(&s->time, in);

}




void deserialize_in_place(XrMarkerSpaceCreateInfoVARJO* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->markerId, in);

        

    deserialize_in_place(&s->poseInMarkerSpace, in);

}




void deserialize_in_place(XrSystemMarkerTrackingPropertiesVARJO* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->supportsMarkerTracking, in);

}




void deserialize_in_place(XrEventDataMarkerTrackingUpdateVARJO* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->markerId, in);

        

    deserialize_in_place(&s->isActive, in);

        

    deserialize_in_place(&s->isPredicted, in);

        

    deserialize_in_place(&s->time, in);

}




void deserialize_in_place(XrMarkerSpaceCreateInfoVARJO* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->markerId, in);

        

    deserialize_in_place(&s->poseInMarkerSpace, in);

}


#endif // XRTRANSPORT_EXT_XR_VARJO_marker_tracking
#ifdef XRTRANSPORT_EXT_XR_VARJO_view_offset
#endif // XRTRANSPORT_EXT_XR_VARJO_view_offset
#ifdef XRTRANSPORT_EXT_XR_ML_frame_end_info


void deserialize_in_place(XrFrameEndInfoML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->focusDistance, in);

        

    deserialize_in_place(&s->flags, in);

}




void deserialize_in_place(XrFrameEndInfoML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->focusDistance, in);

        

    deserialize_in_place(&s->flags, in);

}


#endif // XRTRANSPORT_EXT_XR_ML_frame_end_info
#ifdef XRTRANSPORT_EXT_XR_ML_global_dimmer


void deserialize_in_place(XrGlobalDimmerFrameEndInfoML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->dimmerValue, in);

        

    deserialize_in_place(&s->flags, in);

}




void deserialize_in_place(XrGlobalDimmerFrameEndInfoML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->dimmerValue, in);

        

    deserialize_in_place(&s->flags, in);

}


#endif // XRTRANSPORT_EXT_XR_ML_global_dimmer
#ifdef XRTRANSPORT_EXT_XR_ML_compat


void deserialize_in_place(XrCoordinateSpaceCreateInfoML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->cfuid, in);

        

    deserialize_in_place(&s->poseInCoordinateSpace, in);

}


#endif // XRTRANSPORT_EXT_XR_ML_compat
#ifdef XRTRANSPORT_EXT_XR_ML_marker_understanding


void deserialize_in_place(XrSystemMarkerUnderstandingPropertiesML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->supportsMarkerUnderstanding, in);

}




void deserialize_in_place(XrMarkerDetectorCreateInfoML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->profile, in);

        

    deserialize_in_place(&s->markerType, in);

}




void deserialize_in_place(XrMarkerDetectorArucoInfoML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->arucoDict, in);

}




void deserialize_in_place(XrMarkerDetectorSizeInfoML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->markerLength, in);

}




void deserialize_in_place(XrMarkerDetectorAprilTagInfoML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->aprilTagDict, in);

}




void deserialize_in_place(XrMarkerDetectorCustomProfileInfoML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->fpsHint, in);

        

    deserialize_in_place(&s->resolutionHint, in);

        

    deserialize_in_place(&s->cameraHint, in);

        

    deserialize_in_place(&s->cornerRefineMethod, in);

        

    deserialize_in_place(&s->useEdgeRefinement, in);

        

    deserialize_in_place(&s->fullAnalysisIntervalHint, in);

}




void deserialize_in_place(XrMarkerDetectorSnapshotInfoML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

}




void deserialize_in_place(XrMarkerDetectorStateML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->state, in);

}




void deserialize_in_place(XrMarkerSpaceCreateInfoML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->markerDetector, in);

        

    deserialize_in_place(&s->marker, in);

        

    deserialize_in_place(&s->poseInMarkerSpace, in);

}




void deserialize_in_place(XrSystemMarkerUnderstandingPropertiesML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->supportsMarkerUnderstanding, in);

}




void deserialize_in_place(XrMarkerDetectorCreateInfoML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->profile, in);

        

    deserialize_in_place(&s->markerType, in);

}




void deserialize_in_place(XrMarkerDetectorArucoInfoML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->arucoDict, in);

}




void deserialize_in_place(XrMarkerDetectorSizeInfoML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->markerLength, in);

}




void deserialize_in_place(XrMarkerDetectorAprilTagInfoML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->aprilTagDict, in);

}




void deserialize_in_place(XrMarkerDetectorCustomProfileInfoML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->fpsHint, in);

        

    deserialize_in_place(&s->resolutionHint, in);

        

    deserialize_in_place(&s->cameraHint, in);

        

    deserialize_in_place(&s->cornerRefineMethod, in);

        

    deserialize_in_place(&s->useEdgeRefinement, in);

        

    deserialize_in_place(&s->fullAnalysisIntervalHint, in);

}




void deserialize_in_place(XrMarkerDetectorSnapshotInfoML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

}




void deserialize_in_place(XrMarkerDetectorStateML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->state, in);

}




void deserialize_in_place(XrMarkerSpaceCreateInfoML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->markerDetector, in);

        

    deserialize_in_place(&s->marker, in);

        

    deserialize_in_place(&s->poseInMarkerSpace, in);

}


#endif // XRTRANSPORT_EXT_XR_ML_marker_understanding
#ifdef XRTRANSPORT_EXT_XR_ML_localization_map


void deserialize_in_place(XrLocalizationMapML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place_array(s->name, XR_MAX_LOCALIZATION_MAP_NAME_LENGTH_ML, in);

        

    deserialize_in_place(&s->mapUuid, in);

        

    deserialize_in_place(&s->mapType, in);

}




void deserialize_in_place(XrEventDataLocalizationChangedML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->session, in);

        

    deserialize_in_place(&s->state, in);

        

    deserialize_in_place(&s->map, in);

        

    deserialize_in_place(&s->confidence, in);

        

    deserialize_in_place(&s->errorFlags, in);

}




void deserialize_in_place(XrLocalizationMapQueryInfoBaseHeaderML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

}




void deserialize_in_place(XrMapLocalizationRequestInfoML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->mapUuid, in);

}




void deserialize_in_place(XrLocalizationMapImportInfoML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->size, in);

        

    deserialize_in_place_ptr(&s->data, in);

}




void deserialize_in_place(XrLocalizationEnableEventsInfoML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->enabled, in);

}




void deserialize_in_place(XrLocalizationMapML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place_array(s->name, XR_MAX_LOCALIZATION_MAP_NAME_LENGTH_ML, in);

        

    deserialize_in_place(&s->mapUuid, in);

        

    deserialize_in_place(&s->mapType, in);

}




void deserialize_in_place(XrEventDataLocalizationChangedML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->session, in);

        

    deserialize_in_place(&s->state, in);

        

    deserialize_in_place(&s->map, in);

        

    deserialize_in_place(&s->confidence, in);

        

    deserialize_in_place(&s->errorFlags, in);

}




void deserialize_in_place(XrMapLocalizationRequestInfoML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->mapUuid, in);

}




void deserialize_in_place(XrLocalizationMapImportInfoML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->size, in);

        

    deserialize_in_place_ptr(&s->data, in);

}




void deserialize_in_place(XrLocalizationEnableEventsInfoML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->enabled, in);

}


#endif // XRTRANSPORT_EXT_XR_ML_localization_map
#ifdef XRTRANSPORT_EXT_XR_ML_spatial_anchors


void deserialize_in_place(XrSpatialAnchorsCreateInfoBaseHeaderML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

}




void deserialize_in_place(XrSpatialAnchorsCreateInfoFromPoseML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->baseSpace, in);

        

    deserialize_in_place(&s->poseInBaseSpace, in);

        

    deserialize_in_place(&s->time, in);

}




void deserialize_in_place(XrCreateSpatialAnchorsCompletionML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->futureResult, in);

        

    deserialize_in_place(&s->spaceCount, in);

        

    deserialize_in_place_ptr(&s->spaces, in);

}




void deserialize_in_place(XrSpatialAnchorStateML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->confidence, in);

}




void deserialize_in_place(XrSpatialAnchorsCreateInfoFromPoseML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->baseSpace, in);

        

    deserialize_in_place(&s->poseInBaseSpace, in);

        

    deserialize_in_place(&s->time, in);

}




void deserialize_in_place(XrCreateSpatialAnchorsCompletionML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->futureResult, in);

        

    deserialize_in_place(&s->spaceCount, in);

        

    deserialize_in_place_ptr(&s->spaces, in);

}




void deserialize_in_place(XrSpatialAnchorStateML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->confidence, in);

}


#endif // XRTRANSPORT_EXT_XR_ML_spatial_anchors
#ifdef XRTRANSPORT_EXT_XR_ML_spatial_anchors_storage


void deserialize_in_place(XrSpatialAnchorsCreateStorageInfoML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

}




void deserialize_in_place(XrSpatialAnchorsQueryInfoBaseHeaderML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

}




void deserialize_in_place(XrSpatialAnchorsQueryInfoRadiusML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->baseSpace, in);

        

    deserialize_in_place(&s->center, in);

        

    deserialize_in_place(&s->time, in);

        

    deserialize_in_place(&s->radius, in);

}




void deserialize_in_place(XrSpatialAnchorsQueryCompletionML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->futureResult, in);

        

    deserialize_in_place(&s->uuidCapacityInput, in);

        

    deserialize_in_place(&s->uuidCountOutput, in);

        

    deserialize_in_place_ptr(&s->uuids, in);

}




void deserialize_in_place(XrSpatialAnchorsCreateInfoFromUuidsML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->storage, in);

        

    deserialize_in_place(&s->uuidCount, in);

        

    deserialize_in_place_ptr(&s->uuids, in);

}




void deserialize_in_place(XrSpatialAnchorsPublishInfoML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->anchorCount, in);

        

    deserialize_in_place_ptr(&s->anchors, in);

        

    deserialize_in_place(&s->expiration, in);

}




void deserialize_in_place(XrSpatialAnchorsPublishCompletionML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->futureResult, in);

        

    deserialize_in_place(&s->uuidCount, in);

        

    deserialize_in_place_ptr(&s->uuids, in);

}




void deserialize_in_place(XrSpatialAnchorsDeleteInfoML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->uuidCount, in);

        

    deserialize_in_place_ptr(&s->uuids, in);

}




void deserialize_in_place(XrSpatialAnchorsDeleteCompletionML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->futureResult, in);

}




void deserialize_in_place(XrSpatialAnchorsUpdateExpirationInfoML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->uuidCount, in);

        

    deserialize_in_place_ptr(&s->uuids, in);

        

    deserialize_in_place(&s->expiration, in);

}




void deserialize_in_place(XrSpatialAnchorsUpdateExpirationCompletionML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->futureResult, in);

}




void deserialize_in_place(XrSpatialAnchorsPublishCompletionDetailsML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->resultCount, in);

        

    deserialize_in_place_ptr(&s->results, in);

}




void deserialize_in_place(XrSpatialAnchorsDeleteCompletionDetailsML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->resultCount, in);

        

    deserialize_in_place_ptr(&s->results, in);

}




void deserialize_in_place(XrSpatialAnchorsUpdateExpirationCompletionDetailsML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->resultCount, in);

        

    deserialize_in_place_ptr(&s->results, in);

}




void deserialize_in_place(XrSpatialAnchorCompletionResultML* s, std::istream& in) {
        

    deserialize_in_place(&s->uuid, in);

        

    deserialize_in_place(&s->result, in);

}




void deserialize_in_place(XrSpatialAnchorsCreateStorageInfoML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

}




void deserialize_in_place(XrSpatialAnchorsQueryInfoRadiusML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->baseSpace, in);

        

    deserialize_in_place(&s->center, in);

        

    deserialize_in_place(&s->time, in);

        

    deserialize_in_place(&s->radius, in);

}




void deserialize_in_place(XrSpatialAnchorsQueryCompletionML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->futureResult, in);

        

    deserialize_in_place(&s->uuidCapacityInput, in);

        

    deserialize_in_place(&s->uuidCountOutput, in);

        

    deserialize_in_place_ptr(&s->uuids, in);

}




void deserialize_in_place(XrSpatialAnchorsCreateInfoFromUuidsML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->storage, in);

        

    deserialize_in_place(&s->uuidCount, in);

        

    deserialize_in_place_ptr(&s->uuids, in);

}




void deserialize_in_place(XrSpatialAnchorsPublishInfoML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->anchorCount, in);

        

    deserialize_in_place_ptr(&s->anchors, in);

        

    deserialize_in_place(&s->expiration, in);

}




void deserialize_in_place(XrSpatialAnchorsPublishCompletionML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->futureResult, in);

        

    deserialize_in_place(&s->uuidCount, in);

        

    deserialize_in_place_ptr(&s->uuids, in);

}




void deserialize_in_place(XrSpatialAnchorsDeleteInfoML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->uuidCount, in);

        

    deserialize_in_place_ptr(&s->uuids, in);

}




void deserialize_in_place(XrSpatialAnchorsDeleteCompletionML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->futureResult, in);

}




void deserialize_in_place(XrSpatialAnchorsUpdateExpirationInfoML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->uuidCount, in);

        

    deserialize_in_place_ptr(&s->uuids, in);

        

    deserialize_in_place(&s->expiration, in);

}




void deserialize_in_place(XrSpatialAnchorsUpdateExpirationCompletionML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->futureResult, in);

}




void deserialize_in_place(XrSpatialAnchorsPublishCompletionDetailsML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->resultCount, in);

        

    deserialize_in_place_ptr(&s->results, in);

}




void deserialize_in_place(XrSpatialAnchorsDeleteCompletionDetailsML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->resultCount, in);

        

    deserialize_in_place_ptr(&s->results, in);

}




void deserialize_in_place(XrSpatialAnchorsUpdateExpirationCompletionDetailsML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->resultCount, in);

        

    deserialize_in_place_ptr(&s->results, in);

}


#endif // XRTRANSPORT_EXT_XR_ML_spatial_anchors_storage
#ifdef XRTRANSPORT_EXT_XR_ML_user_calibration


void deserialize_in_place(XrEventDataHeadsetFitChangedML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->status, in);

        

    deserialize_in_place(&s->time, in);

}




void deserialize_in_place(XrEventDataEyeCalibrationChangedML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->status, in);

}




void deserialize_in_place(XrUserCalibrationEnableEventsInfoML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->enabled, in);

}




void deserialize_in_place(XrEventDataHeadsetFitChangedML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->status, in);

        

    deserialize_in_place(&s->time, in);

}




void deserialize_in_place(XrEventDataEyeCalibrationChangedML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->status, in);

}




void deserialize_in_place(XrUserCalibrationEnableEventsInfoML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->enabled, in);

}


#endif // XRTRANSPORT_EXT_XR_ML_user_calibration
#ifdef XRTRANSPORT_EXT_XR_MSFT_spatial_anchor_persistence


void deserialize_in_place(XrSpatialAnchorPersistenceNameMSFT* s, std::istream& in) {
        

    deserialize_in_place_array(s->name, XR_MAX_SPATIAL_ANCHOR_NAME_SIZE_MSFT, in);

}




void deserialize_in_place(XrSpatialAnchorPersistenceInfoMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->spatialAnchorPersistenceName, in);

        

    deserialize_in_place(&s->spatialAnchor, in);

}




void deserialize_in_place(XrSpatialAnchorFromPersistedAnchorCreateInfoMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->spatialAnchorStore, in);

        

    deserialize_in_place(&s->spatialAnchorPersistenceName, in);

}




void deserialize_in_place(XrSpatialAnchorPersistenceInfoMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->spatialAnchorPersistenceName, in);

        

    deserialize_in_place(&s->spatialAnchor, in);

}




void deserialize_in_place(XrSpatialAnchorFromPersistedAnchorCreateInfoMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->spatialAnchorStore, in);

        

    deserialize_in_place(&s->spatialAnchorPersistenceName, in);

}


#endif // XRTRANSPORT_EXT_XR_MSFT_spatial_anchor_persistence
#ifdef XRTRANSPORT_EXT_XR_MSFT_scene_marker


void deserialize_in_place(XrSceneMarkerMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->markerType, in);

        

    deserialize_in_place(&s->lastSeenTime, in);

        

    deserialize_in_place(&s->center, in);

        

    deserialize_in_place(&s->size, in);

}




void deserialize_in_place(XrSceneMarkersMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->sceneMarkerCapacityInput, in);

        

    deserialize_in_place_ptr(&s->sceneMarkers, in);

}




void deserialize_in_place(XrSceneMarkerTypeFilterMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->markerTypeCount, in);

        

    deserialize_in_place_ptr(&s->markerTypes, in);

}




void deserialize_in_place(XrSceneMarkerQRCodeMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->symbolType, in);

        

    deserialize_in_place(&s->version, in);

}




void deserialize_in_place(XrSceneMarkerQRCodesMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->qrCodeCapacityInput, in);

        

    deserialize_in_place_ptr(&s->qrCodes, in);

}




void deserialize_in_place(XrSceneMarkersMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->sceneMarkerCapacityInput, in);

        

    deserialize_in_place_ptr(&s->sceneMarkers, in);

}




void deserialize_in_place(XrSceneMarkerTypeFilterMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->markerTypeCount, in);

        

    deserialize_in_place_ptr(&s->markerTypes, in);

}




void deserialize_in_place(XrSceneMarkerQRCodesMSFT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->qrCodeCapacityInput, in);

        

    deserialize_in_place_ptr(&s->qrCodes, in);

}


#endif // XRTRANSPORT_EXT_XR_MSFT_scene_marker
#ifdef XRTRANSPORT_EXT_XR_KHR_extended_struct_name_lengths
#endif // XRTRANSPORT_EXT_XR_KHR_extended_struct_name_lengths
#ifdef XRTRANSPORT_EXT_XR_FB_spatial_entity_query


void deserialize_in_place(XrSpaceQueryInfoBaseHeaderFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

}




void deserialize_in_place(XrSpaceFilterInfoBaseHeaderFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

}




void deserialize_in_place(XrSpaceQueryInfoFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->queryAction, in);

        

    deserialize_in_place(&s->maxResultCount, in);

        

    deserialize_in_place(&s->timeout, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place_xr(&s->next, in);

}




void deserialize_in_place(XrSpaceStorageLocationFilterInfoFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->location, in);

}




void deserialize_in_place(XrSpaceUuidFilterInfoFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->uuidCount, in);

        

    deserialize_in_place_ptr(&s->uuids, in);

}




void deserialize_in_place(XrSpaceComponentFilterInfoFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->componentType, in);

}




void deserialize_in_place(XrSpaceQueryResultFB* s, std::istream& in) {
        

    deserialize_in_place(&s->space, in);

        

    deserialize_in_place(&s->uuid, in);

}




void deserialize_in_place(XrSpaceQueryResultsFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->resultCapacityInput, in);

        

    deserialize_in_place(&s->resultCountOutput, in);

        

    deserialize_in_place_ptr(&s->results, in);

}




void deserialize_in_place(XrEventDataSpaceQueryResultsAvailableFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->requestId, in);

}




void deserialize_in_place(XrEventDataSpaceQueryCompleteFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->requestId, in);

        

    deserialize_in_place(&s->result, in);

}




void deserialize_in_place(XrSpaceQueryInfoFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->queryAction, in);

        

    deserialize_in_place(&s->maxResultCount, in);

        

    deserialize_in_place(&s->timeout, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place_xr(&s->next, in);

}




void deserialize_in_place(XrSpaceQueryResultsFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->resultCapacityInput, in);

        

    deserialize_in_place(&s->resultCountOutput, in);

        

    deserialize_in_place_ptr(&s->results, in);

}




void deserialize_in_place(XrSpaceStorageLocationFilterInfoFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->location, in);

}




void deserialize_in_place(XrSpaceUuidFilterInfoFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->uuidCount, in);

        

    deserialize_in_place_ptr(&s->uuids, in);

}




void deserialize_in_place(XrSpaceComponentFilterInfoFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->componentType, in);

}




void deserialize_in_place(XrEventDataSpaceQueryResultsAvailableFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->requestId, in);

}




void deserialize_in_place(XrEventDataSpaceQueryCompleteFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->requestId, in);

        

    deserialize_in_place(&s->result, in);

}


#endif // XRTRANSPORT_EXT_XR_FB_spatial_entity_query
#ifdef XRTRANSPORT_EXT_XR_FB_spatial_entity_storage


void deserialize_in_place(XrSpaceSaveInfoFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->space, in);

        

    deserialize_in_place(&s->location, in);

        

    deserialize_in_place(&s->persistenceMode, in);

}




void deserialize_in_place(XrSpaceEraseInfoFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->space, in);

        

    deserialize_in_place(&s->location, in);

}




void deserialize_in_place(XrEventDataSpaceSaveCompleteFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->requestId, in);

        

    deserialize_in_place(&s->result, in);

        

    deserialize_in_place(&s->space, in);

        

    deserialize_in_place(&s->uuid, in);

        

    deserialize_in_place(&s->location, in);

}




void deserialize_in_place(XrEventDataSpaceEraseCompleteFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->requestId, in);

        

    deserialize_in_place(&s->result, in);

        

    deserialize_in_place(&s->space, in);

        

    deserialize_in_place(&s->uuid, in);

        

    deserialize_in_place(&s->location, in);

}




void deserialize_in_place(XrSpaceSaveInfoFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->space, in);

        

    deserialize_in_place(&s->location, in);

        

    deserialize_in_place(&s->persistenceMode, in);

}




void deserialize_in_place(XrSpaceEraseInfoFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->space, in);

        

    deserialize_in_place(&s->location, in);

}




void deserialize_in_place(XrEventDataSpaceSaveCompleteFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->requestId, in);

        

    deserialize_in_place(&s->result, in);

        

    deserialize_in_place(&s->space, in);

        

    deserialize_in_place(&s->uuid, in);

        

    deserialize_in_place(&s->location, in);

}




void deserialize_in_place(XrEventDataSpaceEraseCompleteFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->requestId, in);

        

    deserialize_in_place(&s->result, in);

        

    deserialize_in_place(&s->space, in);

        

    deserialize_in_place(&s->uuid, in);

        

    deserialize_in_place(&s->location, in);

}


#endif // XRTRANSPORT_EXT_XR_FB_spatial_entity_storage
#ifdef XRTRANSPORT_EXT_XR_OCULUS_audio_device_guid
#endif // XRTRANSPORT_EXT_XR_OCULUS_audio_device_guid
#ifdef XRTRANSPORT_EXT_XR_FB_foveation_vulkan


void deserialize_in_place(XrSwapchainImageFoveationVulkanFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->image, in);

        

    deserialize_in_place(&s->width, in);

        

    deserialize_in_place(&s->height, in);

}




void deserialize_in_place(XrSwapchainImageFoveationVulkanFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->image, in);

        

    deserialize_in_place(&s->width, in);

        

    deserialize_in_place(&s->height, in);

}


#endif // XRTRANSPORT_EXT_XR_FB_foveation_vulkan
#ifdef XRTRANSPORT_EXT_XR_FB_swapchain_update_state_android_surface


void deserialize_in_place(XrSwapchainStateAndroidSurfaceDimensionsFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->width, in);

        

    deserialize_in_place(&s->height, in);

}




void deserialize_in_place(XrSwapchainStateAndroidSurfaceDimensionsFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->width, in);

        

    deserialize_in_place(&s->height, in);

}


#endif // XRTRANSPORT_EXT_XR_FB_swapchain_update_state_android_surface
#ifdef XRTRANSPORT_EXT_XR_FB_swapchain_update_state_opengl_es


void deserialize_in_place(XrSwapchainStateSamplerOpenGLESFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->minFilter, in);

        

    deserialize_in_place(&s->magFilter, in);

        

    deserialize_in_place(&s->wrapModeS, in);

        

    deserialize_in_place(&s->wrapModeT, in);

        

    deserialize_in_place(&s->swizzleRed, in);

        

    deserialize_in_place(&s->swizzleGreen, in);

        

    deserialize_in_place(&s->swizzleBlue, in);

        

    deserialize_in_place(&s->swizzleAlpha, in);

        

    deserialize_in_place(&s->maxAnisotropy, in);

        

    deserialize_in_place(&s->borderColor, in);

}




void deserialize_in_place(XrSwapchainStateSamplerOpenGLESFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->minFilter, in);

        

    deserialize_in_place(&s->magFilter, in);

        

    deserialize_in_place(&s->wrapModeS, in);

        

    deserialize_in_place(&s->wrapModeT, in);

        

    deserialize_in_place(&s->swizzleRed, in);

        

    deserialize_in_place(&s->swizzleGreen, in);

        

    deserialize_in_place(&s->swizzleBlue, in);

        

    deserialize_in_place(&s->swizzleAlpha, in);

        

    deserialize_in_place(&s->maxAnisotropy, in);

        

    deserialize_in_place(&s->borderColor, in);

}


#endif // XRTRANSPORT_EXT_XR_FB_swapchain_update_state_opengl_es
#ifdef XRTRANSPORT_EXT_XR_FB_swapchain_update_state_vulkan


void deserialize_in_place(XrSwapchainStateSamplerVulkanFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->minFilter, in);

        

    deserialize_in_place(&s->magFilter, in);

        

    deserialize_in_place(&s->mipmapMode, in);

        

    deserialize_in_place(&s->wrapModeS, in);

        

    deserialize_in_place(&s->wrapModeT, in);

        

    deserialize_in_place(&s->swizzleRed, in);

        

    deserialize_in_place(&s->swizzleGreen, in);

        

    deserialize_in_place(&s->swizzleBlue, in);

        

    deserialize_in_place(&s->swizzleAlpha, in);

        

    deserialize_in_place(&s->maxAnisotropy, in);

        

    deserialize_in_place(&s->borderColor, in);

}




void deserialize_in_place(XrSwapchainStateSamplerVulkanFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->minFilter, in);

        

    deserialize_in_place(&s->magFilter, in);

        

    deserialize_in_place(&s->mipmapMode, in);

        

    deserialize_in_place(&s->wrapModeS, in);

        

    deserialize_in_place(&s->wrapModeT, in);

        

    deserialize_in_place(&s->swizzleRed, in);

        

    deserialize_in_place(&s->swizzleGreen, in);

        

    deserialize_in_place(&s->swizzleBlue, in);

        

    deserialize_in_place(&s->swizzleAlpha, in);

        

    deserialize_in_place(&s->maxAnisotropy, in);

        

    deserialize_in_place(&s->borderColor, in);

}


#endif // XRTRANSPORT_EXT_XR_FB_swapchain_update_state_vulkan
#ifdef XRTRANSPORT_EXT_XR_FB_spatial_entity_sharing


void deserialize_in_place(XrSpaceShareInfoFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->spaceCount, in);

        

    deserialize_in_place_ptr(&s->spaces, in);

        

    deserialize_in_place(&s->userCount, in);

        

    deserialize_in_place_ptr(&s->users, in);

}




void deserialize_in_place(XrEventDataSpaceShareCompleteFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->requestId, in);

        

    deserialize_in_place(&s->result, in);

}




void deserialize_in_place(XrSpaceShareInfoFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->spaceCount, in);

        

    deserialize_in_place_ptr(&s->spaces, in);

        

    deserialize_in_place(&s->userCount, in);

        

    deserialize_in_place_ptr(&s->users, in);

}




void deserialize_in_place(XrEventDataSpaceShareCompleteFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->requestId, in);

        

    deserialize_in_place(&s->result, in);

}


#endif // XRTRANSPORT_EXT_XR_FB_spatial_entity_sharing
#ifdef XRTRANSPORT_EXT_XR_FB_space_warp


void deserialize_in_place(XrCompositionLayerSpaceWarpInfoFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->layerFlags, in);

        

    deserialize_in_place(&s->motionVectorSubImage, in);

        

    deserialize_in_place(&s->appSpaceDeltaPose, in);

        

    deserialize_in_place(&s->depthSubImage, in);

        

    deserialize_in_place(&s->minDepth, in);

        

    deserialize_in_place(&s->maxDepth, in);

        

    deserialize_in_place(&s->nearZ, in);

        

    deserialize_in_place(&s->farZ, in);

}




void deserialize_in_place(XrSystemSpaceWarpPropertiesFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->recommendedMotionVectorImageRectWidth, in);

        

    deserialize_in_place(&s->recommendedMotionVectorImageRectHeight, in);

}




void deserialize_in_place(XrCompositionLayerSpaceWarpInfoFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->layerFlags, in);

        

    deserialize_in_place(&s->motionVectorSubImage, in);

        

    deserialize_in_place(&s->appSpaceDeltaPose, in);

        

    deserialize_in_place(&s->depthSubImage, in);

        

    deserialize_in_place(&s->minDepth, in);

        

    deserialize_in_place(&s->maxDepth, in);

        

    deserialize_in_place(&s->nearZ, in);

        

    deserialize_in_place(&s->farZ, in);

}




void deserialize_in_place(XrSystemSpaceWarpPropertiesFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->recommendedMotionVectorImageRectWidth, in);

        

    deserialize_in_place(&s->recommendedMotionVectorImageRectHeight, in);

}


#endif // XRTRANSPORT_EXT_XR_FB_space_warp
#ifdef XRTRANSPORT_EXT_XR_FB_haptic_amplitude_envelope


void deserialize_in_place(XrHapticAmplitudeEnvelopeVibrationFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->duration, in);

        

    deserialize_in_place(&s->amplitudeCount, in);

        

    deserialize_in_place_ptr(&s->amplitudes, in);

}




void deserialize_in_place(XrHapticAmplitudeEnvelopeVibrationFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->duration, in);

        

    deserialize_in_place(&s->amplitudeCount, in);

        

    deserialize_in_place_ptr(&s->amplitudes, in);

}


#endif // XRTRANSPORT_EXT_XR_FB_haptic_amplitude_envelope
#ifdef XRTRANSPORT_EXT_XR_FB_scene


void deserialize_in_place(XrOffset3DfFB* s, std::istream& in) {
        

    deserialize_in_place(&s->x, in);

        

    deserialize_in_place(&s->y, in);

        

    deserialize_in_place(&s->z, in);

}




void deserialize_in_place(XrRect3DfFB* s, std::istream& in) {
        

    deserialize_in_place(&s->offset, in);

        

    deserialize_in_place(&s->extent, in);

}




void deserialize_in_place(XrSemanticLabelsFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->bufferCapacityInput, in);

        

    deserialize_in_place(&s->bufferCountOutput, in);

        

    deserialize_in_place_ptr(&s->buffer, in);

}




void deserialize_in_place(XrRoomLayoutFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->floorUuid, in);

        

    deserialize_in_place(&s->ceilingUuid, in);

        

    deserialize_in_place(&s->wallUuidCapacityInput, in);

        

    deserialize_in_place(&s->wallUuidCountOutput, in);

        

    deserialize_in_place_ptr(&s->wallUuids, in);

}




void deserialize_in_place(XrBoundary2DFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->vertexCapacityInput, in);

        

    deserialize_in_place(&s->vertexCountOutput, in);

        

    deserialize_in_place_ptr(&s->vertices, in);

}




void deserialize_in_place(XrSemanticLabelsSupportInfoFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->flags, in);

        

    deserialize_in_place_ptr(&s->recognizedLabels, in);

}




void deserialize_in_place(XrSemanticLabelsFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->bufferCapacityInput, in);

        

    deserialize_in_place(&s->bufferCountOutput, in);

        

    deserialize_in_place_ptr(&s->buffer, in);

}




void deserialize_in_place(XrRoomLayoutFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->floorUuid, in);

        

    deserialize_in_place(&s->ceilingUuid, in);

        

    deserialize_in_place(&s->wallUuidCapacityInput, in);

        

    deserialize_in_place(&s->wallUuidCountOutput, in);

        

    deserialize_in_place_ptr(&s->wallUuids, in);

}




void deserialize_in_place(XrBoundary2DFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->vertexCapacityInput, in);

        

    deserialize_in_place(&s->vertexCountOutput, in);

        

    deserialize_in_place_ptr(&s->vertices, in);

}




void deserialize_in_place(XrSemanticLabelsSupportInfoFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->flags, in);

        

    deserialize_in_place_ptr(&s->recognizedLabels, in);

}


#endif // XRTRANSPORT_EXT_XR_FB_scene
#ifdef XRTRANSPORT_EXT_XR_ALMALENCE_digital_lens_control


void deserialize_in_place(XrDigitalLensControlALMALENCE* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->flags, in);

}


#endif // XRTRANSPORT_EXT_XR_ALMALENCE_digital_lens_control
#ifdef XRTRANSPORT_EXT_XR_FB_scene_capture


void deserialize_in_place(XrEventDataSceneCaptureCompleteFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->requestId, in);

        

    deserialize_in_place(&s->result, in);

}




void deserialize_in_place(XrSceneCaptureRequestInfoFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->requestByteCount, in);

        

    deserialize_in_place_ptr(&s->request, in);

}




void deserialize_in_place(XrEventDataSceneCaptureCompleteFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->requestId, in);

        

    deserialize_in_place(&s->result, in);

}




void deserialize_in_place(XrSceneCaptureRequestInfoFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->requestByteCount, in);

        

    deserialize_in_place_ptr(&s->request, in);

}


#endif // XRTRANSPORT_EXT_XR_FB_scene_capture
#ifdef XRTRANSPORT_EXT_XR_FB_spatial_entity_container


void deserialize_in_place(XrSpaceContainerFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->uuidCapacityInput, in);

        

    deserialize_in_place(&s->uuidCountOutput, in);

        

    deserialize_in_place_ptr(&s->uuids, in);

}




void deserialize_in_place(XrSpaceContainerFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->uuidCapacityInput, in);

        

    deserialize_in_place(&s->uuidCountOutput, in);

        

    deserialize_in_place_ptr(&s->uuids, in);

}


#endif // XRTRANSPORT_EXT_XR_FB_spatial_entity_container
#ifdef XRTRANSPORT_EXT_XR_META_foveation_eye_tracked


void deserialize_in_place(XrFoveationEyeTrackedProfileCreateInfoMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->flags, in);

}




void deserialize_in_place(XrFoveationEyeTrackedStateMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place_array(s->foveationCenter, XR_FOVEATION_CENTER_SIZE_META, in);

        

    deserialize_in_place(&s->flags, in);

}




void deserialize_in_place(XrSystemFoveationEyeTrackedPropertiesMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->supportsFoveationEyeTracked, in);

}




void deserialize_in_place(XrFoveationEyeTrackedProfileCreateInfoMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->flags, in);

}




void deserialize_in_place(XrFoveationEyeTrackedStateMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place_array(s->foveationCenter, XR_FOVEATION_CENTER_SIZE_META, in);

        

    deserialize_in_place(&s->flags, in);

}




void deserialize_in_place(XrSystemFoveationEyeTrackedPropertiesMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->supportsFoveationEyeTracked, in);

}


#endif // XRTRANSPORT_EXT_XR_META_foveation_eye_tracked
#ifdef XRTRANSPORT_EXT_XR_FB_face_tracking


void deserialize_in_place(XrSystemFaceTrackingPropertiesFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->supportsFaceTracking, in);

}




void deserialize_in_place(XrFaceTrackerCreateInfoFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->faceExpressionSet, in);

}




void deserialize_in_place(XrFaceExpressionInfoFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->time, in);

}




void deserialize_in_place(XrFaceExpressionStatusFB* s, std::istream& in) {
        

    deserialize_in_place(&s->isValid, in);

        

    deserialize_in_place(&s->isEyeFollowingBlendshapesValid, in);

}




void deserialize_in_place(XrFaceExpressionWeightsFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->weightCount, in);

        

    deserialize_in_place_ptr(&s->weights, in);

        

    deserialize_in_place(&s->confidenceCount, in);

        

    deserialize_in_place_ptr(&s->confidences, in);

        

    deserialize_in_place(&s->status, in);

        

    deserialize_in_place(&s->time, in);

}




void deserialize_in_place(XrSystemFaceTrackingPropertiesFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->supportsFaceTracking, in);

}




void deserialize_in_place(XrFaceTrackerCreateInfoFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->faceExpressionSet, in);

}




void deserialize_in_place(XrFaceExpressionInfoFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->time, in);

}




void deserialize_in_place(XrFaceExpressionWeightsFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->weightCount, in);

        

    deserialize_in_place_ptr(&s->weights, in);

        

    deserialize_in_place(&s->confidenceCount, in);

        

    deserialize_in_place_ptr(&s->confidences, in);

        

    deserialize_in_place(&s->status, in);

        

    deserialize_in_place(&s->time, in);

}


#endif // XRTRANSPORT_EXT_XR_FB_face_tracking
#ifdef XRTRANSPORT_EXT_XR_FB_eye_tracking_social


void deserialize_in_place(XrEyeGazeFB* s, std::istream& in) {
        

    deserialize_in_place(&s->isValid, in);

        

    deserialize_in_place(&s->gazePose, in);

        

    deserialize_in_place(&s->gazeConfidence, in);

}




void deserialize_in_place(XrEyeTrackerCreateInfoFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

}




void deserialize_in_place(XrEyeGazesInfoFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->baseSpace, in);

        

    deserialize_in_place(&s->time, in);

}




void deserialize_in_place(XrSystemEyeTrackingPropertiesFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->supportsEyeTracking, in);

}




void deserialize_in_place(XrEyeGazesFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place_array(s->gaze, XR_EYE_POSITION_COUNT_FB, in);

        

    deserialize_in_place(&s->time, in);

}




void deserialize_in_place(XrEyeTrackerCreateInfoFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

}




void deserialize_in_place(XrEyeGazesInfoFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->baseSpace, in);

        

    deserialize_in_place(&s->time, in);

}




void deserialize_in_place(XrEyeGazesFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place_array(s->gaze, XR_EYE_POSITION_COUNT_FB, in);

        

    deserialize_in_place(&s->time, in);

}




void deserialize_in_place(XrSystemEyeTrackingPropertiesFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->supportsEyeTracking, in);

}


#endif // XRTRANSPORT_EXT_XR_FB_eye_tracking_social
#ifdef XRTRANSPORT_EXT_XR_FB_passthrough_keyboard_hands


void deserialize_in_place(XrPassthroughKeyboardHandsIntensityFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->leftHandIntensity, in);

        

    deserialize_in_place(&s->rightHandIntensity, in);

}




void deserialize_in_place(XrPassthroughKeyboardHandsIntensityFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->leftHandIntensity, in);

        

    deserialize_in_place(&s->rightHandIntensity, in);

}


#endif // XRTRANSPORT_EXT_XR_FB_passthrough_keyboard_hands
#ifdef XRTRANSPORT_EXT_XR_FB_composition_layer_settings


void deserialize_in_place(XrCompositionLayerSettingsFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->layerFlags, in);

}




void deserialize_in_place(XrCompositionLayerSettingsFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->layerFlags, in);

}


#endif // XRTRANSPORT_EXT_XR_FB_composition_layer_settings
#ifdef XRTRANSPORT_EXT_XR_FB_haptic_pcm


void deserialize_in_place(XrHapticPcmVibrationFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->bufferSize, in);

        

    deserialize_in_place_ptr(&s->buffer, in);

        

    deserialize_in_place(&s->sampleRate, in);

        

    deserialize_in_place(&s->append, in);

        

    deserialize_in_place_ptr(&s->samplesConsumed, in);

}




void deserialize_in_place(XrDevicePcmSampleRateStateFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->sampleRate, in);

}




void deserialize_in_place(XrHapticPcmVibrationFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->bufferSize, in);

        

    deserialize_in_place_ptr(&s->buffer, in);

        

    deserialize_in_place(&s->sampleRate, in);

        

    deserialize_in_place(&s->append, in);

        

    deserialize_in_place_ptr(&s->samplesConsumed, in);

}




void deserialize_in_place(XrDevicePcmSampleRateStateFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->sampleRate, in);

}


#endif // XRTRANSPORT_EXT_XR_FB_haptic_pcm
#ifdef XRTRANSPORT_EXT_XR_EXT_frame_synthesis


void deserialize_in_place(XrFrameSynthesisInfoEXT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->layerFlags, in);

        

    deserialize_in_place(&s->motionVectorSubImage, in);

        

    deserialize_in_place(&s->motionVectorScale, in);

        

    deserialize_in_place(&s->motionVectorOffset, in);

        

    deserialize_in_place(&s->appSpaceDeltaPose, in);

        

    deserialize_in_place(&s->depthSubImage, in);

        

    deserialize_in_place(&s->minDepth, in);

        

    deserialize_in_place(&s->maxDepth, in);

        

    deserialize_in_place(&s->nearZ, in);

        

    deserialize_in_place(&s->farZ, in);

}




void deserialize_in_place(XrFrameSynthesisConfigViewEXT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->recommendedMotionVectorImageRectWidth, in);

        

    deserialize_in_place(&s->recommendedMotionVectorImageRectHeight, in);

}




void deserialize_in_place(XrFrameSynthesisInfoEXT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->layerFlags, in);

        

    deserialize_in_place(&s->motionVectorSubImage, in);

        

    deserialize_in_place(&s->motionVectorScale, in);

        

    deserialize_in_place(&s->motionVectorOffset, in);

        

    deserialize_in_place(&s->appSpaceDeltaPose, in);

        

    deserialize_in_place(&s->depthSubImage, in);

        

    deserialize_in_place(&s->minDepth, in);

        

    deserialize_in_place(&s->maxDepth, in);

        

    deserialize_in_place(&s->nearZ, in);

        

    deserialize_in_place(&s->farZ, in);

}




void deserialize_in_place(XrFrameSynthesisConfigViewEXT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->recommendedMotionVectorImageRectWidth, in);

        

    deserialize_in_place(&s->recommendedMotionVectorImageRectHeight, in);

}


#endif // XRTRANSPORT_EXT_XR_EXT_frame_synthesis
#ifdef XRTRANSPORT_EXT_XR_FB_composition_layer_depth_test


void deserialize_in_place(XrCompositionLayerDepthTestFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->depthMask, in);

        

    deserialize_in_place(&s->compareOp, in);

}




void deserialize_in_place(XrCompositionLayerDepthTestFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->depthMask, in);

        

    deserialize_in_place(&s->compareOp, in);

}


#endif // XRTRANSPORT_EXT_XR_FB_composition_layer_depth_test
#ifdef XRTRANSPORT_EXT_XR_META_local_dimming


void deserialize_in_place(XrLocalDimmingFrameEndInfoMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->localDimmingMode, in);

}




void deserialize_in_place(XrLocalDimmingFrameEndInfoMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->localDimmingMode, in);

}


#endif // XRTRANSPORT_EXT_XR_META_local_dimming
#ifdef XRTRANSPORT_EXT_XR_META_passthrough_preferences


void deserialize_in_place(XrPassthroughPreferencesMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->flags, in);

}




void deserialize_in_place(XrPassthroughPreferencesMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->flags, in);

}


#endif // XRTRANSPORT_EXT_XR_META_passthrough_preferences
#ifdef XRTRANSPORT_EXT_XR_META_virtual_keyboard


void deserialize_in_place(XrSystemVirtualKeyboardPropertiesMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->supportsVirtualKeyboard, in);

}




void deserialize_in_place(XrVirtualKeyboardCreateInfoMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

}




void deserialize_in_place(XrVirtualKeyboardSpaceCreateInfoMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->locationType, in);

        

    deserialize_in_place(&s->space, in);

        

    deserialize_in_place(&s->poseInSpace, in);

}




void deserialize_in_place(XrVirtualKeyboardLocationInfoMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->locationType, in);

        

    deserialize_in_place(&s->space, in);

        

    deserialize_in_place(&s->poseInSpace, in);

        

    deserialize_in_place(&s->scale, in);

}




void deserialize_in_place(XrVirtualKeyboardModelVisibilitySetInfoMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->visible, in);

}




void deserialize_in_place(XrVirtualKeyboardAnimationStateMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->animationIndex, in);

        

    deserialize_in_place(&s->fraction, in);

}




void deserialize_in_place(XrVirtualKeyboardModelAnimationStatesMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->stateCapacityInput, in);

        

    deserialize_in_place(&s->stateCountOutput, in);

        

    deserialize_in_place_ptr(&s->states, in);

}




void deserialize_in_place(XrVirtualKeyboardTextureDataMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->textureWidth, in);

        

    deserialize_in_place(&s->textureHeight, in);

        

    deserialize_in_place(&s->bufferCapacityInput, in);

        

    deserialize_in_place(&s->bufferCountOutput, in);

        

    deserialize_in_place_ptr(&s->buffer, in);

}




void deserialize_in_place(XrVirtualKeyboardInputInfoMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->inputSource, in);

        

    deserialize_in_place(&s->inputSpace, in);

        

    deserialize_in_place(&s->inputPoseInSpace, in);

        

    deserialize_in_place(&s->inputState, in);

}




void deserialize_in_place(XrVirtualKeyboardTextContextChangeInfoMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place_ptr(&s->textContext, in);

}




void deserialize_in_place(XrEventDataVirtualKeyboardCommitTextMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->keyboard, in);

        

    deserialize_in_place_array(s->text, XR_MAX_VIRTUAL_KEYBOARD_COMMIT_TEXT_SIZE_META, in);

}




void deserialize_in_place(XrEventDataVirtualKeyboardBackspaceMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->keyboard, in);

}




void deserialize_in_place(XrEventDataVirtualKeyboardEnterMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->keyboard, in);

}




void deserialize_in_place(XrEventDataVirtualKeyboardShownMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->keyboard, in);

}




void deserialize_in_place(XrEventDataVirtualKeyboardHiddenMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->keyboard, in);

}




void deserialize_in_place(XrSystemVirtualKeyboardPropertiesMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->supportsVirtualKeyboard, in);

}




void deserialize_in_place(XrVirtualKeyboardCreateInfoMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

}




void deserialize_in_place(XrVirtualKeyboardSpaceCreateInfoMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->locationType, in);

        

    deserialize_in_place(&s->space, in);

        

    deserialize_in_place(&s->poseInSpace, in);

}




void deserialize_in_place(XrVirtualKeyboardLocationInfoMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->locationType, in);

        

    deserialize_in_place(&s->space, in);

        

    deserialize_in_place(&s->poseInSpace, in);

        

    deserialize_in_place(&s->scale, in);

}




void deserialize_in_place(XrVirtualKeyboardModelVisibilitySetInfoMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->visible, in);

}




void deserialize_in_place(XrVirtualKeyboardAnimationStateMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->animationIndex, in);

        

    deserialize_in_place(&s->fraction, in);

}




void deserialize_in_place(XrVirtualKeyboardModelAnimationStatesMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->stateCapacityInput, in);

        

    deserialize_in_place(&s->stateCountOutput, in);

        

    deserialize_in_place_ptr(&s->states, in);

}




void deserialize_in_place(XrVirtualKeyboardTextureDataMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->textureWidth, in);

        

    deserialize_in_place(&s->textureHeight, in);

        

    deserialize_in_place(&s->bufferCapacityInput, in);

        

    deserialize_in_place(&s->bufferCountOutput, in);

        

    deserialize_in_place_ptr(&s->buffer, in);

}




void deserialize_in_place(XrVirtualKeyboardInputInfoMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->inputSource, in);

        

    deserialize_in_place(&s->inputSpace, in);

        

    deserialize_in_place(&s->inputPoseInSpace, in);

        

    deserialize_in_place(&s->inputState, in);

}




void deserialize_in_place(XrVirtualKeyboardTextContextChangeInfoMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place_ptr(&s->textContext, in);

}




void deserialize_in_place(XrEventDataVirtualKeyboardCommitTextMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->keyboard, in);

        

    deserialize_in_place_array(s->text, XR_MAX_VIRTUAL_KEYBOARD_COMMIT_TEXT_SIZE_META, in);

}




void deserialize_in_place(XrEventDataVirtualKeyboardBackspaceMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->keyboard, in);

}




void deserialize_in_place(XrEventDataVirtualKeyboardEnterMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->keyboard, in);

}




void deserialize_in_place(XrEventDataVirtualKeyboardShownMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->keyboard, in);

}




void deserialize_in_place(XrEventDataVirtualKeyboardHiddenMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->keyboard, in);

}


#endif // XRTRANSPORT_EXT_XR_META_virtual_keyboard
#ifdef XRTRANSPORT_EXT_XR_OCULUS_external_camera


void deserialize_in_place(XrExternalCameraIntrinsicsOCULUS* s, std::istream& in) {
        

    deserialize_in_place(&s->lastChangeTime, in);

        

    deserialize_in_place(&s->fov, in);

        

    deserialize_in_place(&s->virtualNearPlaneDistance, in);

        

    deserialize_in_place(&s->virtualFarPlaneDistance, in);

        

    deserialize_in_place(&s->imageSensorPixelResolution, in);

}




void deserialize_in_place(XrExternalCameraExtrinsicsOCULUS* s, std::istream& in) {
        

    deserialize_in_place(&s->lastChangeTime, in);

        

    deserialize_in_place(&s->cameraStatusFlags, in);

        

    deserialize_in_place(&s->attachedToDevice, in);

        

    deserialize_in_place(&s->relativePose, in);

}




void deserialize_in_place(XrExternalCameraOCULUS* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place_array(s->name, XR_MAX_EXTERNAL_CAMERA_NAME_SIZE_OCULUS, in);

        

    deserialize_in_place(&s->intrinsics, in);

        

    deserialize_in_place(&s->extrinsics, in);

}




void deserialize_in_place(XrExternalCameraOCULUS* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place_array(s->name, XR_MAX_EXTERNAL_CAMERA_NAME_SIZE_OCULUS, in);

        

    deserialize_in_place(&s->intrinsics, in);

        

    deserialize_in_place(&s->extrinsics, in);

}


#endif // XRTRANSPORT_EXT_XR_OCULUS_external_camera
#ifdef XRTRANSPORT_EXT_XR_META_vulkan_swapchain_create_info


void deserialize_in_place(XrVulkanSwapchainCreateInfoMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->additionalCreateFlags, in);

        

    deserialize_in_place(&s->additionalUsageFlags, in);

}




void deserialize_in_place(XrVulkanSwapchainCreateInfoMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->additionalCreateFlags, in);

        

    deserialize_in_place(&s->additionalUsageFlags, in);

}


#endif // XRTRANSPORT_EXT_XR_META_vulkan_swapchain_create_info
#ifdef XRTRANSPORT_EXT_XR_META_performance_metrics


void deserialize_in_place(XrPerformanceMetricsStateMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->enabled, in);

}




void deserialize_in_place(XrPerformanceMetricsCounterMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->counterFlags, in);

        

    deserialize_in_place(&s->counterUnit, in);

        

    deserialize_in_place(&s->uintValue, in);

        

    deserialize_in_place(&s->floatValue, in);

}




void deserialize_in_place(XrPerformanceMetricsStateMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->enabled, in);

}




void deserialize_in_place(XrPerformanceMetricsCounterMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->counterFlags, in);

        

    deserialize_in_place(&s->counterUnit, in);

        

    deserialize_in_place(&s->uintValue, in);

        

    deserialize_in_place(&s->floatValue, in);

}


#endif // XRTRANSPORT_EXT_XR_META_performance_metrics
#ifdef XRTRANSPORT_EXT_XR_FB_spatial_entity_storage_batch


void deserialize_in_place(XrSpaceListSaveInfoFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->spaceCount, in);

        

    deserialize_in_place_ptr(&s->spaces, in);

        

    deserialize_in_place(&s->location, in);

}




void deserialize_in_place(XrEventDataSpaceListSaveCompleteFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->requestId, in);

        

    deserialize_in_place(&s->result, in);

}




void deserialize_in_place(XrSpaceListSaveInfoFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->spaceCount, in);

        

    deserialize_in_place_ptr(&s->spaces, in);

        

    deserialize_in_place(&s->location, in);

}




void deserialize_in_place(XrEventDataSpaceListSaveCompleteFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->requestId, in);

        

    deserialize_in_place(&s->result, in);

}


#endif // XRTRANSPORT_EXT_XR_FB_spatial_entity_storage_batch
#ifdef XRTRANSPORT_EXT_XR_FB_spatial_entity_user


void deserialize_in_place(XrSpaceUserCreateInfoFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->userId, in);

}




void deserialize_in_place(XrSpaceUserCreateInfoFB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->userId, in);

}


#endif // XRTRANSPORT_EXT_XR_FB_spatial_entity_user
#ifdef XRTRANSPORT_EXT_XR_META_headset_id


void deserialize_in_place(XrSystemHeadsetIdPropertiesMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->id, in);

}




void deserialize_in_place(XrSystemHeadsetIdPropertiesMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->id, in);

}


#endif // XRTRANSPORT_EXT_XR_META_headset_id
#ifdef XRTRANSPORT_EXT_XR_META_recommended_layer_resolution


void deserialize_in_place(XrRecommendedLayerResolutionMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->recommendedImageDimensions, in);

        

    deserialize_in_place(&s->isValid, in);

}




void deserialize_in_place(XrRecommendedLayerResolutionGetInfoMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->predictedDisplayTime, in);

}




void deserialize_in_place(XrRecommendedLayerResolutionMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->recommendedImageDimensions, in);

        

    deserialize_in_place(&s->isValid, in);

}




void deserialize_in_place(XrRecommendedLayerResolutionGetInfoMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->predictedDisplayTime, in);

}


#endif // XRTRANSPORT_EXT_XR_META_recommended_layer_resolution
#ifdef XRTRANSPORT_EXT_XR_META_passthrough_color_lut


void deserialize_in_place(XrPassthroughColorLutDataMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->bufferSize, in);

        

    deserialize_in_place_ptr(&s->buffer, in);

}




void deserialize_in_place(XrPassthroughColorLutCreateInfoMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->channels, in);

        

    deserialize_in_place(&s->resolution, in);

        

    deserialize_in_place(&s->data, in);

}




void deserialize_in_place(XrPassthroughColorLutUpdateInfoMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->data, in);

}




void deserialize_in_place(XrPassthroughColorMapLutMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->colorLut, in);

        

    deserialize_in_place(&s->weight, in);

}




void deserialize_in_place(XrPassthroughColorMapInterpolatedLutMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->sourceColorLut, in);

        

    deserialize_in_place(&s->targetColorLut, in);

        

    deserialize_in_place(&s->weight, in);

}




void deserialize_in_place(XrSystemPassthroughColorLutPropertiesMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->maxColorLutResolution, in);

}




void deserialize_in_place(XrSystemPassthroughColorLutPropertiesMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->maxColorLutResolution, in);

}




void deserialize_in_place(XrPassthroughColorLutCreateInfoMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->channels, in);

        

    deserialize_in_place(&s->resolution, in);

        

    deserialize_in_place(&s->data, in);

}




void deserialize_in_place(XrPassthroughColorLutUpdateInfoMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->data, in);

}




void deserialize_in_place(XrPassthroughColorMapLutMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->colorLut, in);

        

    deserialize_in_place(&s->weight, in);

}




void deserialize_in_place(XrPassthroughColorMapInterpolatedLutMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->sourceColorLut, in);

        

    deserialize_in_place(&s->targetColorLut, in);

        

    deserialize_in_place(&s->weight, in);

}


#endif // XRTRANSPORT_EXT_XR_META_passthrough_color_lut
#ifdef XRTRANSPORT_EXT_XR_META_spatial_entity_mesh


void deserialize_in_place(XrSpaceTriangleMeshGetInfoMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

}




void deserialize_in_place(XrSpaceTriangleMeshMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->vertexCapacityInput, in);

        

    deserialize_in_place(&s->vertexCountOutput, in);

        

    deserialize_in_place_ptr(&s->vertices, in);

        

    deserialize_in_place(&s->indexCapacityInput, in);

        

    deserialize_in_place(&s->indexCountOutput, in);

        

    deserialize_in_place_ptr(&s->indices, in);

}




void deserialize_in_place(XrSpaceTriangleMeshGetInfoMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

}




void deserialize_in_place(XrSpaceTriangleMeshMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->vertexCapacityInput, in);

        

    deserialize_in_place(&s->vertexCountOutput, in);

        

    deserialize_in_place_ptr(&s->vertices, in);

        

    deserialize_in_place(&s->indexCapacityInput, in);

        

    deserialize_in_place(&s->indexCountOutput, in);

        

    deserialize_in_place_ptr(&s->indices, in);

}


#endif // XRTRANSPORT_EXT_XR_META_spatial_entity_mesh
#ifdef XRTRANSPORT_EXT_XR_META_body_tracking_full_body


void deserialize_in_place(XrSystemPropertiesBodyTrackingFullBodyMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->supportsFullBodyTracking, in);

}




void deserialize_in_place(XrSystemPropertiesBodyTrackingFullBodyMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->supportsFullBodyTracking, in);

}


#endif // XRTRANSPORT_EXT_XR_META_body_tracking_full_body
#ifdef XRTRANSPORT_EXT_XR_META_passthrough_layer_resumed_event


void deserialize_in_place(XrEventDataPassthroughLayerResumedMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->layer, in);

}




void deserialize_in_place(XrEventDataPassthroughLayerResumedMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->layer, in);

}


#endif // XRTRANSPORT_EXT_XR_META_passthrough_layer_resumed_event
#ifdef XRTRANSPORT_EXT_XR_FB_face_tracking2


void deserialize_in_place(XrSystemFaceTrackingProperties2FB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->supportsVisualFaceTracking, in);

        

    deserialize_in_place(&s->supportsAudioFaceTracking, in);

}




void deserialize_in_place(XrFaceTrackerCreateInfo2FB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->faceExpressionSet, in);

        

    deserialize_in_place(&s->requestedDataSourceCount, in);

        

    deserialize_in_place_ptr(&s->requestedDataSources, in);

}




void deserialize_in_place(XrFaceExpressionInfo2FB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->time, in);

}




void deserialize_in_place(XrFaceExpressionWeights2FB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->weightCount, in);

        

    deserialize_in_place_ptr(&s->weights, in);

        

    deserialize_in_place(&s->confidenceCount, in);

        

    deserialize_in_place_ptr(&s->confidences, in);

        

    deserialize_in_place(&s->isValid, in);

        

    deserialize_in_place(&s->isEyeFollowingBlendshapesValid, in);

        

    deserialize_in_place(&s->dataSource, in);

        

    deserialize_in_place(&s->time, in);

}




void deserialize_in_place(XrSystemFaceTrackingProperties2FB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->supportsVisualFaceTracking, in);

        

    deserialize_in_place(&s->supportsAudioFaceTracking, in);

}




void deserialize_in_place(XrFaceTrackerCreateInfo2FB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->faceExpressionSet, in);

        

    deserialize_in_place(&s->requestedDataSourceCount, in);

        

    deserialize_in_place_ptr(&s->requestedDataSources, in);

}




void deserialize_in_place(XrFaceExpressionInfo2FB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->time, in);

}




void deserialize_in_place(XrFaceExpressionWeights2FB* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->weightCount, in);

        

    deserialize_in_place_ptr(&s->weights, in);

        

    deserialize_in_place(&s->confidenceCount, in);

        

    deserialize_in_place_ptr(&s->confidences, in);

        

    deserialize_in_place(&s->isValid, in);

        

    deserialize_in_place(&s->isEyeFollowingBlendshapesValid, in);

        

    deserialize_in_place(&s->dataSource, in);

        

    deserialize_in_place(&s->time, in);

}


#endif // XRTRANSPORT_EXT_XR_FB_face_tracking2
#ifdef XRTRANSPORT_EXT_XR_META_spatial_entity_sharing


void deserialize_in_place(XrSystemSpatialEntitySharingPropertiesMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->supportsSpatialEntitySharing, in);

}




void deserialize_in_place(XrShareSpacesRecipientBaseHeaderMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

}




void deserialize_in_place(XrShareSpacesInfoMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->spaceCount, in);

        

    deserialize_in_place_ptr(&s->spaces, in);

        

    deserialize_in_place_xr(&s->next, in);

}




void deserialize_in_place(XrEventDataShareSpacesCompleteMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->requestId, in);

        

    deserialize_in_place(&s->result, in);

}




void deserialize_in_place(XrSystemSpatialEntitySharingPropertiesMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->supportsSpatialEntitySharing, in);

}




void deserialize_in_place(XrShareSpacesInfoMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->spaceCount, in);

        

    deserialize_in_place_ptr(&s->spaces, in);

        

    deserialize_in_place_xr(&s->next, in);

}




void deserialize_in_place(XrEventDataShareSpacesCompleteMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->requestId, in);

        

    deserialize_in_place(&s->result, in);

}


#endif // XRTRANSPORT_EXT_XR_META_spatial_entity_sharing
#ifdef XRTRANSPORT_EXT_XR_META_environment_depth


void deserialize_in_place(XrEnvironmentDepthProviderCreateInfoMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->createFlags, in);

}




void deserialize_in_place(XrEnvironmentDepthSwapchainCreateInfoMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->createFlags, in);

}




void deserialize_in_place(XrEnvironmentDepthSwapchainStateMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->width, in);

        

    deserialize_in_place(&s->height, in);

}




void deserialize_in_place(XrEnvironmentDepthImageAcquireInfoMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->space, in);

        

    deserialize_in_place(&s->displayTime, in);

}




void deserialize_in_place(XrEnvironmentDepthImageViewMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->fov, in);

        

    deserialize_in_place(&s->pose, in);

}




void deserialize_in_place(XrEnvironmentDepthImageMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->swapchainIndex, in);

        

    deserialize_in_place(&s->nearZ, in);

        

    deserialize_in_place(&s->farZ, in);

        

    deserialize_in_place_array(s->views, 2, in);

}




void deserialize_in_place(XrEnvironmentDepthHandRemovalSetInfoMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->enabled, in);

}




void deserialize_in_place(XrSystemEnvironmentDepthPropertiesMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->supportsEnvironmentDepth, in);

        

    deserialize_in_place(&s->supportsHandRemoval, in);

}




void deserialize_in_place(XrEnvironmentDepthProviderCreateInfoMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->createFlags, in);

}




void deserialize_in_place(XrEnvironmentDepthSwapchainCreateInfoMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->createFlags, in);

}




void deserialize_in_place(XrEnvironmentDepthSwapchainStateMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->width, in);

        

    deserialize_in_place(&s->height, in);

}




void deserialize_in_place(XrEnvironmentDepthImageAcquireInfoMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->space, in);

        

    deserialize_in_place(&s->displayTime, in);

}




void deserialize_in_place(XrEnvironmentDepthImageViewMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->fov, in);

        

    deserialize_in_place(&s->pose, in);

}




void deserialize_in_place(XrEnvironmentDepthImageMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->swapchainIndex, in);

        

    deserialize_in_place(&s->nearZ, in);

        

    deserialize_in_place(&s->farZ, in);

        

    deserialize_in_place_array(s->views, 2, in);

}




void deserialize_in_place(XrEnvironmentDepthHandRemovalSetInfoMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->enabled, in);

}




void deserialize_in_place(XrSystemEnvironmentDepthPropertiesMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->supportsEnvironmentDepth, in);

        

    deserialize_in_place(&s->supportsHandRemoval, in);

}


#endif // XRTRANSPORT_EXT_XR_META_environment_depth
#ifdef XRTRANSPORT_EXT_XR_QCOM_tracking_optimization_settings
#endif // XRTRANSPORT_EXT_XR_QCOM_tracking_optimization_settings
#ifdef XRTRANSPORT_EXT_XR_HTC_passthrough


void deserialize_in_place(XrPassthroughCreateInfoHTC* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->form, in);

}




void deserialize_in_place(XrPassthroughColorHTC* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->alpha, in);

}




void deserialize_in_place(XrPassthroughMeshTransformInfoHTC* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->vertexCount, in);

        

    deserialize_in_place_ptr(&s->vertices, in);

        

    deserialize_in_place(&s->indexCount, in);

        

    deserialize_in_place_ptr(&s->indices, in);

        

    deserialize_in_place(&s->baseSpace, in);

        

    deserialize_in_place(&s->time, in);

        

    deserialize_in_place(&s->pose, in);

        

    deserialize_in_place(&s->scale, in);

}




void deserialize_in_place(XrCompositionLayerPassthroughHTC* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->layerFlags, in);

        

    deserialize_in_place(&s->space, in);

        

    deserialize_in_place(&s->passthrough, in);

        

    deserialize_in_place(&s->color, in);

}




void deserialize_in_place(XrPassthroughCreateInfoHTC* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->form, in);

}




void deserialize_in_place(XrPassthroughColorHTC* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->alpha, in);

}




void deserialize_in_place(XrPassthroughMeshTransformInfoHTC* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->vertexCount, in);

        

    deserialize_in_place_ptr(&s->vertices, in);

        

    deserialize_in_place(&s->indexCount, in);

        

    deserialize_in_place_ptr(&s->indices, in);

        

    deserialize_in_place(&s->baseSpace, in);

        

    deserialize_in_place(&s->time, in);

        

    deserialize_in_place(&s->pose, in);

        

    deserialize_in_place(&s->scale, in);

}




void deserialize_in_place(XrCompositionLayerPassthroughHTC* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->layerFlags, in);

        

    deserialize_in_place(&s->space, in);

        

    deserialize_in_place(&s->passthrough, in);

        

    deserialize_in_place(&s->color, in);

}


#endif // XRTRANSPORT_EXT_XR_HTC_passthrough
#ifdef XRTRANSPORT_EXT_XR_HTC_foveation


void deserialize_in_place(XrFoveationApplyInfoHTC* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->mode, in);

        

    deserialize_in_place(&s->subImageCount, in);

        

    deserialize_in_place_ptr(&s->subImages, in);

}




void deserialize_in_place(XrFoveationConfigurationHTC* s, std::istream& in) {
        

    deserialize_in_place(&s->level, in);

        

    deserialize_in_place(&s->clearFovDegree, in);

        

    deserialize_in_place(&s->focalCenterOffset, in);

}




void deserialize_in_place(XrFoveationDynamicModeInfoHTC* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->dynamicFlags, in);

}




void deserialize_in_place(XrFoveationCustomModeInfoHTC* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->configCount, in);

        

    deserialize_in_place_ptr(&s->configs, in);

}




void deserialize_in_place(XrFoveationApplyInfoHTC* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->mode, in);

        

    deserialize_in_place(&s->subImageCount, in);

        

    deserialize_in_place_ptr(&s->subImages, in);

}




void deserialize_in_place(XrFoveationDynamicModeInfoHTC* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->dynamicFlags, in);

}




void deserialize_in_place(XrFoveationCustomModeInfoHTC* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->configCount, in);

        

    deserialize_in_place_ptr(&s->configs, in);

}


#endif // XRTRANSPORT_EXT_XR_HTC_foveation
#ifdef XRTRANSPORT_EXT_XR_HTC_anchor


void deserialize_in_place(XrSystemAnchorPropertiesHTC* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->supportsAnchor, in);

}




void deserialize_in_place(XrSpatialAnchorCreateInfoHTC* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->space, in);

        

    deserialize_in_place(&s->poseInSpace, in);

        

    deserialize_in_place(&s->name, in);

}




void deserialize_in_place(XrSpatialAnchorNameHTC* s, std::istream& in) {
        

    deserialize_in_place_array(s->name, XR_MAX_SPATIAL_ANCHOR_NAME_SIZE_HTC, in);

}




void deserialize_in_place(XrSystemAnchorPropertiesHTC* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->supportsAnchor, in);

}




void deserialize_in_place(XrSpatialAnchorCreateInfoHTC* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->space, in);

        

    deserialize_in_place(&s->poseInSpace, in);

        

    deserialize_in_place(&s->name, in);

}


#endif // XRTRANSPORT_EXT_XR_HTC_anchor
#ifdef XRTRANSPORT_EXT_XR_HTC_body_tracking


void deserialize_in_place(XrSystemBodyTrackingPropertiesHTC* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->supportsBodyTracking, in);

}




void deserialize_in_place(XrBodyTrackerCreateInfoHTC* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->bodyJointSet, in);

}




void deserialize_in_place(XrBodyJointsLocateInfoHTC* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->baseSpace, in);

        

    deserialize_in_place(&s->time, in);

}




void deserialize_in_place(XrBodyJointLocationsHTC* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->combinedLocationFlags, in);

        

    deserialize_in_place(&s->confidenceLevel, in);

        

    deserialize_in_place(&s->jointLocationCount, in);

        

    deserialize_in_place_ptr(&s->jointLocations, in);

        

    deserialize_in_place(&s->skeletonGenerationId, in);

}




void deserialize_in_place(XrBodyJointLocationHTC* s, std::istream& in) {
        

    deserialize_in_place(&s->locationFlags, in);

        

    deserialize_in_place(&s->pose, in);

}




void deserialize_in_place(XrBodySkeletonHTC* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->jointCount, in);

        

    deserialize_in_place_ptr(&s->joints, in);

}




void deserialize_in_place(XrSystemBodyTrackingPropertiesHTC* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->supportsBodyTracking, in);

}




void deserialize_in_place(XrBodyTrackerCreateInfoHTC* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->bodyJointSet, in);

}




void deserialize_in_place(XrBodyJointsLocateInfoHTC* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->baseSpace, in);

        

    deserialize_in_place(&s->time, in);

}




void deserialize_in_place(XrBodyJointLocationsHTC* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->combinedLocationFlags, in);

        

    deserialize_in_place(&s->confidenceLevel, in);

        

    deserialize_in_place(&s->jointLocationCount, in);

        

    deserialize_in_place_ptr(&s->jointLocations, in);

        

    deserialize_in_place(&s->skeletonGenerationId, in);

}




void deserialize_in_place(XrBodySkeletonHTC* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->jointCount, in);

        

    deserialize_in_place_ptr(&s->joints, in);

}


#endif // XRTRANSPORT_EXT_XR_HTC_body_tracking
#ifdef XRTRANSPORT_EXT_XR_EXT_active_action_set_priority


void deserialize_in_place(XrActiveActionSetPrioritiesEXT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->actionSetPriorityCount, in);

        

    deserialize_in_place_ptr(&s->actionSetPriorities, in);

}




void deserialize_in_place(XrActiveActionSetPriorityEXT* s, std::istream& in) {
        

    deserialize_in_place(&s->actionSet, in);

        

    deserialize_in_place(&s->priorityOverride, in);

}




void deserialize_in_place(XrActiveActionSetPrioritiesEXT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->actionSetPriorityCount, in);

        

    deserialize_in_place_ptr(&s->actionSetPriorities, in);

}


#endif // XRTRANSPORT_EXT_XR_EXT_active_action_set_priority
#ifdef XRTRANSPORT_EXT_XR_MNDX_force_feedback_curl


void deserialize_in_place(XrSystemForceFeedbackCurlPropertiesMNDX* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->supportsForceFeedbackCurl, in);

}




void deserialize_in_place(XrForceFeedbackCurlApplyLocationsMNDX* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->locationCount, in);

        

    deserialize_in_place_ptr(&s->locations, in);

}




void deserialize_in_place(XrForceFeedbackCurlApplyLocationMNDX* s, std::istream& in) {
        

    deserialize_in_place(&s->location, in);

        

    deserialize_in_place(&s->value, in);

}




void deserialize_in_place(XrSystemForceFeedbackCurlPropertiesMNDX* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->supportsForceFeedbackCurl, in);

}




void deserialize_in_place(XrForceFeedbackCurlApplyLocationsMNDX* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->locationCount, in);

        

    deserialize_in_place_ptr(&s->locations, in);

}


#endif // XRTRANSPORT_EXT_XR_MNDX_force_feedback_curl
#ifdef XRTRANSPORT_EXT_XR_BD_body_tracking


void deserialize_in_place(XrSystemBodyTrackingPropertiesBD* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->supportsBodyTracking, in);

}




void deserialize_in_place(XrBodyTrackerCreateInfoBD* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->jointSet, in);

}




void deserialize_in_place(XrBodyJointsLocateInfoBD* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->baseSpace, in);

        

    deserialize_in_place(&s->time, in);

}




void deserialize_in_place(XrBodyJointLocationsBD* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->allJointPosesTracked, in);

        

    deserialize_in_place(&s->jointLocationCount, in);

        

    deserialize_in_place_ptr(&s->jointLocations, in);

}




void deserialize_in_place(XrBodyJointLocationBD* s, std::istream& in) {
        

    deserialize_in_place(&s->locationFlags, in);

        

    deserialize_in_place(&s->pose, in);

}




void deserialize_in_place(XrBodyTrackerCreateInfoBD* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->jointSet, in);

}




void deserialize_in_place(XrBodyJointsLocateInfoBD* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->baseSpace, in);

        

    deserialize_in_place(&s->time, in);

}




void deserialize_in_place(XrBodyJointLocationsBD* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->allJointPosesTracked, in);

        

    deserialize_in_place(&s->jointLocationCount, in);

        

    deserialize_in_place_ptr(&s->jointLocations, in);

}




void deserialize_in_place(XrSystemBodyTrackingPropertiesBD* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->supportsBodyTracking, in);

}


#endif // XRTRANSPORT_EXT_XR_BD_body_tracking
#ifdef XRTRANSPORT_EXT_XR_BD_spatial_sensing


void deserialize_in_place(XrSystemSpatialSensingPropertiesBD* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->supportsSpatialSensing, in);

}




void deserialize_in_place(XrSpatialEntityComponentGetInfoBD* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->entityId, in);

        

    deserialize_in_place(&s->componentType, in);

}




void deserialize_in_place(XrSpatialEntityComponentDataBaseHeaderBD* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

}




void deserialize_in_place(XrSpatialEntityLocationGetInfoBD* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->baseSpace, in);

}




void deserialize_in_place(XrSpatialEntityComponentDataLocationBD* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->location, in);

}




void deserialize_in_place(XrSpatialEntityComponentDataSemanticBD* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->labelCapacityInput, in);

        

    deserialize_in_place(&s->labelCountOutput, in);

        

    deserialize_in_place_ptr(&s->labels, in);

}




void deserialize_in_place(XrSpatialEntityComponentDataBoundingBox2DBD* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->boundingBox2D, in);

}




void deserialize_in_place(XrSpatialEntityComponentDataPolygonBD* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->vertexCapacityInput, in);

        

    deserialize_in_place(&s->vertexCountOutput, in);

        

    deserialize_in_place_ptr(&s->vertices, in);

}




void deserialize_in_place(XrSpatialEntityComponentDataBoundingBox3DBD* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->boundingBox3D, in);

}




void deserialize_in_place(XrSpatialEntityComponentDataTriangleMeshBD* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->vertexCapacityInput, in);

        

    deserialize_in_place(&s->vertexCountOutput, in);

        

    deserialize_in_place_ptr(&s->vertices, in);

        

    deserialize_in_place(&s->indexCapacityInput, in);

        

    deserialize_in_place(&s->indexCountOutput, in);

        

    deserialize_in_place_ptr(&s->indices, in);

}




void deserialize_in_place(XrSenseDataProviderCreateInfoBD* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->providerType, in);

}




void deserialize_in_place(XrSenseDataProviderStartInfoBD* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

}




void deserialize_in_place(XrEventDataSenseDataProviderStateChangedBD* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->provider, in);

        

    deserialize_in_place(&s->newState, in);

}




void deserialize_in_place(XrEventDataSenseDataUpdatedBD* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->provider, in);

}




void deserialize_in_place(XrSenseDataQueryInfoBD* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

}




void deserialize_in_place(XrSenseDataQueryCompletionBD* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->futureResult, in);

        

    deserialize_in_place(&s->snapshot, in);

}




void deserialize_in_place(XrQueriedSenseDataGetInfoBD* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

}




void deserialize_in_place(XrQueriedSenseDataBD* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->stateCapacityInput, in);

        

    deserialize_in_place(&s->stateCountOutput, in);

        

    deserialize_in_place_ptr(&s->states, in);

}




void deserialize_in_place(XrSpatialEntityStateBD* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->entityId, in);

        

    deserialize_in_place(&s->lastUpdateTime, in);

        

    deserialize_in_place(&s->uuid, in);

}




void deserialize_in_place(XrSenseDataFilterUuidBD* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->uuidCount, in);

        

    deserialize_in_place_ptr(&s->uuids, in);

}




void deserialize_in_place(XrSenseDataFilterSemanticBD* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->labelCount, in);

        

    deserialize_in_place_ptr(&s->labels, in);

}




void deserialize_in_place(XrSpatialEntityAnchorCreateInfoBD* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->snapshot, in);

        

    deserialize_in_place(&s->entityId, in);

}




void deserialize_in_place(XrAnchorSpaceCreateInfoBD* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->anchor, in);

        

    deserialize_in_place(&s->poseInAnchorSpace, in);

}




void deserialize_in_place(XrSystemSpatialSensingPropertiesBD* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->supportsSpatialSensing, in);

}




void deserialize_in_place(XrSpatialEntityComponentGetInfoBD* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->entityId, in);

        

    deserialize_in_place(&s->componentType, in);

}




void deserialize_in_place(XrSpatialEntityLocationGetInfoBD* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->baseSpace, in);

}




void deserialize_in_place(XrSpatialEntityComponentDataLocationBD* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->location, in);

}




void deserialize_in_place(XrSpatialEntityComponentDataSemanticBD* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->labelCapacityInput, in);

        

    deserialize_in_place(&s->labelCountOutput, in);

        

    deserialize_in_place_ptr(&s->labels, in);

}




void deserialize_in_place(XrSpatialEntityComponentDataBoundingBox2DBD* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->boundingBox2D, in);

}




void deserialize_in_place(XrSpatialEntityComponentDataPolygonBD* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->vertexCapacityInput, in);

        

    deserialize_in_place(&s->vertexCountOutput, in);

        

    deserialize_in_place_ptr(&s->vertices, in);

}




void deserialize_in_place(XrSpatialEntityComponentDataBoundingBox3DBD* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->boundingBox3D, in);

}




void deserialize_in_place(XrSpatialEntityComponentDataTriangleMeshBD* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->vertexCapacityInput, in);

        

    deserialize_in_place(&s->vertexCountOutput, in);

        

    deserialize_in_place_ptr(&s->vertices, in);

        

    deserialize_in_place(&s->indexCapacityInput, in);

        

    deserialize_in_place(&s->indexCountOutput, in);

        

    deserialize_in_place_ptr(&s->indices, in);

}




void deserialize_in_place(XrSenseDataProviderCreateInfoBD* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->providerType, in);

}




void deserialize_in_place(XrSenseDataProviderStartInfoBD* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

}




void deserialize_in_place(XrEventDataSenseDataProviderStateChangedBD* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->provider, in);

        

    deserialize_in_place(&s->newState, in);

}




void deserialize_in_place(XrEventDataSenseDataUpdatedBD* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->provider, in);

}




void deserialize_in_place(XrSenseDataQueryInfoBD* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

}




void deserialize_in_place(XrSenseDataQueryCompletionBD* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->futureResult, in);

        

    deserialize_in_place(&s->snapshot, in);

}




void deserialize_in_place(XrSenseDataFilterUuidBD* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->uuidCount, in);

        

    deserialize_in_place_ptr(&s->uuids, in);

}




void deserialize_in_place(XrSenseDataFilterSemanticBD* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->labelCount, in);

        

    deserialize_in_place_ptr(&s->labels, in);

}




void deserialize_in_place(XrQueriedSenseDataGetInfoBD* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

}




void deserialize_in_place(XrQueriedSenseDataBD* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->stateCapacityInput, in);

        

    deserialize_in_place(&s->stateCountOutput, in);

        

    deserialize_in_place_ptr(&s->states, in);

}




void deserialize_in_place(XrSpatialEntityStateBD* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->entityId, in);

        

    deserialize_in_place(&s->lastUpdateTime, in);

        

    deserialize_in_place(&s->uuid, in);

}




void deserialize_in_place(XrSpatialEntityAnchorCreateInfoBD* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->snapshot, in);

        

    deserialize_in_place(&s->entityId, in);

}




void deserialize_in_place(XrAnchorSpaceCreateInfoBD* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->anchor, in);

        

    deserialize_in_place(&s->poseInAnchorSpace, in);

}


#endif // XRTRANSPORT_EXT_XR_BD_spatial_sensing
#ifdef XRTRANSPORT_EXT_XR_BD_spatial_anchor


void deserialize_in_place(XrSystemSpatialAnchorPropertiesBD* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->supportsSpatialAnchor, in);

}




void deserialize_in_place(XrSpatialAnchorCreateInfoBD* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->space, in);

        

    deserialize_in_place(&s->pose, in);

        

    deserialize_in_place(&s->time, in);

}




void deserialize_in_place(XrSpatialAnchorCreateCompletionBD* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->futureResult, in);

        

    deserialize_in_place(&s->anchor, in);

        

    deserialize_in_place(&s->uuid, in);

}




void deserialize_in_place(XrSpatialAnchorPersistInfoBD* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->location, in);

        

    deserialize_in_place(&s->anchor, in);

}




void deserialize_in_place(XrSpatialAnchorUnpersistInfoBD* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->location, in);

        

    deserialize_in_place(&s->anchor, in);

}




void deserialize_in_place(XrSystemSpatialAnchorPropertiesBD* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->supportsSpatialAnchor, in);

}




void deserialize_in_place(XrSpatialAnchorCreateInfoBD* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->space, in);

        

    deserialize_in_place(&s->pose, in);

        

    deserialize_in_place(&s->time, in);

}




void deserialize_in_place(XrSpatialAnchorCreateCompletionBD* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->futureResult, in);

        

    deserialize_in_place(&s->anchor, in);

        

    deserialize_in_place(&s->uuid, in);

}




void deserialize_in_place(XrSpatialAnchorPersistInfoBD* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->location, in);

        

    deserialize_in_place(&s->anchor, in);

}




void deserialize_in_place(XrSpatialAnchorUnpersistInfoBD* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->location, in);

        

    deserialize_in_place(&s->anchor, in);

}


#endif // XRTRANSPORT_EXT_XR_BD_spatial_anchor
#ifdef XRTRANSPORT_EXT_XR_BD_spatial_anchor_sharing


void deserialize_in_place(XrSystemSpatialAnchorSharingPropertiesBD* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->supportsSpatialAnchorSharing, in);

}




void deserialize_in_place(XrSpatialAnchorShareInfoBD* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->anchor, in);

}




void deserialize_in_place(XrSharedSpatialAnchorDownloadInfoBD* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->uuid, in);

}




void deserialize_in_place(XrSystemSpatialAnchorSharingPropertiesBD* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->supportsSpatialAnchorSharing, in);

}




void deserialize_in_place(XrSpatialAnchorShareInfoBD* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->anchor, in);

}




void deserialize_in_place(XrSharedSpatialAnchorDownloadInfoBD* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->uuid, in);

}


#endif // XRTRANSPORT_EXT_XR_BD_spatial_anchor_sharing
#ifdef XRTRANSPORT_EXT_XR_BD_spatial_scene


void deserialize_in_place(XrSystemSpatialScenePropertiesBD* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->supportsSpatialScene, in);

}




void deserialize_in_place(XrSceneCaptureInfoBD* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

}




void deserialize_in_place(XrSystemSpatialScenePropertiesBD* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->supportsSpatialScene, in);

}




void deserialize_in_place(XrSceneCaptureInfoBD* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

}


#endif // XRTRANSPORT_EXT_XR_BD_spatial_scene
#ifdef XRTRANSPORT_EXT_XR_BD_spatial_mesh


void deserialize_in_place(XrSystemSpatialMeshPropertiesBD* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->supportsSpatialMesh, in);

}




void deserialize_in_place(XrSenseDataProviderCreateInfoSpatialMeshBD* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->configFlags, in);

        

    deserialize_in_place(&s->lod, in);

}




void deserialize_in_place(XrSystemSpatialMeshPropertiesBD* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->supportsSpatialMesh, in);

}




void deserialize_in_place(XrSenseDataProviderCreateInfoSpatialMeshBD* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->configFlags, in);

        

    deserialize_in_place(&s->lod, in);

}


#endif // XRTRANSPORT_EXT_XR_BD_spatial_mesh
#ifdef XRTRANSPORT_EXT_XR_BD_future_progress


void deserialize_in_place(XrFuturePollResultProgressBD* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->isSupported, in);

        

    deserialize_in_place(&s->progressPercentage, in);

}




void deserialize_in_place(XrFuturePollResultProgressBD* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->isSupported, in);

        

    deserialize_in_place(&s->progressPercentage, in);

}


#endif // XRTRANSPORT_EXT_XR_BD_future_progress
#ifdef XRTRANSPORT_EXT_XR_EXT_hand_tracking_data_source


void deserialize_in_place(XrHandTrackingDataSourceInfoEXT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->requestedDataSourceCount, in);

        

    deserialize_in_place_ptr(&s->requestedDataSources, in);

}




void deserialize_in_place(XrHandTrackingDataSourceStateEXT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->isActive, in);

        

    deserialize_in_place(&s->dataSource, in);

}




void deserialize_in_place(XrHandTrackingDataSourceInfoEXT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->requestedDataSourceCount, in);

        

    deserialize_in_place_ptr(&s->requestedDataSources, in);

}




void deserialize_in_place(XrHandTrackingDataSourceStateEXT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->isActive, in);

        

    deserialize_in_place(&s->dataSource, in);

}


#endif // XRTRANSPORT_EXT_XR_EXT_hand_tracking_data_source
#ifdef XRTRANSPORT_EXT_XR_EXT_plane_detection


void deserialize_in_place(XrSystemPlaneDetectionPropertiesEXT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->supportedFeatures, in);

}




void deserialize_in_place(XrPlaneDetectorCreateInfoEXT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->flags, in);

}




void deserialize_in_place(XrPlaneDetectorBeginInfoEXT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->baseSpace, in);

        

    deserialize_in_place(&s->time, in);

        

    deserialize_in_place(&s->orientationCount, in);

        

    deserialize_in_place_ptr(&s->orientations, in);

        

    deserialize_in_place(&s->semanticTypeCount, in);

        

    deserialize_in_place_ptr(&s->semanticTypes, in);

        

    deserialize_in_place(&s->maxPlanes, in);

        

    deserialize_in_place(&s->minArea, in);

        

    deserialize_in_place(&s->boundingBoxPose, in);

        

    deserialize_in_place(&s->boundingBoxExtent, in);

}




void deserialize_in_place(XrPlaneDetectorGetInfoEXT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->baseSpace, in);

        

    deserialize_in_place(&s->time, in);

}




void deserialize_in_place(XrPlaneDetectorLocationEXT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->planeId, in);

        

    deserialize_in_place(&s->locationFlags, in);

        

    deserialize_in_place(&s->pose, in);

        

    deserialize_in_place(&s->extents, in);

        

    deserialize_in_place(&s->orientation, in);

        

    deserialize_in_place(&s->semanticType, in);

        

    deserialize_in_place(&s->polygonBufferCount, in);

}




void deserialize_in_place(XrPlaneDetectorLocationsEXT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->planeLocationCapacityInput, in);

        

    deserialize_in_place(&s->planeLocationCountOutput, in);

        

    deserialize_in_place_ptr(&s->planeLocations, in);

}




void deserialize_in_place(XrPlaneDetectorPolygonBufferEXT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->vertexCapacityInput, in);

        

    deserialize_in_place(&s->vertexCountOutput, in);

        

    deserialize_in_place_ptr(&s->vertices, in);

}




void deserialize_in_place(XrPlaneDetectorCreateInfoEXT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->flags, in);

}




void deserialize_in_place(XrPlaneDetectorBeginInfoEXT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->baseSpace, in);

        

    deserialize_in_place(&s->time, in);

        

    deserialize_in_place(&s->orientationCount, in);

        

    deserialize_in_place_ptr(&s->orientations, in);

        

    deserialize_in_place(&s->semanticTypeCount, in);

        

    deserialize_in_place_ptr(&s->semanticTypes, in);

        

    deserialize_in_place(&s->maxPlanes, in);

        

    deserialize_in_place(&s->minArea, in);

        

    deserialize_in_place(&s->boundingBoxPose, in);

        

    deserialize_in_place(&s->boundingBoxExtent, in);

}




void deserialize_in_place(XrPlaneDetectorGetInfoEXT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->baseSpace, in);

        

    deserialize_in_place(&s->time, in);

}




void deserialize_in_place(XrPlaneDetectorLocationsEXT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->planeLocationCapacityInput, in);

        

    deserialize_in_place(&s->planeLocationCountOutput, in);

        

    deserialize_in_place_ptr(&s->planeLocations, in);

}




void deserialize_in_place(XrPlaneDetectorLocationEXT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->planeId, in);

        

    deserialize_in_place(&s->locationFlags, in);

        

    deserialize_in_place(&s->pose, in);

        

    deserialize_in_place(&s->extents, in);

        

    deserialize_in_place(&s->orientation, in);

        

    deserialize_in_place(&s->semanticType, in);

        

    deserialize_in_place(&s->polygonBufferCount, in);

}




void deserialize_in_place(XrPlaneDetectorPolygonBufferEXT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->vertexCapacityInput, in);

        

    deserialize_in_place(&s->vertexCountOutput, in);

        

    deserialize_in_place_ptr(&s->vertices, in);

}




void deserialize_in_place(XrSystemPlaneDetectionPropertiesEXT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->supportedFeatures, in);

}


#endif // XRTRANSPORT_EXT_XR_EXT_plane_detection
#ifdef XRTRANSPORT_EXT_XR_EXT_future


void deserialize_in_place(XrFutureCancelInfoEXT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->future, in);

}




void deserialize_in_place(XrFuturePollInfoEXT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->future, in);

}




void deserialize_in_place(XrFutureCompletionBaseHeaderEXT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->futureResult, in);

}




void deserialize_in_place(XrFutureCompletionEXT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->futureResult, in);

}




void deserialize_in_place(XrFuturePollResultEXT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->state, in);

}




void deserialize_in_place(XrFutureCancelInfoEXT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->future, in);

}




void deserialize_in_place(XrFuturePollInfoEXT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->future, in);

}




void deserialize_in_place(XrFutureCompletionEXT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->futureResult, in);

}




void deserialize_in_place(XrFuturePollResultEXT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->state, in);

}


#endif // XRTRANSPORT_EXT_XR_EXT_future
#ifdef XRTRANSPORT_EXT_XR_EXT_user_presence


void deserialize_in_place(XrEventDataUserPresenceChangedEXT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->session, in);

        

    deserialize_in_place(&s->isUserPresent, in);

}




void deserialize_in_place(XrSystemUserPresencePropertiesEXT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->supportsUserPresence, in);

}




void deserialize_in_place(XrEventDataUserPresenceChangedEXT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->session, in);

        

    deserialize_in_place(&s->isUserPresent, in);

}




void deserialize_in_place(XrSystemUserPresencePropertiesEXT* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->supportsUserPresence, in);

}


#endif // XRTRANSPORT_EXT_XR_EXT_user_presence
#ifdef XRTRANSPORT_EXT_XR_ML_system_notifications


void deserialize_in_place(XrSystemNotificationsSetInfoML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->suppressNotifications, in);

}




void deserialize_in_place(XrSystemNotificationsSetInfoML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->suppressNotifications, in);

}


#endif // XRTRANSPORT_EXT_XR_ML_system_notifications
#ifdef XRTRANSPORT_EXT_XR_ML_world_mesh_detection


void deserialize_in_place(XrWorldMeshDetectorCreateInfoML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

}




void deserialize_in_place(XrWorldMeshBlockStateML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->uuid, in);

        

    deserialize_in_place(&s->meshBoundingBoxCenter, in);

        

    deserialize_in_place(&s->meshBoundingBoxExtents, in);

        

    deserialize_in_place(&s->lastUpdateTime, in);

        

    deserialize_in_place(&s->status, in);

}




void deserialize_in_place(XrWorldMeshStateRequestInfoML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->baseSpace, in);

        

    deserialize_in_place(&s->time, in);

        

    deserialize_in_place(&s->boundingBoxCenter, in);

        

    deserialize_in_place(&s->boundingBoxExtents, in);

}




void deserialize_in_place(XrWorldMeshStateRequestCompletionML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->futureResult, in);

        

    deserialize_in_place(&s->timestamp, in);

        

    deserialize_in_place(&s->meshBlockStateCapacityInput, in);

        

    deserialize_in_place(&s->meshBlockStateCountOutput, in);

        

    deserialize_in_place_ptr(&s->meshBlockStates, in);

}




void deserialize_in_place(XrWorldMeshBufferRecommendedSizeInfoML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->maxBlockCount, in);

}




void deserialize_in_place(XrWorldMeshBufferSizeML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->size, in);

}




void deserialize_in_place(XrWorldMeshBufferML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->bufferSize, in);

        

    deserialize_in_place_ptr(&s->buffer, in);

}




void deserialize_in_place(XrWorldMeshBlockRequestML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->uuid, in);

        

    deserialize_in_place(&s->lod, in);

}




void deserialize_in_place(XrWorldMeshGetInfoML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->flags, in);

        

    deserialize_in_place(&s->fillHoleLength, in);

        

    deserialize_in_place(&s->disconnectedComponentArea, in);

        

    deserialize_in_place(&s->blockCount, in);

        

    deserialize_in_place_ptr(&s->blocks, in);

}




void deserialize_in_place(XrWorldMeshBlockML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->uuid, in);

        

    deserialize_in_place(&s->blockResult, in);

        

    deserialize_in_place(&s->lod, in);

        

    deserialize_in_place(&s->flags, in);

        

    deserialize_in_place(&s->indexCount, in);

        

    deserialize_in_place_ptr(&s->indexBuffer, in);

        

    deserialize_in_place(&s->vertexCount, in);

        

    deserialize_in_place_ptr(&s->vertexBuffer, in);

        

    deserialize_in_place(&s->normalCount, in);

        

    deserialize_in_place_ptr(&s->normalBuffer, in);

        

    deserialize_in_place(&s->confidenceCount, in);

        

    deserialize_in_place_ptr(&s->confidenceBuffer, in);

}




void deserialize_in_place(XrWorldMeshRequestCompletionInfoML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->meshSpace, in);

        

    deserialize_in_place(&s->meshSpaceLocateTime, in);

}




void deserialize_in_place(XrWorldMeshRequestCompletionML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->futureResult, in);

        

    deserialize_in_place(&s->blockCount, in);

        

    deserialize_in_place_ptr(&s->blocks, in);

}




void deserialize_in_place(XrWorldMeshDetectorCreateInfoML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

}




void deserialize_in_place(XrWorldMeshStateRequestInfoML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->baseSpace, in);

        

    deserialize_in_place(&s->time, in);

        

    deserialize_in_place(&s->boundingBoxCenter, in);

        

    deserialize_in_place(&s->boundingBoxExtents, in);

}




void deserialize_in_place(XrWorldMeshBlockStateML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->uuid, in);

        

    deserialize_in_place(&s->meshBoundingBoxCenter, in);

        

    deserialize_in_place(&s->meshBoundingBoxExtents, in);

        

    deserialize_in_place(&s->lastUpdateTime, in);

        

    deserialize_in_place(&s->status, in);

}




void deserialize_in_place(XrWorldMeshStateRequestCompletionML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->futureResult, in);

        

    deserialize_in_place(&s->timestamp, in);

        

    deserialize_in_place(&s->meshBlockStateCapacityInput, in);

        

    deserialize_in_place(&s->meshBlockStateCountOutput, in);

        

    deserialize_in_place_ptr(&s->meshBlockStates, in);

}




void deserialize_in_place(XrWorldMeshBufferRecommendedSizeInfoML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->maxBlockCount, in);

}




void deserialize_in_place(XrWorldMeshBufferSizeML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->size, in);

}




void deserialize_in_place(XrWorldMeshBufferML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->bufferSize, in);

        

    deserialize_in_place_ptr(&s->buffer, in);

}




void deserialize_in_place(XrWorldMeshBlockRequestML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->uuid, in);

        

    deserialize_in_place(&s->lod, in);

}




void deserialize_in_place(XrWorldMeshGetInfoML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->flags, in);

        

    deserialize_in_place(&s->fillHoleLength, in);

        

    deserialize_in_place(&s->disconnectedComponentArea, in);

        

    deserialize_in_place(&s->blockCount, in);

        

    deserialize_in_place_ptr(&s->blocks, in);

}




void deserialize_in_place(XrWorldMeshBlockML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->uuid, in);

        

    deserialize_in_place(&s->blockResult, in);

        

    deserialize_in_place(&s->lod, in);

        

    deserialize_in_place(&s->flags, in);

        

    deserialize_in_place(&s->indexCount, in);

        

    deserialize_in_place_ptr(&s->indexBuffer, in);

        

    deserialize_in_place(&s->vertexCount, in);

        

    deserialize_in_place_ptr(&s->vertexBuffer, in);

        

    deserialize_in_place(&s->normalCount, in);

        

    deserialize_in_place_ptr(&s->normalBuffer, in);

        

    deserialize_in_place(&s->confidenceCount, in);

        

    deserialize_in_place_ptr(&s->confidenceBuffer, in);

}




void deserialize_in_place(XrWorldMeshRequestCompletionML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->futureResult, in);

        

    deserialize_in_place(&s->blockCount, in);

        

    deserialize_in_place_ptr(&s->blocks, in);

}




void deserialize_in_place(XrWorldMeshRequestCompletionInfoML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->meshSpace, in);

        

    deserialize_in_place(&s->meshSpaceLocateTime, in);

}


#endif // XRTRANSPORT_EXT_XR_ML_world_mesh_detection
#ifdef XRTRANSPORT_EXT_XR_ML_facial_expression


void deserialize_in_place(XrSystemFacialExpressionPropertiesML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->supportsFacialExpression, in);

}




void deserialize_in_place(XrFacialExpressionClientCreateInfoML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->requestedCount, in);

        

    deserialize_in_place_ptr(&s->requestedFacialBlendShapes, in);

}




void deserialize_in_place(XrFacialExpressionBlendShapeGetInfoML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

}




void deserialize_in_place(XrFacialExpressionBlendShapePropertiesML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->requestedFacialBlendShape, in);

        

    deserialize_in_place(&s->weight, in);

        

    deserialize_in_place(&s->flags, in);

        

    deserialize_in_place(&s->time, in);

}




void deserialize_in_place(XrSystemFacialExpressionPropertiesML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->supportsFacialExpression, in);

}




void deserialize_in_place(XrFacialExpressionClientCreateInfoML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->requestedCount, in);

        

    deserialize_in_place_ptr(&s->requestedFacialBlendShapes, in);

}




void deserialize_in_place(XrFacialExpressionBlendShapeGetInfoML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

}




void deserialize_in_place(XrFacialExpressionBlendShapePropertiesML* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->requestedFacialBlendShape, in);

        

    deserialize_in_place(&s->weight, in);

        

    deserialize_in_place(&s->flags, in);

        

    deserialize_in_place(&s->time, in);

}


#endif // XRTRANSPORT_EXT_XR_ML_facial_expression
#ifdef XRTRANSPORT_EXT_XR_META_simultaneous_hands_and_controllers


void deserialize_in_place(XrSystemSimultaneousHandsAndControllersPropertiesMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->supportsSimultaneousHandsAndControllers, in);

}




void deserialize_in_place(XrSimultaneousHandsAndControllersTrackingResumeInfoMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

}




void deserialize_in_place(XrSimultaneousHandsAndControllersTrackingPauseInfoMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

}




void deserialize_in_place(XrSystemSimultaneousHandsAndControllersPropertiesMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->supportsSimultaneousHandsAndControllers, in);

}




void deserialize_in_place(XrSimultaneousHandsAndControllersTrackingResumeInfoMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

}




void deserialize_in_place(XrSimultaneousHandsAndControllersTrackingPauseInfoMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

}


#endif // XRTRANSPORT_EXT_XR_META_simultaneous_hands_and_controllers
#ifdef XRTRANSPORT_EXT_XR_META_colocation_discovery


void deserialize_in_place(XrColocationDiscoveryStartInfoMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

}




void deserialize_in_place(XrColocationDiscoveryStopInfoMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

}




void deserialize_in_place(XrColocationAdvertisementStartInfoMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->bufferSize, in);

        

    deserialize_in_place_ptr(&s->buffer, in);

}




void deserialize_in_place(XrColocationAdvertisementStopInfoMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

}




void deserialize_in_place(XrEventDataStartColocationAdvertisementCompleteMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->advertisementRequestId, in);

        

    deserialize_in_place(&s->result, in);

        

    deserialize_in_place(&s->advertisementUuid, in);

}




void deserialize_in_place(XrEventDataStopColocationAdvertisementCompleteMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->requestId, in);

        

    deserialize_in_place(&s->result, in);

}




void deserialize_in_place(XrEventDataColocationAdvertisementCompleteMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->advertisementRequestId, in);

        

    deserialize_in_place(&s->result, in);

}




void deserialize_in_place(XrEventDataStartColocationDiscoveryCompleteMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->discoveryRequestId, in);

        

    deserialize_in_place(&s->result, in);

}




void deserialize_in_place(XrEventDataColocationDiscoveryResultMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->discoveryRequestId, in);

        

    deserialize_in_place(&s->advertisementUuid, in);

        

    deserialize_in_place(&s->bufferSize, in);

        

    deserialize_in_place_array(s->buffer, XR_MAX_COLOCATION_DISCOVERY_BUFFER_SIZE_META, in);

}




void deserialize_in_place(XrEventDataColocationDiscoveryCompleteMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->discoveryRequestId, in);

        

    deserialize_in_place(&s->result, in);

}




void deserialize_in_place(XrEventDataStopColocationDiscoveryCompleteMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->requestId, in);

        

    deserialize_in_place(&s->result, in);

}




void deserialize_in_place(XrSystemColocationDiscoveryPropertiesMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->supportsColocationDiscovery, in);

}




void deserialize_in_place(XrColocationDiscoveryStartInfoMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

}




void deserialize_in_place(XrColocationDiscoveryStopInfoMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

}




void deserialize_in_place(XrColocationAdvertisementStartInfoMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->bufferSize, in);

        

    deserialize_in_place_ptr(&s->buffer, in);

}




void deserialize_in_place(XrColocationAdvertisementStopInfoMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

}




void deserialize_in_place(XrEventDataStartColocationAdvertisementCompleteMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->advertisementRequestId, in);

        

    deserialize_in_place(&s->result, in);

        

    deserialize_in_place(&s->advertisementUuid, in);

}




void deserialize_in_place(XrEventDataStopColocationAdvertisementCompleteMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->requestId, in);

        

    deserialize_in_place(&s->result, in);

}




void deserialize_in_place(XrEventDataColocationAdvertisementCompleteMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->advertisementRequestId, in);

        

    deserialize_in_place(&s->result, in);

}




void deserialize_in_place(XrEventDataStartColocationDiscoveryCompleteMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->discoveryRequestId, in);

        

    deserialize_in_place(&s->result, in);

}




void deserialize_in_place(XrEventDataColocationDiscoveryResultMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->discoveryRequestId, in);

        

    deserialize_in_place(&s->advertisementUuid, in);

        

    deserialize_in_place(&s->bufferSize, in);

        

    deserialize_in_place_array(s->buffer, XR_MAX_COLOCATION_DISCOVERY_BUFFER_SIZE_META, in);

}




void deserialize_in_place(XrEventDataColocationDiscoveryCompleteMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->discoveryRequestId, in);

        

    deserialize_in_place(&s->result, in);

}




void deserialize_in_place(XrEventDataStopColocationDiscoveryCompleteMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->requestId, in);

        

    deserialize_in_place(&s->result, in);

}




void deserialize_in_place(XrSystemColocationDiscoveryPropertiesMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->supportsColocationDiscovery, in);

}


#endif // XRTRANSPORT_EXT_XR_META_colocation_discovery
#ifdef XRTRANSPORT_EXT_XR_META_spatial_entity_group_sharing


void deserialize_in_place(XrSystemSpatialEntityGroupSharingPropertiesMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->supportsSpatialEntityGroupSharing, in);

}




void deserialize_in_place(XrShareSpacesRecipientGroupsMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->groupCount, in);

        

    deserialize_in_place_ptr(&s->groups, in);

}




void deserialize_in_place(XrSpaceGroupUuidFilterInfoMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->groupUuid, in);

}




void deserialize_in_place(XrShareSpacesRecipientGroupsMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->groupCount, in);

        

    deserialize_in_place_ptr(&s->groups, in);

}




void deserialize_in_place(XrSpaceGroupUuidFilterInfoMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->groupUuid, in);

}




void deserialize_in_place(XrSystemSpatialEntityGroupSharingPropertiesMETA* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->supportsSpatialEntityGroupSharing, in);

}


#endif // XRTRANSPORT_EXT_XR_META_spatial_entity_group_sharing


void deserialize_in_place(XrActionCreateInfo* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place_array(s->actionName, XR_MAX_ACTION_NAME_SIZE, in);

        

    deserialize_in_place(&s->actionType, in);

        

    deserialize_in_place(&s->countSubactionPaths, in);

        

    deserialize_in_place_ptr(&s->subactionPaths, in);

        

    deserialize_in_place_array(s->localizedActionName, XR_MAX_LOCALIZED_ACTION_NAME_SIZE, in);

}




void deserialize_in_place(XrActionSetCreateInfo* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place_array(s->actionSetName, XR_MAX_ACTION_SET_NAME_SIZE, in);

        

    deserialize_in_place_array(s->localizedActionSetName, XR_MAX_LOCALIZED_ACTION_SET_NAME_SIZE, in);

        

    deserialize_in_place(&s->priority, in);

}




void deserialize_in_place(XrActionSpaceCreateInfo* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->action, in);

        

    deserialize_in_place(&s->subactionPath, in);

        

    deserialize_in_place(&s->poseInActionSpace, in);

}




void deserialize_in_place(XrActionStateBoolean* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->currentState, in);

        

    deserialize_in_place(&s->changedSinceLastSync, in);

        

    deserialize_in_place(&s->lastChangeTime, in);

        

    deserialize_in_place(&s->isActive, in);

}




void deserialize_in_place(XrActionStateFloat* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->currentState, in);

        

    deserialize_in_place(&s->changedSinceLastSync, in);

        

    deserialize_in_place(&s->lastChangeTime, in);

        

    deserialize_in_place(&s->isActive, in);

}




void deserialize_in_place(XrActionStateGetInfo* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->action, in);

        

    deserialize_in_place(&s->subactionPath, in);

}




void deserialize_in_place(XrActionStatePose* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->isActive, in);

}




void deserialize_in_place(XrActionStateVector2f* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->currentState, in);

        

    deserialize_in_place(&s->changedSinceLastSync, in);

        

    deserialize_in_place(&s->lastChangeTime, in);

        

    deserialize_in_place(&s->isActive, in);

}




void deserialize_in_place(XrActionSuggestedBinding* s, std::istream& in) {
        

    deserialize_in_place(&s->action, in);

        

    deserialize_in_place(&s->binding, in);

}




void deserialize_in_place(XrActionsSyncInfo* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->countActiveActionSets, in);

        

    deserialize_in_place_ptr(&s->activeActionSets, in);

}




void deserialize_in_place(XrActiveActionSet* s, std::istream& in) {
        

    deserialize_in_place(&s->actionSet, in);

        

    deserialize_in_place(&s->subactionPath, in);

}




void deserialize_in_place(XrApiLayerProperties* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place_array(s->layerName, XR_MAX_API_LAYER_NAME_SIZE, in);

        

    deserialize_in_place(&s->specVersion, in);

        

    deserialize_in_place(&s->layerVersion, in);

        

    deserialize_in_place_array(s->description, XR_MAX_API_LAYER_DESCRIPTION_SIZE, in);

}




void deserialize_in_place(XrApplicationInfo* s, std::istream& in) {
        

    deserialize_in_place_array(s->applicationName, XR_MAX_APPLICATION_NAME_SIZE, in);

        

    deserialize_in_place(&s->applicationVersion, in);

        

    deserialize_in_place_array(s->engineName, XR_MAX_ENGINE_NAME_SIZE, in);

        

    deserialize_in_place(&s->engineVersion, in);

        

    deserialize_in_place(&s->apiVersion, in);

}




void deserialize_in_place(XrBodySkeletonJointHTC* s, std::istream& in) {
        

    deserialize_in_place(&s->pose, in);

}




void deserialize_in_place(XrBoundSourcesForActionEnumerateInfo* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->action, in);

}




void deserialize_in_place(XrBoxf* s, std::istream& in) {
        

    deserialize_in_place(&s->center, in);

        

    deserialize_in_place(&s->extents, in);

}




void deserialize_in_place(XrColor3f* s, std::istream& in) {
        

    deserialize_in_place(&s->r, in);

        

    deserialize_in_place(&s->g, in);

        

    deserialize_in_place(&s->b, in);

}




void deserialize_in_place(XrColor4f* s, std::istream& in) {
        

    deserialize_in_place(&s->r, in);

        

    deserialize_in_place(&s->g, in);

        

    deserialize_in_place(&s->b, in);

        

    deserialize_in_place(&s->a, in);

}




void deserialize_in_place(XrCompositionLayerBaseHeader* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->layerFlags, in);

        

    deserialize_in_place(&s->space, in);

}




void deserialize_in_place(XrCompositionLayerProjection* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->layerFlags, in);

        

    deserialize_in_place(&s->space, in);

        

    deserialize_in_place(&s->viewCount, in);

        

    deserialize_in_place_ptr(&s->views, in);

}




void deserialize_in_place(XrCompositionLayerProjectionView* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->pose, in);

        

    deserialize_in_place(&s->fov, in);

        

    deserialize_in_place(&s->subImage, in);

}




void deserialize_in_place(XrCompositionLayerQuad* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->layerFlags, in);

        

    deserialize_in_place(&s->space, in);

        

    deserialize_in_place(&s->eyeVisibility, in);

        

    deserialize_in_place(&s->subImage, in);

        

    deserialize_in_place(&s->pose, in);

        

    deserialize_in_place(&s->size, in);

}




void deserialize_in_place(XrEventDataBaseHeader* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

}




void deserialize_in_place(XrEventDataBuffer* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place_array(s->varying, 4000, in);

}




void deserialize_in_place(XrEventDataEventsLost* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->lostEventCount, in);

}




void deserialize_in_place(XrEventDataInstanceLossPending* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->lossTime, in);

}




void deserialize_in_place(XrEventDataInteractionProfileChanged* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->session, in);

}




void deserialize_in_place(XrEventDataReferenceSpaceChangePending* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->session, in);

        

    deserialize_in_place(&s->referenceSpaceType, in);

        

    deserialize_in_place(&s->changeTime, in);

        

    deserialize_in_place(&s->poseValid, in);

        

    deserialize_in_place(&s->poseInPreviousSpace, in);

}




void deserialize_in_place(XrEventDataSessionStateChanged* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->session, in);

        

    deserialize_in_place(&s->state, in);

        

    deserialize_in_place(&s->time, in);

}




void deserialize_in_place(XrExtensionProperties* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place_array(s->extensionName, XR_MAX_EXTENSION_NAME_SIZE, in);

        

    deserialize_in_place(&s->extensionVersion, in);

}




void deserialize_in_place(XrExtent2Df* s, std::istream& in) {
        

    deserialize_in_place(&s->width, in);

        

    deserialize_in_place(&s->height, in);

}




void deserialize_in_place(XrExtent2Di* s, std::istream& in) {
        

    deserialize_in_place(&s->width, in);

        

    deserialize_in_place(&s->height, in);

}




void deserialize_in_place(XrExtent3Df* s, std::istream& in) {
        

    deserialize_in_place(&s->width, in);

        

    deserialize_in_place(&s->height, in);

        

    deserialize_in_place(&s->depth, in);

}




void deserialize_in_place(XrFovf* s, std::istream& in) {
        

    deserialize_in_place(&s->angleLeft, in);

        

    deserialize_in_place(&s->angleRight, in);

        

    deserialize_in_place(&s->angleUp, in);

        

    deserialize_in_place(&s->angleDown, in);

}




void deserialize_in_place(XrFrameBeginInfo* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

}






void deserialize_in_place(XrFrameState* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->predictedDisplayTime, in);

        

    deserialize_in_place(&s->predictedDisplayPeriod, in);

        

    deserialize_in_place(&s->shouldRender, in);

}




void deserialize_in_place(XrFrameWaitInfo* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

}




void deserialize_in_place(XrFrustumf* s, std::istream& in) {
        

    deserialize_in_place(&s->pose, in);

        

    deserialize_in_place(&s->fov, in);

        

    deserialize_in_place(&s->nearZ, in);

        

    deserialize_in_place(&s->farZ, in);

}




void deserialize_in_place(XrHapticActionInfo* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->action, in);

        

    deserialize_in_place(&s->subactionPath, in);

}




void deserialize_in_place(XrHapticBaseHeader* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

}




void deserialize_in_place(XrHapticVibration* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->duration, in);

        

    deserialize_in_place(&s->frequency, in);

        

    deserialize_in_place(&s->amplitude, in);

}




void deserialize_in_place(XrInputSourceLocalizedNameGetInfo* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->sourcePath, in);

        

    deserialize_in_place(&s->whichComponents, in);

}






void deserialize_in_place(XrInstanceProperties* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->runtimeVersion, in);

        

    deserialize_in_place_array(s->runtimeName, XR_MAX_RUNTIME_NAME_SIZE, in);

}




void deserialize_in_place(XrInteractionProfileState* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->interactionProfile, in);

}




void deserialize_in_place(XrInteractionProfileSuggestedBinding* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->interactionProfile, in);

        

    deserialize_in_place(&s->countSuggestedBindings, in);

        

    deserialize_in_place_ptr(&s->suggestedBindings, in);

}




void deserialize_in_place(XrOffset2Df* s, std::istream& in) {
        

    deserialize_in_place(&s->x, in);

        

    deserialize_in_place(&s->y, in);

}




void deserialize_in_place(XrOffset2Di* s, std::istream& in) {
        

    deserialize_in_place(&s->x, in);

        

    deserialize_in_place(&s->y, in);

}




void deserialize_in_place(XrPosef* s, std::istream& in) {
        

    deserialize_in_place(&s->orientation, in);

        

    deserialize_in_place(&s->position, in);

}




void deserialize_in_place(XrQuaternionf* s, std::istream& in) {
        

    deserialize_in_place(&s->x, in);

        

    deserialize_in_place(&s->y, in);

        

    deserialize_in_place(&s->z, in);

        

    deserialize_in_place(&s->w, in);

}




void deserialize_in_place(XrRect2Df* s, std::istream& in) {
        

    deserialize_in_place(&s->offset, in);

        

    deserialize_in_place(&s->extent, in);

}




void deserialize_in_place(XrRect2Di* s, std::istream& in) {
        

    deserialize_in_place(&s->offset, in);

        

    deserialize_in_place(&s->extent, in);

}




void deserialize_in_place(XrReferenceSpaceCreateInfo* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->referenceSpaceType, in);

        

    deserialize_in_place(&s->poseInReferenceSpace, in);

}




void deserialize_in_place(XrSessionActionSetsAttachInfo* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->countActionSets, in);

        

    deserialize_in_place_ptr(&s->actionSets, in);

}




void deserialize_in_place(XrSessionBeginInfo* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->primaryViewConfigurationType, in);

}




void deserialize_in_place(XrSessionCreateInfo* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->createFlags, in);

        

    deserialize_in_place(&s->systemId, in);

}




void deserialize_in_place(XrSpaceLocation* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->locationFlags, in);

        

    deserialize_in_place(&s->pose, in);

}




void deserialize_in_place(XrSpaceLocationData* s, std::istream& in) {
        

    deserialize_in_place(&s->locationFlags, in);

        

    deserialize_in_place(&s->pose, in);

}




void deserialize_in_place(XrSpaceLocations* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->locationCount, in);

        

    deserialize_in_place_ptr(&s->locations, in);

}




void deserialize_in_place(XrSpaceVelocities* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->velocityCount, in);

        

    deserialize_in_place_ptr(&s->velocities, in);

}




void deserialize_in_place(XrSpaceVelocity* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->velocityFlags, in);

        

    deserialize_in_place(&s->linearVelocity, in);

        

    deserialize_in_place(&s->angularVelocity, in);

}




void deserialize_in_place(XrSpaceVelocityData* s, std::istream& in) {
        

    deserialize_in_place(&s->velocityFlags, in);

        

    deserialize_in_place(&s->linearVelocity, in);

        

    deserialize_in_place(&s->angularVelocity, in);

}




void deserialize_in_place(XrSpacesLocateInfo* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->baseSpace, in);

        

    deserialize_in_place(&s->time, in);

        

    deserialize_in_place(&s->spaceCount, in);

        

    deserialize_in_place_ptr(&s->spaces, in);

}




void deserialize_in_place(XrSpheref* s, std::istream& in) {
        

    deserialize_in_place(&s->center, in);

        

    deserialize_in_place(&s->radius, in);

}




void deserialize_in_place(XrSwapchainCreateInfo* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->createFlags, in);

        

    deserialize_in_place(&s->usageFlags, in);

        

    deserialize_in_place(&s->format, in);

        

    deserialize_in_place(&s->sampleCount, in);

        

    deserialize_in_place(&s->width, in);

        

    deserialize_in_place(&s->height, in);

        

    deserialize_in_place(&s->faceCount, in);

        

    deserialize_in_place(&s->arraySize, in);

        

    deserialize_in_place(&s->mipCount, in);

}




void deserialize_in_place(XrSwapchainImageAcquireInfo* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

}




void deserialize_in_place(XrSwapchainImageBaseHeader* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

}




void deserialize_in_place(XrSwapchainImageReleaseInfo* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

}




void deserialize_in_place(XrSwapchainImageWaitInfo* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->timeout, in);

}




void deserialize_in_place(XrSwapchainSubImage* s, std::istream& in) {
        

    deserialize_in_place(&s->swapchain, in);

        

    deserialize_in_place(&s->imageRect, in);

        

    deserialize_in_place(&s->imageArrayIndex, in);

}




void deserialize_in_place(XrSystemGetInfo* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->formFactor, in);

}




void deserialize_in_place(XrSystemGraphicsProperties* s, std::istream& in) {
        

    deserialize_in_place(&s->maxSwapchainImageHeight, in);

        

    deserialize_in_place(&s->maxSwapchainImageWidth, in);

        

    deserialize_in_place(&s->maxLayerCount, in);

}




void deserialize_in_place(XrSystemProperties* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->systemId, in);

        

    deserialize_in_place(&s->vendorId, in);

        

    deserialize_in_place_array(s->systemName, XR_MAX_SYSTEM_NAME_SIZE, in);

        

    deserialize_in_place(&s->graphicsProperties, in);

        

    deserialize_in_place(&s->trackingProperties, in);

}




void deserialize_in_place(XrSystemTrackingProperties* s, std::istream& in) {
        

    deserialize_in_place(&s->orientationTracking, in);

        

    deserialize_in_place(&s->positionTracking, in);

}




void deserialize_in_place(XrUuid* s, std::istream& in) {
        

    deserialize_in_place_array(s->data, XR_UUID_SIZE, in);

}




void deserialize_in_place(XrVector2f* s, std::istream& in) {
        

    deserialize_in_place(&s->x, in);

        

    deserialize_in_place(&s->y, in);

}




void deserialize_in_place(XrVector3f* s, std::istream& in) {
        

    deserialize_in_place(&s->x, in);

        

    deserialize_in_place(&s->y, in);

        

    deserialize_in_place(&s->z, in);

}




void deserialize_in_place(XrVector4f* s, std::istream& in) {
        

    deserialize_in_place(&s->x, in);

        

    deserialize_in_place(&s->y, in);

        

    deserialize_in_place(&s->z, in);

        

    deserialize_in_place(&s->w, in);

}




void deserialize_in_place(XrView* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->pose, in);

        

    deserialize_in_place(&s->fov, in);

}




void deserialize_in_place(XrViewConfigurationProperties* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->viewConfigurationType, in);

        

    deserialize_in_place(&s->fovMutable, in);

}




void deserialize_in_place(XrViewConfigurationView* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->recommendedImageRectWidth, in);

        

    deserialize_in_place(&s->maxImageRectWidth, in);

        

    deserialize_in_place(&s->recommendedImageRectHeight, in);

        

    deserialize_in_place(&s->maxImageRectHeight, in);

        

    deserialize_in_place(&s->recommendedSwapchainSampleCount, in);

        

    deserialize_in_place(&s->maxSwapchainSampleCount, in);

}




void deserialize_in_place(XrViewLocateInfo* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->viewConfigurationType, in);

        

    deserialize_in_place(&s->displayTime, in);

        

    deserialize_in_place(&s->space, in);

}




void deserialize_in_place(XrViewState* s, std::istream& in) {
        

    deserialize_in_place(&s->type, in);

        

    deserialize_in_place_xr(&s->next, in);

        

    deserialize_in_place(&s->viewStateFlags, in);

}




} // namespace xrtransport