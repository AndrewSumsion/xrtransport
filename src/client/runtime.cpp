/*
 * AUTO-GENERATED FILE - DO NOT EDIT DIRECTLY
 *
 * This file was automatically generated by the code_generation module.
 * Any changes made to this file will be lost when regenerated.
 *
 * To modify this file, edit the corresponding template in:
 * code_generation/templates/client/runtime_impl.mako
 */

#include "runtime.h"

#include "xrtransport/transport/transport.h"
#include "xrtransport/serialization/serializer.h"
#include "xrtransport/serialization/deserializer.h"
#include "xrtransport/util.h"

#include "openxr/openxr.h"

#include <spdlog/spdlog.h>
#include <stdexcept>

namespace xrtransport {


#ifdef XRTRANSPORT_EXT_XR_KHR_android_thread_settings

XRAPI_ATTR XrResult XRAPI_CALL xrSetAndroidApplicationThreadKHR(XrSession session, XrAndroidThreadTypeKHR threadType, uint32_t threadId) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 75001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize(&threadType, msg_out.stream);

    

    serialize(&threadId, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrSetAndroidApplicationThreadKHR: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_KHR_android_thread_settings
#ifdef XRTRANSPORT_EXT_XR_KHR_android_surface_swapchain

XRAPI_ATTR XrResult XRAPI_CALL xrCreateSwapchainAndroidSurfaceKHR(XrSession session, const XrSwapchainCreateInfo* info, XrSwapchain* swapchain, jobject* surface) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 74001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(info, 1, msg_out.stream);

    

    serialize_ptr(swapchain, 1, msg_out.stream);

    

    serialize_ptr(surface, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&swapchain, msg_in.stream, true);

    
    deserialize_ptr(&surface, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrCreateSwapchainAndroidSurfaceKHR: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_KHR_android_surface_swapchain
#ifdef XRTRANSPORT_EXT_XR_KHR_composition_layer_cube
#endif // XRTRANSPORT_EXT_XR_KHR_composition_layer_cube
#ifdef XRTRANSPORT_EXT_XR_KHR_android_create_instance
#endif // XRTRANSPORT_EXT_XR_KHR_android_create_instance
#ifdef XRTRANSPORT_EXT_XR_KHR_composition_layer_depth
#endif // XRTRANSPORT_EXT_XR_KHR_composition_layer_depth
#ifdef XRTRANSPORT_EXT_XR_KHR_vulkan_swapchain_format_list
#endif // XRTRANSPORT_EXT_XR_KHR_vulkan_swapchain_format_list
#ifdef XRTRANSPORT_EXT_XR_EXT_performance_settings

XRAPI_ATTR XrResult XRAPI_CALL xrPerfSettingsSetPerformanceLevelEXT(XrSession session, XrPerfSettingsDomainEXT domain, XrPerfSettingsLevelEXT level) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 21001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize(&domain, msg_out.stream);

    

    serialize(&level, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrPerfSettingsSetPerformanceLevelEXT: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_EXT_performance_settings
#ifdef XRTRANSPORT_EXT_XR_EXT_thermal_query

XRAPI_ATTR XrResult XRAPI_CALL xrThermalGetTemperatureTrendEXT(XrSession session, XrPerfSettingsDomainEXT domain, XrPerfSettingsNotificationLevelEXT* notificationLevel, float* tempHeadroom, float* tempSlope) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 23001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize(&domain, msg_out.stream);

    

    serialize_ptr(notificationLevel, 1, msg_out.stream);

    

    serialize_ptr(tempHeadroom, 1, msg_out.stream);

    

    serialize_ptr(tempSlope, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&notificationLevel, msg_in.stream, true);

    
    deserialize_ptr(&tempHeadroom, msg_in.stream, true);

    
    deserialize_ptr(&tempSlope, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrThermalGetTemperatureTrendEXT: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_EXT_thermal_query
#ifdef XRTRANSPORT_EXT_XR_KHR_composition_layer_cylinder
#endif // XRTRANSPORT_EXT_XR_KHR_composition_layer_cylinder
#ifdef XRTRANSPORT_EXT_XR_KHR_composition_layer_equirect
#endif // XRTRANSPORT_EXT_XR_KHR_composition_layer_equirect
#ifdef XRTRANSPORT_EXT_XR_EXT_debug_utils

XRAPI_ATTR XrResult XRAPI_CALL xrSetDebugUtilsObjectNameEXT(XrInstance instance, const XrDebugUtilsObjectNameInfoEXT* nameInfo) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 13006;
    serialize(&function_id, msg_out.stream);
    

    serialize(&instance, msg_out.stream);

    

    serialize_ptr(nameInfo, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrSetDebugUtilsObjectNameEXT: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrCreateDebugUtilsMessengerEXT(XrInstance instance, const XrDebugUtilsMessengerCreateInfoEXT* createInfo, XrDebugUtilsMessengerEXT* messenger) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 13001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&instance, msg_out.stream);

    

    serialize_ptr(createInfo, 1, msg_out.stream);

    

    serialize_ptr(messenger, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&createInfo->userData, msg_in.stream, true);

    
    deserialize_ptr(&messenger, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrCreateDebugUtilsMessengerEXT: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrDestroyDebugUtilsMessengerEXT(XrDebugUtilsMessengerEXT messenger) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 13002;
    serialize(&function_id, msg_out.stream);
    

    serialize(&messenger, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrDestroyDebugUtilsMessengerEXT: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrSubmitDebugUtilsMessageEXT(XrInstance instance, XrDebugUtilsMessageSeverityFlagsEXT messageSeverity, XrDebugUtilsMessageTypeFlagsEXT messageTypes, const XrDebugUtilsMessengerCallbackDataEXT* callbackData) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 13007;
    serialize(&function_id, msg_out.stream);
    

    serialize(&instance, msg_out.stream);

    

    serialize(&messageSeverity, msg_out.stream);

    

    serialize(&messageTypes, msg_out.stream);

    

    serialize_ptr(callbackData, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&callbackData->objects, msg_in.stream, true);

    
    deserialize_ptr(&callbackData->sessionLabels, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrSubmitDebugUtilsMessageEXT: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrSessionBeginDebugUtilsLabelRegionEXT(XrSession session, const XrDebugUtilsLabelEXT* labelInfo) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 13003;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(labelInfo, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrSessionBeginDebugUtilsLabelRegionEXT: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrSessionEndDebugUtilsLabelRegionEXT(XrSession session) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 13004;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrSessionEndDebugUtilsLabelRegionEXT: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrSessionInsertDebugUtilsLabelEXT(XrSession session, const XrDebugUtilsLabelEXT* labelInfo) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 13005;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(labelInfo, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrSessionInsertDebugUtilsLabelEXT: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_EXT_debug_utils
#ifdef XRTRANSPORT_EXT_XR_KHR_opengl_enable

XRAPI_ATTR XrResult XRAPI_CALL xrGetOpenGLGraphicsRequirementsKHR(XrInstance instance, XrSystemId systemId, XrGraphicsRequirementsOpenGLKHR* graphicsRequirements) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 88001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&instance, msg_out.stream);

    

    serialize(&systemId, msg_out.stream);

    

    serialize_ptr(graphicsRequirements, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&graphicsRequirements, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetOpenGLGraphicsRequirementsKHR: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_KHR_opengl_enable
#ifdef XRTRANSPORT_EXT_XR_KHR_opengl_es_enable

XRAPI_ATTR XrResult XRAPI_CALL xrGetOpenGLESGraphicsRequirementsKHR(XrInstance instance, XrSystemId systemId, XrGraphicsRequirementsOpenGLESKHR* graphicsRequirements) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 89001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&instance, msg_out.stream);

    

    serialize(&systemId, msg_out.stream);

    

    serialize_ptr(graphicsRequirements, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&graphicsRequirements, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetOpenGLESGraphicsRequirementsKHR: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_KHR_opengl_es_enable
#ifdef XRTRANSPORT_EXT_XR_KHR_vulkan_enable

XRAPI_ATTR XrResult XRAPI_CALL xrGetVulkanInstanceExtensionsKHR(XrInstance instance, XrSystemId systemId, uint32_t bufferCapacityInput, uint32_t* bufferCountOutput, char* buffer) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 91004;
    serialize(&function_id, msg_out.stream);
    

    serialize(&instance, msg_out.stream);

    

    serialize(&systemId, msg_out.stream);

    

    serialize(&bufferCapacityInput, msg_out.stream);

    

    serialize_ptr(bufferCountOutput, 1, msg_out.stream);

    

    
    serialize_ptr(buffer, bufferCapacityInput, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&bufferCountOutput, msg_in.stream, true);

    
    deserialize_ptr(&buffer, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetVulkanInstanceExtensionsKHR: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrGetVulkanDeviceExtensionsKHR(XrInstance instance, XrSystemId systemId, uint32_t bufferCapacityInput, uint32_t* bufferCountOutput, char* buffer) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 91001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&instance, msg_out.stream);

    

    serialize(&systemId, msg_out.stream);

    

    serialize(&bufferCapacityInput, msg_out.stream);

    

    serialize_ptr(bufferCountOutput, 1, msg_out.stream);

    

    
    serialize_ptr(buffer, bufferCapacityInput, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&bufferCountOutput, msg_in.stream, true);

    
    deserialize_ptr(&buffer, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetVulkanDeviceExtensionsKHR: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrGetVulkanGraphicsDeviceKHR(XrInstance instance, XrSystemId systemId, VkInstance vkInstance, VkPhysicalDevice* vkPhysicalDevice) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 91002;
    serialize(&function_id, msg_out.stream);
    

    serialize(&instance, msg_out.stream);

    

    serialize(&systemId, msg_out.stream);

    

    serialize(&vkInstance, msg_out.stream);

    

    serialize_ptr(vkPhysicalDevice, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&vkPhysicalDevice, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetVulkanGraphicsDeviceKHR: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrGetVulkanGraphicsRequirementsKHR(XrInstance instance, XrSystemId systemId, XrGraphicsRequirementsVulkanKHR* graphicsRequirements) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 91003;
    serialize(&function_id, msg_out.stream);
    

    serialize(&instance, msg_out.stream);

    

    serialize(&systemId, msg_out.stream);

    

    serialize_ptr(graphicsRequirements, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&graphicsRequirements, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetVulkanGraphicsRequirementsKHR: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_KHR_vulkan_enable
#ifdef XRTRANSPORT_EXT_XR_KHR_D3D11_enable

XRAPI_ATTR XrResult XRAPI_CALL xrGetD3D11GraphicsRequirementsKHR(XrInstance instance, XrSystemId systemId, XrGraphicsRequirementsD3D11KHR* graphicsRequirements) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 71001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&instance, msg_out.stream);

    

    serialize(&systemId, msg_out.stream);

    

    serialize_ptr(graphicsRequirements, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&graphicsRequirements, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetD3D11GraphicsRequirementsKHR: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_KHR_D3D11_enable
#ifdef XRTRANSPORT_EXT_XR_KHR_D3D12_enable

XRAPI_ATTR XrResult XRAPI_CALL xrGetD3D12GraphicsRequirementsKHR(XrInstance instance, XrSystemId systemId, XrGraphicsRequirementsD3D12KHR* graphicsRequirements) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 72001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&instance, msg_out.stream);

    

    serialize(&systemId, msg_out.stream);

    

    serialize_ptr(graphicsRequirements, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&graphicsRequirements, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetD3D12GraphicsRequirementsKHR: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_KHR_D3D12_enable
#ifdef XRTRANSPORT_EXT_XR_KHR_metal_enable

XRAPI_ATTR XrResult XRAPI_CALL xrGetMetalGraphicsRequirementsKHR(XrInstance instance, XrSystemId systemId, XrGraphicsRequirementsMetalKHR* graphicsRequirements) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 87001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&instance, msg_out.stream);

    

    serialize(&systemId, msg_out.stream);

    

    serialize_ptr(graphicsRequirements, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&graphicsRequirements, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetMetalGraphicsRequirementsKHR: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_KHR_metal_enable
#ifdef XRTRANSPORT_EXT_XR_EXT_eye_gaze_interaction
#endif // XRTRANSPORT_EXT_XR_EXT_eye_gaze_interaction
#ifdef XRTRANSPORT_EXT_XR_KHR_visibility_mask

XRAPI_ATTR XrResult XRAPI_CALL xrGetVisibilityMaskKHR(XrSession session, XrViewConfigurationType viewConfigurationType, uint32_t viewIndex, XrVisibilityMaskTypeKHR visibilityMaskType, XrVisibilityMaskKHR* visibilityMask) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 90001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize(&viewConfigurationType, msg_out.stream);

    

    serialize(&viewIndex, msg_out.stream);

    

    serialize(&visibilityMaskType, msg_out.stream);

    

    serialize_ptr(visibilityMask, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&visibilityMask, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetVisibilityMaskKHR: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_KHR_visibility_mask
#ifdef XRTRANSPORT_EXT_XR_EXTX_overlay
#endif // XRTRANSPORT_EXT_XR_EXTX_overlay
#ifdef XRTRANSPORT_EXT_XR_KHR_composition_layer_color_scale_bias
#endif // XRTRANSPORT_EXT_XR_KHR_composition_layer_color_scale_bias
#ifdef XRTRANSPORT_EXT_XR_KHR_win32_convert_performance_counter_time

XRAPI_ATTR XrResult XRAPI_CALL xrConvertWin32PerformanceCounterToTimeKHR(XrInstance instance, const LARGE_INTEGER* performanceCounter, XrTime* time) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 94002;
    serialize(&function_id, msg_out.stream);
    

    serialize(&instance, msg_out.stream);

    

    serialize_ptr(performanceCounter, 1, msg_out.stream);

    

    serialize_ptr(time, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&time, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrConvertWin32PerformanceCounterToTimeKHR: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrConvertTimeToWin32PerformanceCounterKHR(XrInstance instance, XrTime time, LARGE_INTEGER* performanceCounter) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 94001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&instance, msg_out.stream);

    

    serialize(&time, msg_out.stream);

    

    serialize_ptr(performanceCounter, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&performanceCounter, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrConvertTimeToWin32PerformanceCounterKHR: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_KHR_win32_convert_performance_counter_time
#ifdef XRTRANSPORT_EXT_XR_KHR_convert_timespec_time

XRAPI_ATTR XrResult XRAPI_CALL xrConvertTimespecTimeToTimeKHR(XrInstance instance, const struct timespec* timespecTime, XrTime* time) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 83002;
    serialize(&function_id, msg_out.stream);
    

    serialize(&instance, msg_out.stream);

    

    serialize_ptr(timespecTime, 1, msg_out.stream);

    

    serialize_ptr(time, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&timespecTime, msg_in.stream, true);

    
    deserialize_ptr(&time, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrConvertTimespecTimeToTimeKHR: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrConvertTimeToTimespecTimeKHR(XrInstance instance, XrTime time, struct timespec* timespecTime) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 83001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&instance, msg_out.stream);

    

    serialize(&time, msg_out.stream);

    

    serialize_ptr(timespecTime, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&timespecTime, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrConvertTimeToTimespecTimeKHR: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_KHR_convert_timespec_time
#ifdef XRTRANSPORT_EXT_XR_MSFT_spatial_anchor

XRAPI_ATTR XrResult XRAPI_CALL xrCreateSpatialAnchorMSFT(XrSession session, const XrSpatialAnchorCreateInfoMSFT* createInfo, XrSpatialAnchorMSFT* anchor) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 134001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(createInfo, 1, msg_out.stream);

    

    serialize_ptr(anchor, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&anchor, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrCreateSpatialAnchorMSFT: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrCreateSpatialAnchorSpaceMSFT(XrSession session, const XrSpatialAnchorSpaceCreateInfoMSFT* createInfo, XrSpace* space) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 134002;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(createInfo, 1, msg_out.stream);

    

    serialize_ptr(space, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&space, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrCreateSpatialAnchorSpaceMSFT: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrDestroySpatialAnchorMSFT(XrSpatialAnchorMSFT anchor) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 134003;
    serialize(&function_id, msg_out.stream);
    

    serialize(&anchor, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrDestroySpatialAnchorMSFT: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_MSFT_spatial_anchor
#ifdef XRTRANSPORT_EXT_XR_FB_composition_layer_image_layout
#endif // XRTRANSPORT_EXT_XR_FB_composition_layer_image_layout
#ifdef XRTRANSPORT_EXT_XR_FB_composition_layer_alpha_blend
#endif // XRTRANSPORT_EXT_XR_FB_composition_layer_alpha_blend
#ifdef XRTRANSPORT_EXT_XR_EXT_view_configuration_depth_range
#endif // XRTRANSPORT_EXT_XR_EXT_view_configuration_depth_range
#ifdef XRTRANSPORT_EXT_XR_EXT_conformance_automation

XRAPI_ATTR XrResult XRAPI_CALL xrSetInputDeviceActiveEXT(XrSession session, XrPath interactionProfile, XrPath topLevelPath, XrBool32 isActive) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 12001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize(&interactionProfile, msg_out.stream);

    

    serialize(&topLevelPath, msg_out.stream);

    

    serialize(&isActive, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrSetInputDeviceActiveEXT: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrSetInputDeviceStateBoolEXT(XrSession session, XrPath topLevelPath, XrPath inputSourcePath, XrBool32 state) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 12003;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize(&topLevelPath, msg_out.stream);

    

    serialize(&inputSourcePath, msg_out.stream);

    

    serialize(&state, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrSetInputDeviceStateBoolEXT: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrSetInputDeviceStateFloatEXT(XrSession session, XrPath topLevelPath, XrPath inputSourcePath, float state) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 12004;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize(&topLevelPath, msg_out.stream);

    

    serialize(&inputSourcePath, msg_out.stream);

    

    serialize(&state, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrSetInputDeviceStateFloatEXT: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrSetInputDeviceStateVector2fEXT(XrSession session, XrPath topLevelPath, XrPath inputSourcePath, XrVector2f state) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 12005;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize(&topLevelPath, msg_out.stream);

    

    serialize(&inputSourcePath, msg_out.stream);

    

    serialize(&state, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrSetInputDeviceStateVector2fEXT: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrSetInputDeviceLocationEXT(XrSession session, XrPath topLevelPath, XrPath inputSourcePath, XrSpace space, XrPosef pose) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 12002;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize(&topLevelPath, msg_out.stream);

    

    serialize(&inputSourcePath, msg_out.stream);

    

    serialize(&space, msg_out.stream);

    

    serialize(&pose, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrSetInputDeviceLocationEXT: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_EXT_conformance_automation
#ifdef XRTRANSPORT_EXT_XR_MNDX_egl_enable
#endif // XRTRANSPORT_EXT_XR_MNDX_egl_enable
#ifdef XRTRANSPORT_EXT_XR_MSFT_spatial_graph_bridge

XRAPI_ATTR XrResult XRAPI_CALL xrCreateSpatialGraphNodeSpaceMSFT(XrSession session, const XrSpatialGraphNodeSpaceCreateInfoMSFT* createInfo, XrSpace* space) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 136001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(createInfo, 1, msg_out.stream);

    

    serialize_ptr(space, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&space, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrCreateSpatialGraphNodeSpaceMSFT: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrTryCreateSpatialGraphStaticNodeBindingMSFT(XrSession session, const XrSpatialGraphStaticNodeBindingCreateInfoMSFT* createInfo, XrSpatialGraphNodeBindingMSFT* nodeBinding) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 136004;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(createInfo, 1, msg_out.stream);

    

    serialize_ptr(nodeBinding, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&nodeBinding, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrTryCreateSpatialGraphStaticNodeBindingMSFT: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrDestroySpatialGraphNodeBindingMSFT(XrSpatialGraphNodeBindingMSFT nodeBinding) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 136002;
    serialize(&function_id, msg_out.stream);
    

    serialize(&nodeBinding, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrDestroySpatialGraphNodeBindingMSFT: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrGetSpatialGraphNodeBindingPropertiesMSFT(XrSpatialGraphNodeBindingMSFT nodeBinding, const XrSpatialGraphNodeBindingPropertiesGetInfoMSFT* getInfo, XrSpatialGraphNodeBindingPropertiesMSFT* properties) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 136003;
    serialize(&function_id, msg_out.stream);
    

    serialize(&nodeBinding, msg_out.stream);

    

    serialize_ptr(getInfo, 1, msg_out.stream);

    

    serialize_ptr(properties, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&properties, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetSpatialGraphNodeBindingPropertiesMSFT: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_MSFT_spatial_graph_bridge
#ifdef XRTRANSPORT_EXT_XR_EXT_hand_tracking

XRAPI_ATTR XrResult XRAPI_CALL xrCreateHandTrackerEXT(XrSession session, const XrHandTrackerCreateInfoEXT* createInfo, XrHandTrackerEXT* handTracker) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 19001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(createInfo, 1, msg_out.stream);

    

    serialize_ptr(handTracker, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&handTracker, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrCreateHandTrackerEXT: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrDestroyHandTrackerEXT(XrHandTrackerEXT handTracker) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 19002;
    serialize(&function_id, msg_out.stream);
    

    serialize(&handTracker, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrDestroyHandTrackerEXT: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrLocateHandJointsEXT(XrHandTrackerEXT handTracker, const XrHandJointsLocateInfoEXT* locateInfo, XrHandJointLocationsEXT* locations) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 19003;
    serialize(&function_id, msg_out.stream);
    

    serialize(&handTracker, msg_out.stream);

    

    serialize_ptr(locateInfo, 1, msg_out.stream);

    

    serialize_ptr(locations, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&locations, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrLocateHandJointsEXT: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_EXT_hand_tracking
#ifdef XRTRANSPORT_EXT_XR_MSFT_hand_tracking_mesh

XRAPI_ATTR XrResult XRAPI_CALL xrCreateHandMeshSpaceMSFT(XrHandTrackerEXT handTracker, const XrHandMeshSpaceCreateInfoMSFT* createInfo, XrSpace* space) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 127001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&handTracker, msg_out.stream);

    

    serialize_ptr(createInfo, 1, msg_out.stream);

    

    serialize_ptr(space, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&space, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrCreateHandMeshSpaceMSFT: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrUpdateHandMeshMSFT(XrHandTrackerEXT handTracker, const XrHandMeshUpdateInfoMSFT* updateInfo, XrHandMeshMSFT* handMesh) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 127002;
    serialize(&function_id, msg_out.stream);
    

    serialize(&handTracker, msg_out.stream);

    

    serialize_ptr(updateInfo, 1, msg_out.stream);

    

    serialize_ptr(handMesh, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&handMesh, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrUpdateHandMeshMSFT: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_MSFT_hand_tracking_mesh
#ifdef XRTRANSPORT_EXT_XR_MSFT_secondary_view_configuration
#endif // XRTRANSPORT_EXT_XR_MSFT_secondary_view_configuration
#ifdef XRTRANSPORT_EXT_XR_MSFT_controller_model

XRAPI_ATTR XrResult XRAPI_CALL xrGetControllerModelKeyMSFT(XrSession session, XrPath topLevelUserPath, XrControllerModelKeyStateMSFT* controllerModelKeyState) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 126001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize(&topLevelUserPath, msg_out.stream);

    

    serialize_ptr(controllerModelKeyState, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&controllerModelKeyState, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetControllerModelKeyMSFT: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrLoadControllerModelMSFT(XrSession session, XrControllerModelKeyMSFT modelKey, uint32_t bufferCapacityInput, uint32_t* bufferCountOutput, uint8_t* buffer) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 126004;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize(&modelKey, msg_out.stream);

    

    serialize(&bufferCapacityInput, msg_out.stream);

    

    serialize_ptr(bufferCountOutput, 1, msg_out.stream);

    

    
    serialize_ptr(buffer, bufferCapacityInput, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&bufferCountOutput, msg_in.stream, true);

    
    deserialize_ptr(&buffer, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrLoadControllerModelMSFT: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrGetControllerModelPropertiesMSFT(XrSession session, XrControllerModelKeyMSFT modelKey, XrControllerModelPropertiesMSFT* properties) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 126002;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize(&modelKey, msg_out.stream);

    

    serialize_ptr(properties, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&properties, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetControllerModelPropertiesMSFT: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrGetControllerModelStateMSFT(XrSession session, XrControllerModelKeyMSFT modelKey, XrControllerModelStateMSFT* state) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 126003;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize(&modelKey, msg_out.stream);

    

    serialize_ptr(state, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&state, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetControllerModelStateMSFT: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_MSFT_controller_model
#ifdef XRTRANSPORT_EXT_XR_MSFT_perception_anchor_interop

XRAPI_ATTR XrResult XRAPI_CALL xrCreateSpatialAnchorFromPerceptionAnchorMSFT(XrSession session, IUnknown* perceptionAnchor, XrSpatialAnchorMSFT* anchor) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 129001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(perceptionAnchor, 1, msg_out.stream);

    

    serialize_ptr(anchor, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&perceptionAnchor, msg_in.stream, true);

    
    deserialize_ptr(&anchor, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrCreateSpatialAnchorFromPerceptionAnchorMSFT: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrTryGetPerceptionAnchorFromSpatialAnchorMSFT(XrSession session, XrSpatialAnchorMSFT anchor, IUnknown** perceptionAnchor) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 129002;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize(&anchor, msg_out.stream);

    

    #error "auto-generator doesn't support double pointers (perceptionAnchor)"
    None

    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&perceptionAnchor, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrTryGetPerceptionAnchorFromSpatialAnchorMSFT: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_MSFT_perception_anchor_interop
#ifdef XRTRANSPORT_EXT_XR_EPIC_view_configuration_fov
#endif // XRTRANSPORT_EXT_XR_EPIC_view_configuration_fov
#ifdef XRTRANSPORT_EXT_XR_MSFT_holographic_window_attachment
#endif // XRTRANSPORT_EXT_XR_MSFT_holographic_window_attachment
#ifdef XRTRANSPORT_EXT_XR_MSFT_composition_layer_reprojection

XRAPI_ATTR XrResult XRAPI_CALL xrEnumerateReprojectionModesMSFT(XrInstance instance, XrSystemId systemId, XrViewConfigurationType viewConfigurationType, uint32_t modeCapacityInput, uint32_t* modeCountOutput, XrReprojectionModeMSFT* modes) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 125001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&instance, msg_out.stream);

    

    serialize(&systemId, msg_out.stream);

    

    serialize(&viewConfigurationType, msg_out.stream);

    

    serialize(&modeCapacityInput, msg_out.stream);

    

    serialize_ptr(modeCountOutput, 1, msg_out.stream);

    

    
    serialize_ptr(modes, modeCapacityInput, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&modeCountOutput, msg_in.stream, true);

    
    deserialize_ptr(&modes, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrEnumerateReprojectionModesMSFT: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_MSFT_composition_layer_reprojection
#ifdef XRTRANSPORT_EXT_XR_FB_android_surface_swapchain_create
#endif // XRTRANSPORT_EXT_XR_FB_android_surface_swapchain_create
#ifdef XRTRANSPORT_EXT_XR_FB_swapchain_update_state

XRAPI_ATTR XrResult XRAPI_CALL xrUpdateSwapchainFB(XrSwapchain swapchain, const XrSwapchainStateBaseHeaderFB* state) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 60002;
    serialize(&function_id, msg_out.stream);
    

    serialize(&swapchain, msg_out.stream);

    

    serialize_xr(state, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrUpdateSwapchainFB: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrGetSwapchainStateFB(XrSwapchain swapchain, XrSwapchainStateBaseHeaderFB* state) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 60001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&swapchain, msg_out.stream);

    

    serialize_xr(state, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_xr(&state, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetSwapchainStateFB: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_FB_swapchain_update_state
#ifdef XRTRANSPORT_EXT_XR_FB_composition_layer_secure_content
#endif // XRTRANSPORT_EXT_XR_FB_composition_layer_secure_content
#ifdef XRTRANSPORT_EXT_XR_FB_body_tracking

XRAPI_ATTR XrResult XRAPI_CALL xrCreateBodyTrackerFB(XrSession session, const XrBodyTrackerCreateInfoFB* createInfo, XrBodyTrackerFB* bodyTracker) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 27001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(createInfo, 1, msg_out.stream);

    

    serialize_ptr(bodyTracker, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&bodyTracker, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrCreateBodyTrackerFB: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrDestroyBodyTrackerFB(XrBodyTrackerFB bodyTracker) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 27002;
    serialize(&function_id, msg_out.stream);
    

    serialize(&bodyTracker, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrDestroyBodyTrackerFB: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrLocateBodyJointsFB(XrBodyTrackerFB bodyTracker, const XrBodyJointsLocateInfoFB* locateInfo, XrBodyJointLocationsFB* locations) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 27004;
    serialize(&function_id, msg_out.stream);
    

    serialize(&bodyTracker, msg_out.stream);

    

    serialize_ptr(locateInfo, 1, msg_out.stream);

    

    serialize_ptr(locations, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&locations, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrLocateBodyJointsFB: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrGetBodySkeletonFB(XrBodyTrackerFB bodyTracker, XrBodySkeletonFB* skeleton) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 27003;
    serialize(&function_id, msg_out.stream);
    

    serialize(&bodyTracker, msg_out.stream);

    

    serialize_ptr(skeleton, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&skeleton, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetBodySkeletonFB: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_FB_body_tracking
#ifdef XRTRANSPORT_EXT_XR_EXT_dpad_binding
#endif // XRTRANSPORT_EXT_XR_EXT_dpad_binding
#ifdef XRTRANSPORT_EXT_XR_VALVE_analog_threshold
#endif // XRTRANSPORT_EXT_XR_VALVE_analog_threshold
#ifdef XRTRANSPORT_EXT_XR_EXT_hand_joints_motion_range
#endif // XRTRANSPORT_EXT_XR_EXT_hand_joints_motion_range
#ifdef XRTRANSPORT_EXT_XR_KHR_loader_init

XRAPI_ATTR XrResult XRAPI_CALL xrInitializeLoaderKHR(const XrLoaderInitInfoBaseHeaderKHR* loaderInitInfo) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 85001;
    serialize(&function_id, msg_out.stream);
    

    serialize_xr(loaderInitInfo, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrInitializeLoaderKHR: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_KHR_loader_init
#ifdef XRTRANSPORT_EXT_XR_KHR_loader_init_android
#endif // XRTRANSPORT_EXT_XR_KHR_loader_init_android
#ifdef XRTRANSPORT_EXT_XR_KHR_vulkan_enable2

XRAPI_ATTR XrResult XRAPI_CALL xrCreateVulkanInstanceKHR(XrInstance instance, const XrVulkanInstanceCreateInfoKHR* createInfo, VkInstance* vulkanInstance, VkResult* vulkanResult) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 92002;
    serialize(&function_id, msg_out.stream);
    

    serialize(&instance, msg_out.stream);

    

    serialize_ptr(createInfo, 1, msg_out.stream);

    

    serialize_ptr(vulkanInstance, 1, msg_out.stream);

    

    serialize_ptr(vulkanResult, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&vulkanInstance, msg_in.stream, true);

    
    deserialize_ptr(&vulkanResult, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrCreateVulkanInstanceKHR: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrCreateVulkanDeviceKHR(XrInstance instance, const XrVulkanDeviceCreateInfoKHR* createInfo, VkDevice* vulkanDevice, VkResult* vulkanResult) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 92001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&instance, msg_out.stream);

    

    serialize_ptr(createInfo, 1, msg_out.stream);

    

    serialize_ptr(vulkanDevice, 1, msg_out.stream);

    

    serialize_ptr(vulkanResult, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&vulkanDevice, msg_in.stream, true);

    
    deserialize_ptr(&vulkanResult, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrCreateVulkanDeviceKHR: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrGetVulkanGraphicsDevice2KHR(XrInstance instance, const XrVulkanGraphicsDeviceGetInfoKHR* getInfo, VkPhysicalDevice* vulkanPhysicalDevice) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 92003;
    serialize(&function_id, msg_out.stream);
    

    serialize(&instance, msg_out.stream);

    

    serialize_ptr(getInfo, 1, msg_out.stream);

    

    serialize_ptr(vulkanPhysicalDevice, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&vulkanPhysicalDevice, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetVulkanGraphicsDevice2KHR: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_KHR_vulkan_enable2
#ifdef XRTRANSPORT_EXT_XR_KHR_composition_layer_equirect2
#endif // XRTRANSPORT_EXT_XR_KHR_composition_layer_equirect2
#ifdef XRTRANSPORT_EXT_XR_MSFT_scene_understanding

XRAPI_ATTR XrResult XRAPI_CALL xrEnumerateSceneComputeFeaturesMSFT(XrInstance instance, XrSystemId systemId, uint32_t featureCapacityInput, uint32_t* featureCountOutput, XrSceneComputeFeatureMSFT* features) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 131006;
    serialize(&function_id, msg_out.stream);
    

    serialize(&instance, msg_out.stream);

    

    serialize(&systemId, msg_out.stream);

    

    serialize(&featureCapacityInput, msg_out.stream);

    

    serialize_ptr(featureCountOutput, 1, msg_out.stream);

    

    
    serialize_ptr(features, featureCapacityInput, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&featureCountOutput, msg_in.stream, true);

    
    deserialize_ptr(&features, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrEnumerateSceneComputeFeaturesMSFT: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrCreateSceneObserverMSFT(XrSession session, const XrSceneObserverCreateInfoMSFT* createInfo, XrSceneObserverMSFT* sceneObserver) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 131003;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(createInfo, 1, msg_out.stream);

    

    serialize_ptr(sceneObserver, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&sceneObserver, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrCreateSceneObserverMSFT: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrDestroySceneObserverMSFT(XrSceneObserverMSFT sceneObserver) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 131005;
    serialize(&function_id, msg_out.stream);
    

    serialize(&sceneObserver, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrDestroySceneObserverMSFT: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrCreateSceneMSFT(XrSceneObserverMSFT sceneObserver, const XrSceneCreateInfoMSFT* createInfo, XrSceneMSFT* scene) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 131002;
    serialize(&function_id, msg_out.stream);
    

    serialize(&sceneObserver, msg_out.stream);

    

    serialize_ptr(createInfo, 1, msg_out.stream);

    

    serialize_ptr(scene, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&scene, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrCreateSceneMSFT: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrDestroySceneMSFT(XrSceneMSFT scene) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 131004;
    serialize(&function_id, msg_out.stream);
    

    serialize(&scene, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrDestroySceneMSFT: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrComputeNewSceneMSFT(XrSceneObserverMSFT sceneObserver, const XrNewSceneComputeInfoMSFT* computeInfo) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 131001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&sceneObserver, msg_out.stream);

    

    serialize_ptr(computeInfo, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrComputeNewSceneMSFT: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrGetSceneComputeStateMSFT(XrSceneObserverMSFT sceneObserver, XrSceneComputeStateMSFT* state) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 131008;
    serialize(&function_id, msg_out.stream);
    

    serialize(&sceneObserver, msg_out.stream);

    

    serialize_ptr(state, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&state, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetSceneComputeStateMSFT: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrGetSceneComponentsMSFT(XrSceneMSFT scene, const XrSceneComponentsGetInfoMSFT* getInfo, XrSceneComponentsMSFT* components) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 131007;
    serialize(&function_id, msg_out.stream);
    

    serialize(&scene, msg_out.stream);

    

    serialize_ptr(getInfo, 1, msg_out.stream);

    

    serialize_ptr(components, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&components, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetSceneComponentsMSFT: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrLocateSceneComponentsMSFT(XrSceneMSFT scene, const XrSceneComponentsLocateInfoMSFT* locateInfo, XrSceneComponentLocationsMSFT* locations) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 131010;
    serialize(&function_id, msg_out.stream);
    

    serialize(&scene, msg_out.stream);

    

    serialize_ptr(locateInfo, 1, msg_out.stream);

    

    serialize_ptr(locations, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&locations, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrLocateSceneComponentsMSFT: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrGetSceneMeshBuffersMSFT(XrSceneMSFT scene, const XrSceneMeshBuffersGetInfoMSFT* getInfo, XrSceneMeshBuffersMSFT* buffers) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 131009;
    serialize(&function_id, msg_out.stream);
    

    serialize(&scene, msg_out.stream);

    

    serialize_ptr(getInfo, 1, msg_out.stream);

    

    serialize_ptr(buffers, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&buffers, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetSceneMeshBuffersMSFT: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_MSFT_scene_understanding
#ifdef XRTRANSPORT_EXT_XR_MSFT_scene_understanding_serialization

XRAPI_ATTR XrResult XRAPI_CALL xrDeserializeSceneMSFT(XrSceneObserverMSFT sceneObserver, const XrSceneDeserializeInfoMSFT* deserializeInfo) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 132001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&sceneObserver, msg_out.stream);

    

    serialize_ptr(deserializeInfo, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrDeserializeSceneMSFT: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrGetSerializedSceneFragmentDataMSFT(XrSceneMSFT scene, const XrSerializedSceneFragmentDataGetInfoMSFT* getInfo, uint32_t countInput, uint32_t* readOutput, uint8_t* buffer) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 132002;
    serialize(&function_id, msg_out.stream);
    

    serialize(&scene, msg_out.stream);

    

    serialize_ptr(getInfo, 1, msg_out.stream);

    

    serialize(&countInput, msg_out.stream);

    

    serialize_ptr(readOutput, 1, msg_out.stream);

    

    
    serialize_ptr(buffer, countInput, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&readOutput, msg_in.stream, true);

    
    deserialize_ptr(&buffer, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetSerializedSceneFragmentDataMSFT: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_MSFT_scene_understanding_serialization
#ifdef XRTRANSPORT_EXT_XR_FB_display_refresh_rate

XRAPI_ATTR XrResult XRAPI_CALL xrEnumerateDisplayRefreshRatesFB(XrSession session, uint32_t displayRefreshRateCapacityInput, uint32_t* displayRefreshRateCountOutput, float* displayRefreshRates) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 34001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize(&displayRefreshRateCapacityInput, msg_out.stream);

    

    serialize_ptr(displayRefreshRateCountOutput, 1, msg_out.stream);

    

    
    serialize_ptr(displayRefreshRates, displayRefreshRateCapacityInput, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&displayRefreshRateCountOutput, msg_in.stream, true);

    
    deserialize_ptr(&displayRefreshRates, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrEnumerateDisplayRefreshRatesFB: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrGetDisplayRefreshRateFB(XrSession session, float* displayRefreshRate) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 34002;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(displayRefreshRate, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&displayRefreshRate, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetDisplayRefreshRateFB: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrRequestDisplayRefreshRateFB(XrSession session, float displayRefreshRate) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 34003;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize(&displayRefreshRate, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrRequestDisplayRefreshRateFB: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_FB_display_refresh_rate
#ifdef XRTRANSPORT_EXT_XR_HTCX_vive_tracker_interaction

XRAPI_ATTR XrResult XRAPI_CALL xrEnumerateViveTrackerPathsHTCX(XrInstance instance, uint32_t pathCapacityInput, uint32_t* pathCountOutput, XrViveTrackerPathsHTCX* paths) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 65001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&instance, msg_out.stream);

    

    serialize(&pathCapacityInput, msg_out.stream);

    

    serialize_ptr(pathCountOutput, 1, msg_out.stream);

    

    
    serialize_ptr(paths, pathCapacityInput, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&pathCountOutput, msg_in.stream, true);

    
    deserialize_ptr(&paths, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrEnumerateViveTrackerPathsHTCX: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_HTCX_vive_tracker_interaction
#ifdef XRTRANSPORT_EXT_XR_HTC_facial_tracking

XRAPI_ATTR XrResult XRAPI_CALL xrCreateFacialTrackerHTC(XrSession session, const XrFacialTrackerCreateInfoHTC* createInfo, XrFacialTrackerHTC* facialTracker) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 68001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(createInfo, 1, msg_out.stream);

    

    serialize_ptr(facialTracker, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&facialTracker, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrCreateFacialTrackerHTC: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrDestroyFacialTrackerHTC(XrFacialTrackerHTC facialTracker) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 68002;
    serialize(&function_id, msg_out.stream);
    

    serialize(&facialTracker, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrDestroyFacialTrackerHTC: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrGetFacialExpressionsHTC(XrFacialTrackerHTC facialTracker, XrFacialExpressionsHTC* facialExpressions) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 68003;
    serialize(&function_id, msg_out.stream);
    

    serialize(&facialTracker, msg_out.stream);

    

    serialize_ptr(facialExpressions, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&facialExpressions, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetFacialExpressionsHTC: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_HTC_facial_tracking
#ifdef XRTRANSPORT_EXT_XR_FB_color_space

XRAPI_ATTR XrResult XRAPI_CALL xrEnumerateColorSpacesFB(XrSession session, uint32_t colorSpaceCapacityInput, uint32_t* colorSpaceCountOutput, XrColorSpaceFB* colorSpaces) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 28001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize(&colorSpaceCapacityInput, msg_out.stream);

    

    serialize_ptr(colorSpaceCountOutput, 1, msg_out.stream);

    

    
    serialize_ptr(colorSpaces, colorSpaceCapacityInput, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&colorSpaceCountOutput, msg_in.stream, true);

    
    deserialize_ptr(&colorSpaces, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrEnumerateColorSpacesFB: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrSetColorSpaceFB(XrSession session, const XrColorSpaceFB colorSpace) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 28002;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize(&colorSpace, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrSetColorSpaceFB: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_FB_color_space
#ifdef XRTRANSPORT_EXT_XR_FB_hand_tracking_mesh

XRAPI_ATTR XrResult XRAPI_CALL xrGetHandMeshFB(XrHandTrackerEXT handTracker, XrHandTrackingMeshFB* mesh) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 43001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&handTracker, msg_out.stream);

    

    serialize_ptr(mesh, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&mesh, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetHandMeshFB: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_FB_hand_tracking_mesh
#ifdef XRTRANSPORT_EXT_XR_FB_hand_tracking_aim
#endif // XRTRANSPORT_EXT_XR_FB_hand_tracking_aim
#ifdef XRTRANSPORT_EXT_XR_FB_hand_tracking_capsules
#endif // XRTRANSPORT_EXT_XR_FB_hand_tracking_capsules
#ifdef XRTRANSPORT_EXT_XR_FB_spatial_entity

XRAPI_ATTR XrResult XRAPI_CALL xrCreateSpatialAnchorFB(XrSession session, const XrSpatialAnchorCreateInfoFB* info, XrAsyncRequestIdFB* requestId) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 53001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(info, 1, msg_out.stream);

    

    serialize_ptr(requestId, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&requestId, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrCreateSpatialAnchorFB: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrGetSpaceUuidFB(XrSpace space, XrUuidEXT* uuid) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 53004;
    serialize(&function_id, msg_out.stream);
    

    serialize(&space, msg_out.stream);

    

    serialize_ptr(uuid, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&uuid, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetSpaceUuidFB: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrEnumerateSpaceSupportedComponentsFB(XrSpace space, uint32_t componentTypeCapacityInput, uint32_t* componentTypeCountOutput, XrSpaceComponentTypeFB* componentTypes) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 53002;
    serialize(&function_id, msg_out.stream);
    

    serialize(&space, msg_out.stream);

    

    serialize(&componentTypeCapacityInput, msg_out.stream);

    

    serialize_ptr(componentTypeCountOutput, 1, msg_out.stream);

    

    
    serialize_ptr(componentTypes, componentTypeCapacityInput, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&componentTypeCountOutput, msg_in.stream, true);

    
    deserialize_ptr(&componentTypes, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrEnumerateSpaceSupportedComponentsFB: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrSetSpaceComponentStatusFB(XrSpace space, const XrSpaceComponentStatusSetInfoFB* info, XrAsyncRequestIdFB* requestId) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 53005;
    serialize(&function_id, msg_out.stream);
    

    serialize(&space, msg_out.stream);

    

    serialize_ptr(info, 1, msg_out.stream);

    

    serialize_ptr(requestId, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&requestId, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrSetSpaceComponentStatusFB: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrGetSpaceComponentStatusFB(XrSpace space, XrSpaceComponentTypeFB componentType, XrSpaceComponentStatusFB* status) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 53003;
    serialize(&function_id, msg_out.stream);
    

    serialize(&space, msg_out.stream);

    

    serialize(&componentType, msg_out.stream);

    

    serialize_ptr(status, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&status, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetSpaceComponentStatusFB: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_FB_spatial_entity
#ifdef XRTRANSPORT_EXT_XR_FB_foveation

XRAPI_ATTR XrResult XRAPI_CALL xrCreateFoveationProfileFB(XrSession session, const XrFoveationProfileCreateInfoFB* createInfo, XrFoveationProfileFB* profile) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 38001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(createInfo, 1, msg_out.stream);

    

    serialize_ptr(profile, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_xr(&createInfo->next, msg_in.stream, true);

    
    deserialize_ptr(&profile, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrCreateFoveationProfileFB: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrDestroyFoveationProfileFB(XrFoveationProfileFB profile) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 38002;
    serialize(&function_id, msg_out.stream);
    

    serialize(&profile, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrDestroyFoveationProfileFB: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_FB_foveation
#ifdef XRTRANSPORT_EXT_XR_FB_foveation_configuration
#endif // XRTRANSPORT_EXT_XR_FB_foveation_configuration
#ifdef XRTRANSPORT_EXT_XR_FB_keyboard_tracking

XRAPI_ATTR XrResult XRAPI_CALL xrQuerySystemTrackedKeyboardFB(XrSession session, const XrKeyboardTrackingQueryFB* queryInfo, XrKeyboardTrackingDescriptionFB* keyboard) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 46002;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(queryInfo, 1, msg_out.stream);

    

    serialize_ptr(keyboard, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_xr(&queryInfo->next, msg_in.stream, true);

    
    deserialize_ptr(&keyboard, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrQuerySystemTrackedKeyboardFB: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrCreateKeyboardSpaceFB(XrSession session, const XrKeyboardSpaceCreateInfoFB* createInfo, XrSpace* keyboardSpace) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 46001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(createInfo, 1, msg_out.stream);

    

    serialize_ptr(keyboardSpace, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_xr(&createInfo->next, msg_in.stream, true);

    
    deserialize_ptr(&keyboardSpace, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrCreateKeyboardSpaceFB: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_FB_keyboard_tracking
#ifdef XRTRANSPORT_EXT_XR_FB_triangle_mesh

XRAPI_ATTR XrResult XRAPI_CALL xrCreateTriangleMeshFB(XrSession session, const XrTriangleMeshCreateInfoFB* createInfo, XrTriangleMeshFB* outTriangleMesh) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 64001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(createInfo, 1, msg_out.stream);

    

    serialize_ptr(outTriangleMesh, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&outTriangleMesh, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrCreateTriangleMeshFB: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrDestroyTriangleMeshFB(XrTriangleMeshFB mesh) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 64002;
    serialize(&function_id, msg_out.stream);
    

    serialize(&mesh, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrDestroyTriangleMeshFB: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrTriangleMeshGetVertexBufferFB(XrTriangleMeshFB mesh, XrVector3f** outVertexBuffer) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 64008;
    serialize(&function_id, msg_out.stream);
    

    serialize(&mesh, msg_out.stream);

    

    #error "auto-generator doesn't support double pointers (outVertexBuffer)"
    None

    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&outVertexBuffer, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrTriangleMeshGetVertexBufferFB: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrTriangleMeshGetIndexBufferFB(XrTriangleMeshFB mesh, uint32_t** outIndexBuffer) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 64007;
    serialize(&function_id, msg_out.stream);
    

    serialize(&mesh, msg_out.stream);

    

    #error "auto-generator doesn't support double pointers (outIndexBuffer)"
    None

    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&outIndexBuffer, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrTriangleMeshGetIndexBufferFB: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrTriangleMeshBeginUpdateFB(XrTriangleMeshFB mesh) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 64003;
    serialize(&function_id, msg_out.stream);
    

    serialize(&mesh, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrTriangleMeshBeginUpdateFB: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrTriangleMeshEndUpdateFB(XrTriangleMeshFB mesh, uint32_t vertexCount, uint32_t triangleCount) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 64005;
    serialize(&function_id, msg_out.stream);
    

    serialize(&mesh, msg_out.stream);

    

    serialize(&vertexCount, msg_out.stream);

    

    serialize(&triangleCount, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrTriangleMeshEndUpdateFB: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrTriangleMeshBeginVertexBufferUpdateFB(XrTriangleMeshFB mesh, uint32_t* outVertexCount) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 64004;
    serialize(&function_id, msg_out.stream);
    

    serialize(&mesh, msg_out.stream);

    

    serialize_ptr(outVertexCount, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&outVertexCount, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrTriangleMeshBeginVertexBufferUpdateFB: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrTriangleMeshEndVertexBufferUpdateFB(XrTriangleMeshFB mesh) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 64006;
    serialize(&function_id, msg_out.stream);
    

    serialize(&mesh, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrTriangleMeshEndVertexBufferUpdateFB: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_FB_triangle_mesh
#ifdef XRTRANSPORT_EXT_XR_FB_passthrough

XRAPI_ATTR XrResult XRAPI_CALL xrCreatePassthroughFB(XrSession session, const XrPassthroughCreateInfoFB* createInfo, XrPassthroughFB* outPassthrough) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 47002;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(createInfo, 1, msg_out.stream);

    

    serialize_ptr(outPassthrough, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&outPassthrough, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrCreatePassthroughFB: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrDestroyPassthroughFB(XrPassthroughFB passthrough) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 47005;
    serialize(&function_id, msg_out.stream);
    

    serialize(&passthrough, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrDestroyPassthroughFB: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrPassthroughStartFB(XrPassthroughFB passthrough) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 47012;
    serialize(&function_id, msg_out.stream);
    

    serialize(&passthrough, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrPassthroughStartFB: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrPassthroughPauseFB(XrPassthroughFB passthrough) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 47011;
    serialize(&function_id, msg_out.stream);
    

    serialize(&passthrough, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrPassthroughPauseFB: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrCreatePassthroughLayerFB(XrSession session, const XrPassthroughLayerCreateInfoFB* createInfo, XrPassthroughLayerFB* outLayer) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 47003;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(createInfo, 1, msg_out.stream);

    

    serialize_ptr(outLayer, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&outLayer, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrCreatePassthroughLayerFB: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrDestroyPassthroughLayerFB(XrPassthroughLayerFB layer) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 47006;
    serialize(&function_id, msg_out.stream);
    

    serialize(&layer, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrDestroyPassthroughLayerFB: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrPassthroughLayerPauseFB(XrPassthroughLayerFB layer) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 47008;
    serialize(&function_id, msg_out.stream);
    

    serialize(&layer, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrPassthroughLayerPauseFB: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrPassthroughLayerResumeFB(XrPassthroughLayerFB layer) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 47009;
    serialize(&function_id, msg_out.stream);
    

    serialize(&layer, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrPassthroughLayerResumeFB: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrPassthroughLayerSetStyleFB(XrPassthroughLayerFB layer, const XrPassthroughStyleFB* style) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 47010;
    serialize(&function_id, msg_out.stream);
    

    serialize(&layer, msg_out.stream);

    

    serialize_ptr(style, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrPassthroughLayerSetStyleFB: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrCreateGeometryInstanceFB(XrSession session, const XrGeometryInstanceCreateInfoFB* createInfo, XrGeometryInstanceFB* outGeometryInstance) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 47001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(createInfo, 1, msg_out.stream);

    

    serialize_ptr(outGeometryInstance, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&outGeometryInstance, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrCreateGeometryInstanceFB: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrDestroyGeometryInstanceFB(XrGeometryInstanceFB instance) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 47004;
    serialize(&function_id, msg_out.stream);
    

    serialize(&instance, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrDestroyGeometryInstanceFB: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrGeometryInstanceSetTransformFB(XrGeometryInstanceFB instance, const XrGeometryInstanceTransformFB* transformation) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 47007;
    serialize(&function_id, msg_out.stream);
    

    serialize(&instance, msg_out.stream);

    

    serialize_ptr(transformation, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGeometryInstanceSetTransformFB: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_FB_passthrough
#ifdef XRTRANSPORT_EXT_XR_FB_render_model

XRAPI_ATTR XrResult XRAPI_CALL xrEnumerateRenderModelPathsFB(XrSession session, uint32_t pathCapacityInput, uint32_t* pathCountOutput, XrRenderModelPathInfoFB* paths) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 49001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize(&pathCapacityInput, msg_out.stream);

    

    serialize_ptr(pathCountOutput, 1, msg_out.stream);

    

    
    serialize_ptr(paths, pathCapacityInput, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&pathCountOutput, msg_in.stream, true);

    
    deserialize_ptr(&paths, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrEnumerateRenderModelPathsFB: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrGetRenderModelPropertiesFB(XrSession session, XrPath path, XrRenderModelPropertiesFB* properties) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 49002;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize(&path, msg_out.stream);

    

    serialize_ptr(properties, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&properties, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetRenderModelPropertiesFB: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrLoadRenderModelFB(XrSession session, const XrRenderModelLoadInfoFB* info, XrRenderModelBufferFB* buffer) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 49003;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(info, 1, msg_out.stream);

    

    serialize_ptr(buffer, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_xr(&info->next, msg_in.stream, true);

    
    deserialize_ptr(&buffer, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrLoadRenderModelFB: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_FB_render_model
#ifdef XRTRANSPORT_EXT_XR_KHR_binding_modification
#endif // XRTRANSPORT_EXT_XR_KHR_binding_modification
#ifdef XRTRANSPORT_EXT_XR_VARJO_foveated_rendering
#endif // XRTRANSPORT_EXT_XR_VARJO_foveated_rendering
#ifdef XRTRANSPORT_EXT_XR_VARJO_composition_layer_depth_test
#endif // XRTRANSPORT_EXT_XR_VARJO_composition_layer_depth_test
#ifdef XRTRANSPORT_EXT_XR_VARJO_environment_depth_estimation

XRAPI_ATTR XrResult XRAPI_CALL xrSetEnvironmentDepthEstimationVARJO(XrSession session, XrBool32 enabled) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 142001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize(&enabled, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrSetEnvironmentDepthEstimationVARJO: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_VARJO_environment_depth_estimation
#ifdef XRTRANSPORT_EXT_XR_VARJO_marker_tracking

XRAPI_ATTR XrResult XRAPI_CALL xrSetMarkerTrackingVARJO(XrSession session, XrBool32 enabled) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 144005;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize(&enabled, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrSetMarkerTrackingVARJO: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrSetMarkerTrackingTimeoutVARJO(XrSession session, uint64_t markerId, XrDuration timeout) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 144004;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize(&markerId, msg_out.stream);

    

    serialize(&timeout, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrSetMarkerTrackingTimeoutVARJO: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrSetMarkerTrackingPredictionVARJO(XrSession session, uint64_t markerId, XrBool32 enable) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 144003;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize(&markerId, msg_out.stream);

    

    serialize(&enable, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrSetMarkerTrackingPredictionVARJO: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrGetMarkerSizeVARJO(XrSession session, uint64_t markerId, XrExtent2Df* size) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 144002;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize(&markerId, msg_out.stream);

    

    serialize_ptr(size, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&size, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetMarkerSizeVARJO: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrCreateMarkerSpaceVARJO(XrSession session, const XrMarkerSpaceCreateInfoVARJO* createInfo, XrSpace* space) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 144001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(createInfo, 1, msg_out.stream);

    

    serialize_ptr(space, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&space, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrCreateMarkerSpaceVARJO: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_VARJO_marker_tracking
#ifdef XRTRANSPORT_EXT_XR_VARJO_view_offset

XRAPI_ATTR XrResult XRAPI_CALL xrSetViewOffsetVARJO(XrSession session, float offset) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 145001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize(&offset, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrSetViewOffsetVARJO: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_VARJO_view_offset
#ifdef XRTRANSPORT_EXT_XR_ML_frame_end_info
#endif // XRTRANSPORT_EXT_XR_ML_frame_end_info
#ifdef XRTRANSPORT_EXT_XR_ML_global_dimmer
#endif // XRTRANSPORT_EXT_XR_ML_global_dimmer
#ifdef XRTRANSPORT_EXT_XR_ML_compat

XRAPI_ATTR XrResult XRAPI_CALL xrCreateSpaceFromCoordinateFrameUIDML(XrSession session, const XrCoordinateSpaceCreateInfoML* createInfo, XrSpace* space) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 112001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(createInfo, 1, msg_out.stream);

    

    serialize_ptr(space, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&space, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrCreateSpaceFromCoordinateFrameUIDML: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_ML_compat
#ifdef XRTRANSPORT_EXT_XR_ML_marker_understanding

XRAPI_ATTR XrResult XRAPI_CALL xrCreateMarkerDetectorML(XrSession session, const XrMarkerDetectorCreateInfoML* createInfo, XrMarkerDetectorML* markerDetector) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 117001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(createInfo, 1, msg_out.stream);

    

    serialize_ptr(markerDetector, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&markerDetector, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrCreateMarkerDetectorML: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrDestroyMarkerDetectorML(XrMarkerDetectorML markerDetector) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 117003;
    serialize(&function_id, msg_out.stream);
    

    serialize(&markerDetector, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrDestroyMarkerDetectorML: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrSnapshotMarkerDetectorML(XrMarkerDetectorML markerDetector, XrMarkerDetectorSnapshotInfoML* snapshotInfo) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 117010;
    serialize(&function_id, msg_out.stream);
    

    serialize(&markerDetector, msg_out.stream);

    

    serialize_ptr(snapshotInfo, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&snapshotInfo, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrSnapshotMarkerDetectorML: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrGetMarkerDetectorStateML(XrMarkerDetectorML markerDetector, XrMarkerDetectorStateML* state) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 117004;
    serialize(&function_id, msg_out.stream);
    

    serialize(&markerDetector, msg_out.stream);

    

    serialize_ptr(state, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&state, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetMarkerDetectorStateML: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrGetMarkersML(XrMarkerDetectorML markerDetector, uint32_t markerCapacityInput, uint32_t* markerCountOutput, XrMarkerML* markers) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 117009;
    serialize(&function_id, msg_out.stream);
    

    serialize(&markerDetector, msg_out.stream);

    

    serialize(&markerCapacityInput, msg_out.stream);

    

    serialize_ptr(markerCountOutput, 1, msg_out.stream);

    

    
    serialize_ptr(markers, markerCapacityInput, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&markerCountOutput, msg_in.stream, true);

    
    deserialize_ptr(&markers, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetMarkersML: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrGetMarkerReprojectionErrorML(XrMarkerDetectorML markerDetector, XrMarkerML marker, float* reprojectionErrorMeters) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 117007;
    serialize(&function_id, msg_out.stream);
    

    serialize(&markerDetector, msg_out.stream);

    

    serialize(&marker, msg_out.stream);

    

    serialize_ptr(reprojectionErrorMeters, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&reprojectionErrorMeters, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetMarkerReprojectionErrorML: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrGetMarkerLengthML(XrMarkerDetectorML markerDetector, XrMarkerML marker, float* meters) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 117005;
    serialize(&function_id, msg_out.stream);
    

    serialize(&markerDetector, msg_out.stream);

    

    serialize(&marker, msg_out.stream);

    

    serialize_ptr(meters, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&meters, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetMarkerLengthML: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrGetMarkerNumberML(XrMarkerDetectorML markerDetector, XrMarkerML marker, uint64_t* number) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 117006;
    serialize(&function_id, msg_out.stream);
    

    serialize(&markerDetector, msg_out.stream);

    

    serialize(&marker, msg_out.stream);

    

    serialize_ptr(number, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&number, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetMarkerNumberML: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrGetMarkerStringML(XrMarkerDetectorML markerDetector, XrMarkerML marker, uint32_t bufferCapacityInput, uint32_t* bufferCountOutput, char* buffer) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 117008;
    serialize(&function_id, msg_out.stream);
    

    serialize(&markerDetector, msg_out.stream);

    

    serialize(&marker, msg_out.stream);

    

    serialize(&bufferCapacityInput, msg_out.stream);

    

    serialize_ptr(bufferCountOutput, 1, msg_out.stream);

    

    
    serialize_ptr(buffer, bufferCapacityInput, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&bufferCountOutput, msg_in.stream, true);

    
    deserialize_ptr(&buffer, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetMarkerStringML: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrCreateMarkerSpaceML(XrSession session, const XrMarkerSpaceCreateInfoML* createInfo, XrSpace* space) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 117002;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(createInfo, 1, msg_out.stream);

    

    serialize_ptr(space, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&space, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrCreateMarkerSpaceML: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_ML_marker_understanding
#ifdef XRTRANSPORT_EXT_XR_ML_localization_map

XRAPI_ATTR XrResult XRAPI_CALL xrEnableLocalizationEventsML(XrSession session, const XrLocalizationEnableEventsInfoML* info) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 116003;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(info, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrEnableLocalizationEventsML: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrQueryLocalizationMapsML(XrSession session, const XrLocalizationMapQueryInfoBaseHeaderML* queryInfo, uint32_t mapCapacityInput, uint32_t* mapCountOutput, XrLocalizationMapML* maps) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 116006;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_xr(queryInfo, msg_out.stream);

    

    serialize(&mapCapacityInput, msg_out.stream);

    

    serialize_ptr(mapCountOutput, 1, msg_out.stream);

    

    
    serialize_ptr(maps, mapCapacityInput, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&mapCountOutput, msg_in.stream, true);

    
    deserialize_ptr(&maps, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrQueryLocalizationMapsML: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrRequestMapLocalizationML(XrSession session, const XrMapLocalizationRequestInfoML* requestInfo) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 116007;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(requestInfo, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrRequestMapLocalizationML: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrImportLocalizationMapML(XrSession session, const XrLocalizationMapImportInfoML* importInfo, XrUuidEXT* mapUuid) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 116005;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(importInfo, 1, msg_out.stream);

    

    serialize_ptr(mapUuid, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&importInfo->data, msg_in.stream, true);

    
    deserialize_ptr(&mapUuid, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrImportLocalizationMapML: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrCreateExportedLocalizationMapML(XrSession session, const XrUuidEXT* mapUuid, XrExportedLocalizationMapML* map) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 116001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(mapUuid, 1, msg_out.stream);

    

    serialize_ptr(map, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&map, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrCreateExportedLocalizationMapML: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrDestroyExportedLocalizationMapML(XrExportedLocalizationMapML map) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 116002;
    serialize(&function_id, msg_out.stream);
    

    serialize(&map, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrDestroyExportedLocalizationMapML: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrGetExportedLocalizationMapDataML(XrExportedLocalizationMapML map, uint32_t bufferCapacityInput, uint32_t* bufferCountOutput, char* buffer) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 116004;
    serialize(&function_id, msg_out.stream);
    

    serialize(&map, msg_out.stream);

    

    serialize(&bufferCapacityInput, msg_out.stream);

    

    serialize_ptr(bufferCountOutput, 1, msg_out.stream);

    

    
    serialize_ptr(buffer, bufferCapacityInput, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&bufferCountOutput, msg_in.stream, true);

    
    deserialize_ptr(&buffer, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetExportedLocalizationMapDataML: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_ML_localization_map
#ifdef XRTRANSPORT_EXT_XR_ML_spatial_anchors

XRAPI_ATTR XrResult XRAPI_CALL xrCreateSpatialAnchorsAsyncML(XrSession session, const XrSpatialAnchorsCreateInfoBaseHeaderML* createInfo, XrFutureEXT* future) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 118001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_xr(createInfo, msg_out.stream);

    

    serialize_ptr(future, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&future, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrCreateSpatialAnchorsAsyncML: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrCreateSpatialAnchorsCompleteML(XrSession session, XrFutureEXT future, XrCreateSpatialAnchorsCompletionML* completion) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 118002;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize(&future, msg_out.stream);

    

    serialize_ptr(completion, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&completion, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrCreateSpatialAnchorsCompleteML: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrGetSpatialAnchorStateML(XrSpace anchor, XrSpatialAnchorStateML* state) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 118003;
    serialize(&function_id, msg_out.stream);
    

    serialize(&anchor, msg_out.stream);

    

    serialize_ptr(state, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&state, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetSpatialAnchorStateML: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_ML_spatial_anchors
#ifdef XRTRANSPORT_EXT_XR_ML_spatial_anchors_storage

XRAPI_ATTR XrResult XRAPI_CALL xrCreateSpatialAnchorsStorageML(XrSession session, const XrSpatialAnchorsCreateStorageInfoML* createInfo, XrSpatialAnchorsStorageML* storage) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 119001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(createInfo, 1, msg_out.stream);

    

    serialize_ptr(storage, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&storage, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrCreateSpatialAnchorsStorageML: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrDestroySpatialAnchorsStorageML(XrSpatialAnchorsStorageML storage) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 119004;
    serialize(&function_id, msg_out.stream);
    

    serialize(&storage, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrDestroySpatialAnchorsStorageML: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrQuerySpatialAnchorsAsyncML(XrSpatialAnchorsStorageML storage, const XrSpatialAnchorsQueryInfoBaseHeaderML* queryInfo, XrFutureEXT* future) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 119007;
    serialize(&function_id, msg_out.stream);
    

    serialize(&storage, msg_out.stream);

    

    serialize_xr(queryInfo, msg_out.stream);

    

    serialize_ptr(future, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&future, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrQuerySpatialAnchorsAsyncML: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrQuerySpatialAnchorsCompleteML(XrSpatialAnchorsStorageML storage, XrFutureEXT future, XrSpatialAnchorsQueryCompletionML* completion) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 119008;
    serialize(&function_id, msg_out.stream);
    

    serialize(&storage, msg_out.stream);

    

    serialize(&future, msg_out.stream);

    

    serialize_ptr(completion, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&completion, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrQuerySpatialAnchorsCompleteML: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrPublishSpatialAnchorsAsyncML(XrSpatialAnchorsStorageML storage, const XrSpatialAnchorsPublishInfoML* publishInfo, XrFutureEXT* future) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 119005;
    serialize(&function_id, msg_out.stream);
    

    serialize(&storage, msg_out.stream);

    

    serialize_ptr(publishInfo, 1, msg_out.stream);

    

    serialize_ptr(future, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&future, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrPublishSpatialAnchorsAsyncML: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrPublishSpatialAnchorsCompleteML(XrSpatialAnchorsStorageML storage, XrFutureEXT future, XrSpatialAnchorsPublishCompletionML* completion) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 119006;
    serialize(&function_id, msg_out.stream);
    

    serialize(&storage, msg_out.stream);

    

    serialize(&future, msg_out.stream);

    

    serialize_ptr(completion, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&completion, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrPublishSpatialAnchorsCompleteML: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrDeleteSpatialAnchorsAsyncML(XrSpatialAnchorsStorageML storage, const XrSpatialAnchorsDeleteInfoML* deleteInfo, XrFutureEXT* future) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 119002;
    serialize(&function_id, msg_out.stream);
    

    serialize(&storage, msg_out.stream);

    

    serialize_ptr(deleteInfo, 1, msg_out.stream);

    

    serialize_ptr(future, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&future, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrDeleteSpatialAnchorsAsyncML: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrDeleteSpatialAnchorsCompleteML(XrSpatialAnchorsStorageML storage, XrFutureEXT future, XrSpatialAnchorsDeleteCompletionML* completion) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 119003;
    serialize(&function_id, msg_out.stream);
    

    serialize(&storage, msg_out.stream);

    

    serialize(&future, msg_out.stream);

    

    serialize_ptr(completion, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&completion, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrDeleteSpatialAnchorsCompleteML: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrUpdateSpatialAnchorsExpirationAsyncML(XrSpatialAnchorsStorageML storage, const XrSpatialAnchorsUpdateExpirationInfoML* updateInfo, XrFutureEXT* future) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 119009;
    serialize(&function_id, msg_out.stream);
    

    serialize(&storage, msg_out.stream);

    

    serialize_ptr(updateInfo, 1, msg_out.stream);

    

    serialize_ptr(future, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&future, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrUpdateSpatialAnchorsExpirationAsyncML: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrUpdateSpatialAnchorsExpirationCompleteML(XrSpatialAnchorsStorageML storage, XrFutureEXT future, XrSpatialAnchorsUpdateExpirationCompletionML* completion) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 119010;
    serialize(&function_id, msg_out.stream);
    

    serialize(&storage, msg_out.stream);

    

    serialize(&future, msg_out.stream);

    

    serialize_ptr(completion, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&completion, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrUpdateSpatialAnchorsExpirationCompleteML: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_ML_spatial_anchors_storage
#ifdef XRTRANSPORT_EXT_XR_ML_user_calibration

XRAPI_ATTR XrResult XRAPI_CALL xrEnableUserCalibrationEventsML(XrInstance instance, const XrUserCalibrationEnableEventsInfoML* enableInfo) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 121001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&instance, msg_out.stream);

    

    serialize_ptr(enableInfo, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrEnableUserCalibrationEventsML: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_ML_user_calibration
#ifdef XRTRANSPORT_EXT_XR_MSFT_spatial_anchor_persistence

XRAPI_ATTR XrResult XRAPI_CALL xrCreateSpatialAnchorStoreConnectionMSFT(XrSession session, XrSpatialAnchorStoreConnectionMSFT* spatialAnchorStore) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 135003;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(spatialAnchorStore, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&spatialAnchorStore, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrCreateSpatialAnchorStoreConnectionMSFT: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrDestroySpatialAnchorStoreConnectionMSFT(XrSpatialAnchorStoreConnectionMSFT spatialAnchorStore) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 135004;
    serialize(&function_id, msg_out.stream);
    

    serialize(&spatialAnchorStore, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrDestroySpatialAnchorStoreConnectionMSFT: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrPersistSpatialAnchorMSFT(XrSpatialAnchorStoreConnectionMSFT spatialAnchorStore, const XrSpatialAnchorPersistenceInfoMSFT* spatialAnchorPersistenceInfo) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 135006;
    serialize(&function_id, msg_out.stream);
    

    serialize(&spatialAnchorStore, msg_out.stream);

    

    serialize_ptr(spatialAnchorPersistenceInfo, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrPersistSpatialAnchorMSFT: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrEnumeratePersistedSpatialAnchorNamesMSFT(XrSpatialAnchorStoreConnectionMSFT spatialAnchorStore, uint32_t spatialAnchorNameCapacityInput, uint32_t* spatialAnchorNameCountOutput, XrSpatialAnchorPersistenceNameMSFT* spatialAnchorNames) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 135005;
    serialize(&function_id, msg_out.stream);
    

    serialize(&spatialAnchorStore, msg_out.stream);

    

    serialize(&spatialAnchorNameCapacityInput, msg_out.stream);

    

    serialize_ptr(spatialAnchorNameCountOutput, 1, msg_out.stream);

    

    
    serialize_ptr(spatialAnchorNames, spatialAnchorNameCapacityInput, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&spatialAnchorNameCountOutput, msg_in.stream, true);

    
    deserialize_ptr(&spatialAnchorNames, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrEnumeratePersistedSpatialAnchorNamesMSFT: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrCreateSpatialAnchorFromPersistedNameMSFT(XrSession session, const XrSpatialAnchorFromPersistedAnchorCreateInfoMSFT* spatialAnchorCreateInfo, XrSpatialAnchorMSFT* spatialAnchor) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 135002;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(spatialAnchorCreateInfo, 1, msg_out.stream);

    

    serialize_ptr(spatialAnchor, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&spatialAnchor, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrCreateSpatialAnchorFromPersistedNameMSFT: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrUnpersistSpatialAnchorMSFT(XrSpatialAnchorStoreConnectionMSFT spatialAnchorStore, const XrSpatialAnchorPersistenceNameMSFT* spatialAnchorPersistenceName) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 135007;
    serialize(&function_id, msg_out.stream);
    

    serialize(&spatialAnchorStore, msg_out.stream);

    

    serialize_ptr(spatialAnchorPersistenceName, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrUnpersistSpatialAnchorMSFT: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrClearSpatialAnchorStoreMSFT(XrSpatialAnchorStoreConnectionMSFT spatialAnchorStore) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 135001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&spatialAnchorStore, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrClearSpatialAnchorStoreMSFT: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_MSFT_spatial_anchor_persistence
#ifdef XRTRANSPORT_EXT_XR_MSFT_scene_marker

XRAPI_ATTR XrResult XRAPI_CALL xrGetSceneMarkerRawDataMSFT(XrSceneMSFT scene, const XrUuidMSFT* markerId, uint32_t bufferCapacityInput, uint32_t* bufferCountOutput, uint8_t* buffer) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 130002;
    serialize(&function_id, msg_out.stream);
    

    serialize(&scene, msg_out.stream);

    

    serialize_ptr(markerId, 1, msg_out.stream);

    

    serialize(&bufferCapacityInput, msg_out.stream);

    

    serialize_ptr(bufferCountOutput, 1, msg_out.stream);

    

    
    serialize_ptr(buffer, bufferCapacityInput, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&bufferCountOutput, msg_in.stream, true);

    
    deserialize_ptr(&buffer, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetSceneMarkerRawDataMSFT: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrGetSceneMarkerDecodedStringMSFT(XrSceneMSFT scene, const XrUuidMSFT* markerId, uint32_t bufferCapacityInput, uint32_t* bufferCountOutput, char* buffer) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 130001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&scene, msg_out.stream);

    

    serialize_ptr(markerId, 1, msg_out.stream);

    

    serialize(&bufferCapacityInput, msg_out.stream);

    

    serialize_ptr(bufferCountOutput, 1, msg_out.stream);

    

    
    serialize_ptr(buffer, bufferCapacityInput, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&bufferCountOutput, msg_in.stream, true);

    
    deserialize_ptr(&buffer, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetSceneMarkerDecodedStringMSFT: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_MSFT_scene_marker
#ifdef XRTRANSPORT_EXT_XR_KHR_extended_struct_name_lengths

XRAPI_ATTR XrResult XRAPI_CALL xrStructureTypeToString2KHR(XrInstance instance, XrStructureType value, char buffer[XR_MAX_STRUCTURE_NAME_SIZE_EXTENDED_KHR]) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 84001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&instance, msg_out.stream);

    

    serialize(&value, msg_out.stream);

    

    serialize_array(buffer, XR_MAX_STRUCTURE_NAME_SIZE_EXTENDED_KHR, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&buffer, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrStructureTypeToString2KHR: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_KHR_extended_struct_name_lengths
#ifdef XRTRANSPORT_EXT_XR_FB_spatial_entity_query

XRAPI_ATTR XrResult XRAPI_CALL xrQuerySpacesFB(XrSession session, const XrSpaceQueryInfoBaseHeaderFB* info, XrAsyncRequestIdFB* requestId) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 55001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_xr(info, msg_out.stream);

    

    serialize_ptr(requestId, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&requestId, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrQuerySpacesFB: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrRetrieveSpaceQueryResultsFB(XrSession session, XrAsyncRequestIdFB requestId, XrSpaceQueryResultsFB* results) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 55002;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize(&requestId, msg_out.stream);

    

    serialize_ptr(results, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&results, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrRetrieveSpaceQueryResultsFB: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_FB_spatial_entity_query
#ifdef XRTRANSPORT_EXT_XR_FB_spatial_entity_storage

XRAPI_ATTR XrResult XRAPI_CALL xrSaveSpaceFB(XrSession session, const XrSpaceSaveInfoFB* info, XrAsyncRequestIdFB* requestId) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 57002;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(info, 1, msg_out.stream);

    

    serialize_ptr(requestId, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&requestId, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrSaveSpaceFB: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrEraseSpaceFB(XrSession session, const XrSpaceEraseInfoFB* info, XrAsyncRequestIdFB* requestId) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 57001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(info, 1, msg_out.stream);

    

    serialize_ptr(requestId, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&requestId, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrEraseSpaceFB: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_FB_spatial_entity_storage
#ifdef XRTRANSPORT_EXT_XR_OCULUS_audio_device_guid

XRAPI_ATTR XrResult XRAPI_CALL xrGetAudioOutputDeviceGuidOculus(XrInstance instance, wchar_t buffer[XR_MAX_AUDIO_DEVICE_STR_SIZE_OCULUS]) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 137002;
    serialize(&function_id, msg_out.stream);
    

    serialize(&instance, msg_out.stream);

    

    serialize_array(buffer, XR_MAX_AUDIO_DEVICE_STR_SIZE_OCULUS, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&buffer, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetAudioOutputDeviceGuidOculus: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrGetAudioInputDeviceGuidOculus(XrInstance instance, wchar_t buffer[XR_MAX_AUDIO_DEVICE_STR_SIZE_OCULUS]) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 137001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&instance, msg_out.stream);

    

    serialize_array(buffer, XR_MAX_AUDIO_DEVICE_STR_SIZE_OCULUS, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&buffer, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetAudioInputDeviceGuidOculus: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_OCULUS_audio_device_guid
#ifdef XRTRANSPORT_EXT_XR_FB_foveation_vulkan
#endif // XRTRANSPORT_EXT_XR_FB_foveation_vulkan
#ifdef XRTRANSPORT_EXT_XR_FB_swapchain_update_state_android_surface
#endif // XRTRANSPORT_EXT_XR_FB_swapchain_update_state_android_surface
#ifdef XRTRANSPORT_EXT_XR_FB_swapchain_update_state_opengl_es
#endif // XRTRANSPORT_EXT_XR_FB_swapchain_update_state_opengl_es
#ifdef XRTRANSPORT_EXT_XR_FB_swapchain_update_state_vulkan
#endif // XRTRANSPORT_EXT_XR_FB_swapchain_update_state_vulkan
#ifdef XRTRANSPORT_EXT_XR_FB_spatial_entity_sharing

XRAPI_ATTR XrResult XRAPI_CALL xrShareSpacesFB(XrSession session, const XrSpaceShareInfoFB* info, XrAsyncRequestIdFB* requestId) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 56001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(info, 1, msg_out.stream);

    

    serialize_ptr(requestId, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&info->spaces, msg_in.stream, true);

    
    deserialize_ptr(&info->users, msg_in.stream, true);

    
    deserialize_ptr(&requestId, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrShareSpacesFB: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_FB_spatial_entity_sharing
#ifdef XRTRANSPORT_EXT_XR_FB_space_warp
#endif // XRTRANSPORT_EXT_XR_FB_space_warp
#ifdef XRTRANSPORT_EXT_XR_FB_haptic_amplitude_envelope
#endif // XRTRANSPORT_EXT_XR_FB_haptic_amplitude_envelope
#ifdef XRTRANSPORT_EXT_XR_FB_scene

XRAPI_ATTR XrResult XRAPI_CALL xrGetSpaceBoundingBox2DFB(XrSession session, XrSpace space, XrRect2Df* boundingBox2DOutput) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 50002;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize(&space, msg_out.stream);

    

    serialize_ptr(boundingBox2DOutput, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&boundingBox2DOutput, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetSpaceBoundingBox2DFB: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrGetSpaceBoundingBox3DFB(XrSession session, XrSpace space, XrRect3DfFB* boundingBox3DOutput) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 50003;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize(&space, msg_out.stream);

    

    serialize_ptr(boundingBox3DOutput, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&boundingBox3DOutput, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetSpaceBoundingBox3DFB: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrGetSpaceSemanticLabelsFB(XrSession session, XrSpace space, XrSemanticLabelsFB* semanticLabelsOutput) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 50005;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize(&space, msg_out.stream);

    

    serialize_ptr(semanticLabelsOutput, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&semanticLabelsOutput, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetSpaceSemanticLabelsFB: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrGetSpaceBoundary2DFB(XrSession session, XrSpace space, XrBoundary2DFB* boundary2DOutput) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 50001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize(&space, msg_out.stream);

    

    serialize_ptr(boundary2DOutput, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&boundary2DOutput, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetSpaceBoundary2DFB: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrGetSpaceRoomLayoutFB(XrSession session, XrSpace space, XrRoomLayoutFB* roomLayoutOutput) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 50004;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize(&space, msg_out.stream);

    

    serialize_ptr(roomLayoutOutput, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&roomLayoutOutput, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetSpaceRoomLayoutFB: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_FB_scene
#ifdef XRTRANSPORT_EXT_XR_ALMALENCE_digital_lens_control

XRAPI_ATTR XrResult XRAPI_CALL xrSetDigitalLensControlALMALENCE(XrSession session, const XrDigitalLensControlALMALENCE* digitalLensControl) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 1001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(digitalLensControl, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrSetDigitalLensControlALMALENCE: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_ALMALENCE_digital_lens_control
#ifdef XRTRANSPORT_EXT_XR_FB_scene_capture

XRAPI_ATTR XrResult XRAPI_CALL xrRequestSceneCaptureFB(XrSession session, const XrSceneCaptureRequestInfoFB* info, XrAsyncRequestIdFB* requestId) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 51001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(info, 1, msg_out.stream);

    

    serialize_ptr(requestId, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&requestId, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrRequestSceneCaptureFB: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_FB_scene_capture
#ifdef XRTRANSPORT_EXT_XR_FB_spatial_entity_container

XRAPI_ATTR XrResult XRAPI_CALL xrGetSpaceContainerFB(XrSession session, XrSpace space, XrSpaceContainerFB* spaceContainerOutput) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 54001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize(&space, msg_out.stream);

    

    serialize_ptr(spaceContainerOutput, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&spaceContainerOutput, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetSpaceContainerFB: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_FB_spatial_entity_container
#ifdef XRTRANSPORT_EXT_XR_META_foveation_eye_tracked

XRAPI_ATTR XrResult XRAPI_CALL xrGetFoveationEyeTrackedStateMETA(XrSession session, XrFoveationEyeTrackedStateMETA* foveationState) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 98001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(foveationState, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&foveationState, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetFoveationEyeTrackedStateMETA: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_META_foveation_eye_tracked
#ifdef XRTRANSPORT_EXT_XR_FB_face_tracking

XRAPI_ATTR XrResult XRAPI_CALL xrCreateFaceTrackerFB(XrSession session, const XrFaceTrackerCreateInfoFB* createInfo, XrFaceTrackerFB* faceTracker) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 36001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(createInfo, 1, msg_out.stream);

    

    serialize_ptr(faceTracker, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&faceTracker, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrCreateFaceTrackerFB: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrDestroyFaceTrackerFB(XrFaceTrackerFB faceTracker) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 36002;
    serialize(&function_id, msg_out.stream);
    

    serialize(&faceTracker, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrDestroyFaceTrackerFB: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrGetFaceExpressionWeightsFB(XrFaceTrackerFB faceTracker, const XrFaceExpressionInfoFB* expressionInfo, XrFaceExpressionWeightsFB* expressionWeights) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 36003;
    serialize(&function_id, msg_out.stream);
    

    serialize(&faceTracker, msg_out.stream);

    

    serialize_ptr(expressionInfo, 1, msg_out.stream);

    

    serialize_ptr(expressionWeights, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&expressionWeights, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetFaceExpressionWeightsFB: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_FB_face_tracking
#ifdef XRTRANSPORT_EXT_XR_FB_eye_tracking_social

XRAPI_ATTR XrResult XRAPI_CALL xrCreateEyeTrackerFB(XrSession session, const XrEyeTrackerCreateInfoFB* createInfo, XrEyeTrackerFB* eyeTracker) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 35001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(createInfo, 1, msg_out.stream);

    

    serialize_ptr(eyeTracker, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&eyeTracker, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrCreateEyeTrackerFB: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrDestroyEyeTrackerFB(XrEyeTrackerFB eyeTracker) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 35002;
    serialize(&function_id, msg_out.stream);
    

    serialize(&eyeTracker, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrDestroyEyeTrackerFB: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrGetEyeGazesFB(XrEyeTrackerFB eyeTracker, const XrEyeGazesInfoFB* gazeInfo, XrEyeGazesFB* eyeGazes) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 35003;
    serialize(&function_id, msg_out.stream);
    

    serialize(&eyeTracker, msg_out.stream);

    

    serialize_ptr(gazeInfo, 1, msg_out.stream);

    

    serialize_ptr(eyeGazes, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&eyeGazes, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetEyeGazesFB: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_FB_eye_tracking_social
#ifdef XRTRANSPORT_EXT_XR_FB_passthrough_keyboard_hands

XRAPI_ATTR XrResult XRAPI_CALL xrPassthroughLayerSetKeyboardHandsIntensityFB(XrPassthroughLayerFB layer, const XrPassthroughKeyboardHandsIntensityFB* intensity) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 48001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&layer, msg_out.stream);

    

    serialize_ptr(intensity, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrPassthroughLayerSetKeyboardHandsIntensityFB: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_FB_passthrough_keyboard_hands
#ifdef XRTRANSPORT_EXT_XR_FB_composition_layer_settings
#endif // XRTRANSPORT_EXT_XR_FB_composition_layer_settings
#ifdef XRTRANSPORT_EXT_XR_FB_haptic_pcm

XRAPI_ATTR XrResult XRAPI_CALL xrGetDeviceSampleRateFB(XrSession session, const XrHapticActionInfo* hapticActionInfo, XrDevicePcmSampleRateGetInfoFB* deviceSampleRate) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 45001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(hapticActionInfo, 1, msg_out.stream);

    

    serialize_ptr(deviceSampleRate, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&deviceSampleRate, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetDeviceSampleRateFB: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_FB_haptic_pcm
#ifdef XRTRANSPORT_EXT_XR_EXT_frame_synthesis
#endif // XRTRANSPORT_EXT_XR_EXT_frame_synthesis
#ifdef XRTRANSPORT_EXT_XR_FB_composition_layer_depth_test
#endif // XRTRANSPORT_EXT_XR_FB_composition_layer_depth_test
#ifdef XRTRANSPORT_EXT_XR_META_local_dimming
#endif // XRTRANSPORT_EXT_XR_META_local_dimming
#ifdef XRTRANSPORT_EXT_XR_META_passthrough_preferences

XRAPI_ATTR XrResult XRAPI_CALL xrGetPassthroughPreferencesMETA(XrSession session, XrPassthroughPreferencesMETA* preferences) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 103001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(preferences, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&preferences, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetPassthroughPreferencesMETA: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_META_passthrough_preferences
#ifdef XRTRANSPORT_EXT_XR_META_virtual_keyboard

XRAPI_ATTR XrResult XRAPI_CALL xrCreateVirtualKeyboardMETA(XrSession session, const XrVirtualKeyboardCreateInfoMETA* createInfo, XrVirtualKeyboardMETA* keyboard) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 110002;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(createInfo, 1, msg_out.stream);

    

    serialize_ptr(keyboard, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&keyboard, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrCreateVirtualKeyboardMETA: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrDestroyVirtualKeyboardMETA(XrVirtualKeyboardMETA keyboard) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 110004;
    serialize(&function_id, msg_out.stream);
    

    serialize(&keyboard, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrDestroyVirtualKeyboardMETA: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrCreateVirtualKeyboardSpaceMETA(XrSession session, XrVirtualKeyboardMETA keyboard, const XrVirtualKeyboardSpaceCreateInfoMETA* createInfo, XrSpace* keyboardSpace) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 110003;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize(&keyboard, msg_out.stream);

    

    serialize_ptr(createInfo, 1, msg_out.stream);

    

    serialize_ptr(keyboardSpace, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&keyboardSpace, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrCreateVirtualKeyboardSpaceMETA: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrSuggestVirtualKeyboardLocationMETA(XrVirtualKeyboardMETA keyboard, const XrVirtualKeyboardLocationInfoMETA* locationInfo) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 110011;
    serialize(&function_id, msg_out.stream);
    

    serialize(&keyboard, msg_out.stream);

    

    serialize_ptr(locationInfo, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrSuggestVirtualKeyboardLocationMETA: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrGetVirtualKeyboardScaleMETA(XrVirtualKeyboardMETA keyboard, float* scale) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 110007;
    serialize(&function_id, msg_out.stream);
    

    serialize(&keyboard, msg_out.stream);

    

    serialize_ptr(scale, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&scale, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetVirtualKeyboardScaleMETA: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrSetVirtualKeyboardModelVisibilityMETA(XrVirtualKeyboardMETA keyboard, const XrVirtualKeyboardModelVisibilitySetInfoMETA* modelVisibility) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 110010;
    serialize(&function_id, msg_out.stream);
    

    serialize(&keyboard, msg_out.stream);

    

    serialize_ptr(modelVisibility, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrSetVirtualKeyboardModelVisibilityMETA: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrGetVirtualKeyboardModelAnimationStatesMETA(XrVirtualKeyboardMETA keyboard, XrVirtualKeyboardModelAnimationStatesMETA* animationStates) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 110006;
    serialize(&function_id, msg_out.stream);
    

    serialize(&keyboard, msg_out.stream);

    

    serialize_ptr(animationStates, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&animationStates, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetVirtualKeyboardModelAnimationStatesMETA: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrGetVirtualKeyboardDirtyTexturesMETA(XrVirtualKeyboardMETA keyboard, uint32_t textureIdCapacityInput, uint32_t* textureIdCountOutput, uint64_t* textureIds) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 110005;
    serialize(&function_id, msg_out.stream);
    

    serialize(&keyboard, msg_out.stream);

    

    serialize(&textureIdCapacityInput, msg_out.stream);

    

    serialize_ptr(textureIdCountOutput, 1, msg_out.stream);

    

    
    serialize_ptr(textureIds, textureIdCapacityInput, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&textureIdCountOutput, msg_in.stream, true);

    
    deserialize_ptr(&textureIds, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetVirtualKeyboardDirtyTexturesMETA: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrGetVirtualKeyboardTextureDataMETA(XrVirtualKeyboardMETA keyboard, uint64_t textureId, XrVirtualKeyboardTextureDataMETA* textureData) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 110008;
    serialize(&function_id, msg_out.stream);
    

    serialize(&keyboard, msg_out.stream);

    

    serialize(&textureId, msg_out.stream);

    

    serialize_ptr(textureData, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&textureData, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetVirtualKeyboardTextureDataMETA: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrSendVirtualKeyboardInputMETA(XrVirtualKeyboardMETA keyboard, const XrVirtualKeyboardInputInfoMETA* info, XrPosef* interactorRootPose) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 110009;
    serialize(&function_id, msg_out.stream);
    

    serialize(&keyboard, msg_out.stream);

    

    serialize_ptr(info, 1, msg_out.stream);

    

    serialize_ptr(interactorRootPose, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&interactorRootPose, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrSendVirtualKeyboardInputMETA: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrChangeVirtualKeyboardTextContextMETA(XrVirtualKeyboardMETA keyboard, const XrVirtualKeyboardTextContextChangeInfoMETA* changeInfo) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 110001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&keyboard, msg_out.stream);

    

    serialize_ptr(changeInfo, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrChangeVirtualKeyboardTextContextMETA: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_META_virtual_keyboard
#ifdef XRTRANSPORT_EXT_XR_OCULUS_external_camera

XRAPI_ATTR XrResult XRAPI_CALL xrEnumerateExternalCamerasOCULUS(XrSession session, uint32_t cameraCapacityInput, uint32_t* cameraCountOutput, XrExternalCameraOCULUS* cameras) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 138001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize(&cameraCapacityInput, msg_out.stream);

    

    serialize_ptr(cameraCountOutput, 1, msg_out.stream);

    

    
    serialize_ptr(cameras, cameraCapacityInput, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&cameraCountOutput, msg_in.stream, true);

    
    deserialize_ptr(&cameras, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrEnumerateExternalCamerasOCULUS: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_OCULUS_external_camera
#ifdef XRTRANSPORT_EXT_XR_META_vulkan_swapchain_create_info
#endif // XRTRANSPORT_EXT_XR_META_vulkan_swapchain_create_info
#ifdef XRTRANSPORT_EXT_XR_META_performance_metrics

XRAPI_ATTR XrResult XRAPI_CALL xrEnumeratePerformanceMetricsCounterPathsMETA(XrInstance instance, uint32_t counterPathCapacityInput, uint32_t* counterPathCountOutput, XrPath* counterPaths) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 104001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&instance, msg_out.stream);

    

    serialize(&counterPathCapacityInput, msg_out.stream);

    

    serialize_ptr(counterPathCountOutput, 1, msg_out.stream);

    

    
    serialize_ptr(counterPaths, counterPathCapacityInput, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&counterPathCountOutput, msg_in.stream, true);

    
    deserialize_ptr(&counterPaths, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrEnumeratePerformanceMetricsCounterPathsMETA: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrSetPerformanceMetricsStateMETA(XrSession session, const XrPerformanceMetricsStateMETA* state) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 104004;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(state, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrSetPerformanceMetricsStateMETA: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrGetPerformanceMetricsStateMETA(XrSession session, XrPerformanceMetricsStateMETA* state) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 104002;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(state, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&state, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetPerformanceMetricsStateMETA: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrQueryPerformanceMetricsCounterMETA(XrSession session, XrPath counterPath, XrPerformanceMetricsCounterMETA* counter) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 104003;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize(&counterPath, msg_out.stream);

    

    serialize_ptr(counter, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&counter, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrQueryPerformanceMetricsCounterMETA: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_META_performance_metrics
#ifdef XRTRANSPORT_EXT_XR_FB_spatial_entity_storage_batch

XRAPI_ATTR XrResult XRAPI_CALL xrSaveSpaceListFB(XrSession session, const XrSpaceListSaveInfoFB* info, XrAsyncRequestIdFB* requestId) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 58001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(info, 1, msg_out.stream);

    

    serialize_ptr(requestId, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&info->spaces, msg_in.stream, true);

    
    deserialize_ptr(&requestId, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrSaveSpaceListFB: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_FB_spatial_entity_storage_batch
#ifdef XRTRANSPORT_EXT_XR_FB_spatial_entity_user

XRAPI_ATTR XrResult XRAPI_CALL xrCreateSpaceUserFB(XrSession session, const XrSpaceUserCreateInfoFB* info, XrSpaceUserFB* user) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 59001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(info, 1, msg_out.stream);

    

    serialize_ptr(user, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&user, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrCreateSpaceUserFB: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrGetSpaceUserIdFB(XrSpaceUserFB user, XrSpaceUserIdFB* userId) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 59003;
    serialize(&function_id, msg_out.stream);
    

    serialize(&user, msg_out.stream);

    

    serialize_ptr(userId, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&userId, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetSpaceUserIdFB: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrDestroySpaceUserFB(XrSpaceUserFB user) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 59002;
    serialize(&function_id, msg_out.stream);
    

    serialize(&user, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrDestroySpaceUserFB: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_FB_spatial_entity_user
#ifdef XRTRANSPORT_EXT_XR_META_headset_id
#endif // XRTRANSPORT_EXT_XR_META_headset_id
#ifdef XRTRANSPORT_EXT_XR_META_recommended_layer_resolution

XRAPI_ATTR XrResult XRAPI_CALL xrGetRecommendedLayerResolutionMETA(XrSession session, const XrRecommendedLayerResolutionGetInfoMETA* info, XrRecommendedLayerResolutionMETA* resolution) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 105001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(info, 1, msg_out.stream);

    

    serialize_ptr(resolution, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&resolution, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetRecommendedLayerResolutionMETA: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_META_recommended_layer_resolution
#ifdef XRTRANSPORT_EXT_XR_META_passthrough_color_lut

XRAPI_ATTR XrResult XRAPI_CALL xrCreatePassthroughColorLutMETA(XrPassthroughFB passthrough, const XrPassthroughColorLutCreateInfoMETA* createInfo, XrPassthroughColorLutMETA* colorLut) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 101001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&passthrough, msg_out.stream);

    

    serialize_ptr(createInfo, 1, msg_out.stream);

    

    serialize_ptr(colorLut, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&colorLut, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrCreatePassthroughColorLutMETA: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrDestroyPassthroughColorLutMETA(XrPassthroughColorLutMETA colorLut) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 101002;
    serialize(&function_id, msg_out.stream);
    

    serialize(&colorLut, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrDestroyPassthroughColorLutMETA: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrUpdatePassthroughColorLutMETA(XrPassthroughColorLutMETA colorLut, const XrPassthroughColorLutUpdateInfoMETA* updateInfo) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 101003;
    serialize(&function_id, msg_out.stream);
    

    serialize(&colorLut, msg_out.stream);

    

    serialize_ptr(updateInfo, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrUpdatePassthroughColorLutMETA: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_META_passthrough_color_lut
#ifdef XRTRANSPORT_EXT_XR_META_spatial_entity_mesh

XRAPI_ATTR XrResult XRAPI_CALL xrGetSpaceTriangleMeshMETA(XrSpace space, const XrSpaceTriangleMeshGetInfoMETA* getInfo, XrSpaceTriangleMeshMETA* triangleMeshOutput) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 108001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&space, msg_out.stream);

    

    serialize_ptr(getInfo, 1, msg_out.stream);

    

    serialize_ptr(triangleMeshOutput, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&triangleMeshOutput, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetSpaceTriangleMeshMETA: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_META_spatial_entity_mesh
#ifdef XRTRANSPORT_EXT_XR_META_body_tracking_full_body
#endif // XRTRANSPORT_EXT_XR_META_body_tracking_full_body
#ifdef XRTRANSPORT_EXT_XR_META_passthrough_layer_resumed_event
#endif // XRTRANSPORT_EXT_XR_META_passthrough_layer_resumed_event
#ifdef XRTRANSPORT_EXT_XR_FB_face_tracking2

XRAPI_ATTR XrResult XRAPI_CALL xrCreateFaceTracker2FB(XrSession session, const XrFaceTrackerCreateInfo2FB* createInfo, XrFaceTracker2FB* faceTracker) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 37001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(createInfo, 1, msg_out.stream);

    

    serialize_ptr(faceTracker, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&createInfo->requestedDataSources, msg_in.stream, true);

    
    deserialize_ptr(&faceTracker, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrCreateFaceTracker2FB: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrDestroyFaceTracker2FB(XrFaceTracker2FB faceTracker) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 37002;
    serialize(&function_id, msg_out.stream);
    

    serialize(&faceTracker, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrDestroyFaceTracker2FB: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrGetFaceExpressionWeights2FB(XrFaceTracker2FB faceTracker, const XrFaceExpressionInfo2FB* expressionInfo, XrFaceExpressionWeights2FB* expressionWeights) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 37003;
    serialize(&function_id, msg_out.stream);
    

    serialize(&faceTracker, msg_out.stream);

    

    serialize_ptr(expressionInfo, 1, msg_out.stream);

    

    serialize_ptr(expressionWeights, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&expressionWeights, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetFaceExpressionWeights2FB: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_FB_face_tracking2
#ifdef XRTRANSPORT_EXT_XR_META_spatial_entity_sharing

XRAPI_ATTR XrResult XRAPI_CALL xrShareSpacesMETA(XrSession session, const XrShareSpacesInfoMETA* info, XrAsyncRequestIdFB* requestId) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 109001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(info, 1, msg_out.stream);

    

    serialize_ptr(requestId, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&info->spaces, msg_in.stream, true);

    
    deserialize_ptr(&requestId, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrShareSpacesMETA: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_META_spatial_entity_sharing
#ifdef XRTRANSPORT_EXT_XR_META_environment_depth

XRAPI_ATTR XrResult XRAPI_CALL xrCreateEnvironmentDepthProviderMETA(XrSession session, const XrEnvironmentDepthProviderCreateInfoMETA* createInfo, XrEnvironmentDepthProviderMETA* environmentDepthProvider) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 97002;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(createInfo, 1, msg_out.stream);

    

    serialize_ptr(environmentDepthProvider, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&environmentDepthProvider, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrCreateEnvironmentDepthProviderMETA: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrDestroyEnvironmentDepthProviderMETA(XrEnvironmentDepthProviderMETA environmentDepthProvider) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 97004;
    serialize(&function_id, msg_out.stream);
    

    serialize(&environmentDepthProvider, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrDestroyEnvironmentDepthProviderMETA: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrStartEnvironmentDepthProviderMETA(XrEnvironmentDepthProviderMETA environmentDepthProvider) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 97009;
    serialize(&function_id, msg_out.stream);
    

    serialize(&environmentDepthProvider, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrStartEnvironmentDepthProviderMETA: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrStopEnvironmentDepthProviderMETA(XrEnvironmentDepthProviderMETA environmentDepthProvider) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 97010;
    serialize(&function_id, msg_out.stream);
    

    serialize(&environmentDepthProvider, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrStopEnvironmentDepthProviderMETA: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrCreateEnvironmentDepthSwapchainMETA(XrEnvironmentDepthProviderMETA environmentDepthProvider, const XrEnvironmentDepthSwapchainCreateInfoMETA* createInfo, XrEnvironmentDepthSwapchainMETA* swapchain) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 97003;
    serialize(&function_id, msg_out.stream);
    

    serialize(&environmentDepthProvider, msg_out.stream);

    

    serialize_ptr(createInfo, 1, msg_out.stream);

    

    serialize_ptr(swapchain, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&swapchain, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrCreateEnvironmentDepthSwapchainMETA: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrDestroyEnvironmentDepthSwapchainMETA(XrEnvironmentDepthSwapchainMETA swapchain) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 97005;
    serialize(&function_id, msg_out.stream);
    

    serialize(&swapchain, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrDestroyEnvironmentDepthSwapchainMETA: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrEnumerateEnvironmentDepthSwapchainImagesMETA(XrEnvironmentDepthSwapchainMETA swapchain, uint32_t imageCapacityInput, uint32_t* imageCountOutput, XrSwapchainImageBaseHeader* images) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 97006;
    serialize(&function_id, msg_out.stream);
    

    serialize(&swapchain, msg_out.stream);

    

    serialize(&imageCapacityInput, msg_out.stream);

    

    serialize_ptr(imageCountOutput, 1, msg_out.stream);

    

    serialize_xr_array(images, imageCapacityInput, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&imageCountOutput, msg_in.stream, true);

    
    deserialize_xr_array(&images, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrEnumerateEnvironmentDepthSwapchainImagesMETA: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrGetEnvironmentDepthSwapchainStateMETA(XrEnvironmentDepthSwapchainMETA swapchain, XrEnvironmentDepthSwapchainStateMETA* state) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 97007;
    serialize(&function_id, msg_out.stream);
    

    serialize(&swapchain, msg_out.stream);

    

    serialize_ptr(state, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&state, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetEnvironmentDepthSwapchainStateMETA: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrAcquireEnvironmentDepthImageMETA(XrEnvironmentDepthProviderMETA environmentDepthProvider, const XrEnvironmentDepthImageAcquireInfoMETA* acquireInfo, XrEnvironmentDepthImageMETA* environmentDepthImage) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 97001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&environmentDepthProvider, msg_out.stream);

    

    serialize_ptr(acquireInfo, 1, msg_out.stream);

    

    serialize_ptr(environmentDepthImage, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&environmentDepthImage, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrAcquireEnvironmentDepthImageMETA: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrSetEnvironmentDepthHandRemovalMETA(XrEnvironmentDepthProviderMETA environmentDepthProvider, const XrEnvironmentDepthHandRemovalSetInfoMETA* setInfo) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 97008;
    serialize(&function_id, msg_out.stream);
    

    serialize(&environmentDepthProvider, msg_out.stream);

    

    serialize_ptr(setInfo, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrSetEnvironmentDepthHandRemovalMETA: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_META_environment_depth
#ifdef XRTRANSPORT_EXT_XR_QCOM_tracking_optimization_settings

XRAPI_ATTR XrResult XRAPI_CALL xrSetTrackingOptimizationSettingsHintQCOM(XrSession session, XrTrackingOptimizationSettingsDomainQCOM domain, XrTrackingOptimizationSettingsHintQCOM hint) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 139001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize(&domain, msg_out.stream);

    

    serialize(&hint, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrSetTrackingOptimizationSettingsHintQCOM: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_QCOM_tracking_optimization_settings
#ifdef XRTRANSPORT_EXT_XR_HTC_passthrough

XRAPI_ATTR XrResult XRAPI_CALL xrCreatePassthroughHTC(XrSession session, const XrPassthroughCreateInfoHTC* createInfo, XrPassthroughHTC* passthrough) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 70001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(createInfo, 1, msg_out.stream);

    

    serialize_ptr(passthrough, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&passthrough, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrCreatePassthroughHTC: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrDestroyPassthroughHTC(XrPassthroughHTC passthrough) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 70002;
    serialize(&function_id, msg_out.stream);
    

    serialize(&passthrough, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrDestroyPassthroughHTC: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_HTC_passthrough
#ifdef XRTRANSPORT_EXT_XR_HTC_foveation

XRAPI_ATTR XrResult XRAPI_CALL xrApplyFoveationHTC(XrSession session, const XrFoveationApplyInfoHTC* applyInfo) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 69001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(applyInfo, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&applyInfo->subImages, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrApplyFoveationHTC: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_HTC_foveation
#ifdef XRTRANSPORT_EXT_XR_HTC_anchor

XRAPI_ATTR XrResult XRAPI_CALL xrCreateSpatialAnchorHTC(XrSession session, const XrSpatialAnchorCreateInfoHTC* createInfo, XrSpace* anchor) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 66001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(createInfo, 1, msg_out.stream);

    

    serialize_ptr(anchor, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&anchor, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrCreateSpatialAnchorHTC: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrGetSpatialAnchorNameHTC(XrSpace anchor, XrSpatialAnchorNameHTC* name) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 66002;
    serialize(&function_id, msg_out.stream);
    

    serialize(&anchor, msg_out.stream);

    

    serialize_ptr(name, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&name, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetSpatialAnchorNameHTC: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_HTC_anchor
#ifdef XRTRANSPORT_EXT_XR_HTC_body_tracking

XRAPI_ATTR XrResult XRAPI_CALL xrCreateBodyTrackerHTC(XrSession session, const XrBodyTrackerCreateInfoHTC* createInfo, XrBodyTrackerHTC* bodyTracker) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 67001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(createInfo, 1, msg_out.stream);

    

    serialize_ptr(bodyTracker, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&bodyTracker, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrCreateBodyTrackerHTC: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrDestroyBodyTrackerHTC(XrBodyTrackerHTC bodyTracker) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 67002;
    serialize(&function_id, msg_out.stream);
    

    serialize(&bodyTracker, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrDestroyBodyTrackerHTC: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrLocateBodyJointsHTC(XrBodyTrackerHTC bodyTracker, const XrBodyJointsLocateInfoHTC* locateInfo, XrBodyJointLocationsHTC* locations) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 67004;
    serialize(&function_id, msg_out.stream);
    

    serialize(&bodyTracker, msg_out.stream);

    

    serialize_ptr(locateInfo, 1, msg_out.stream);

    

    serialize_ptr(locations, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&locations, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrLocateBodyJointsHTC: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrGetBodySkeletonHTC(XrBodyTrackerHTC bodyTracker, XrSpace baseSpace, uint32_t skeletonGenerationId, XrBodySkeletonHTC* skeleton) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 67003;
    serialize(&function_id, msg_out.stream);
    

    serialize(&bodyTracker, msg_out.stream);

    

    serialize(&baseSpace, msg_out.stream);

    

    serialize(&skeletonGenerationId, msg_out.stream);

    

    serialize_ptr(skeleton, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&skeleton, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetBodySkeletonHTC: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_HTC_body_tracking
#ifdef XRTRANSPORT_EXT_XR_EXT_active_action_set_priority
#endif // XRTRANSPORT_EXT_XR_EXT_active_action_set_priority
#ifdef XRTRANSPORT_EXT_XR_MNDX_force_feedback_curl

XRAPI_ATTR XrResult XRAPI_CALL xrApplyForceFeedbackCurlMNDX(XrHandTrackerEXT handTracker, const XrForceFeedbackCurlApplyLocationsMNDX* locations) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 124001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&handTracker, msg_out.stream);

    

    serialize_ptr(locations, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&locations->locations, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrApplyForceFeedbackCurlMNDX: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_MNDX_force_feedback_curl
#ifdef XRTRANSPORT_EXT_XR_BD_body_tracking

XRAPI_ATTR XrResult XRAPI_CALL xrCreateBodyTrackerBD(XrSession session, const XrBodyTrackerCreateInfoBD* createInfo, XrBodyTrackerBD* bodyTracker) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 2001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(createInfo, 1, msg_out.stream);

    

    serialize_ptr(bodyTracker, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&bodyTracker, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrCreateBodyTrackerBD: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrDestroyBodyTrackerBD(XrBodyTrackerBD bodyTracker) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 2002;
    serialize(&function_id, msg_out.stream);
    

    serialize(&bodyTracker, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrDestroyBodyTrackerBD: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrLocateBodyJointsBD(XrBodyTrackerBD bodyTracker, const XrBodyJointsLocateInfoBD* locateInfo, XrBodyJointLocationsBD* locations) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 2003;
    serialize(&function_id, msg_out.stream);
    

    serialize(&bodyTracker, msg_out.stream);

    

    serialize_ptr(locateInfo, 1, msg_out.stream);

    

    serialize_ptr(locations, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&locations, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrLocateBodyJointsBD: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_BD_body_tracking
#ifdef XRTRANSPORT_EXT_XR_BD_spatial_sensing

XRAPI_ATTR XrResult XRAPI_CALL xrEnumerateSpatialEntityComponentTypesBD(XrSenseDataSnapshotBD snapshot, XrSpatialEntityIdBD entityId, uint32_t componentTypeCapacityInput, uint32_t* componentTypeCountOutput, XrSpatialEntityComponentTypeBD* componentTypes) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 8007;
    serialize(&function_id, msg_out.stream);
    

    serialize(&snapshot, msg_out.stream);

    

    serialize(&entityId, msg_out.stream);

    

    serialize(&componentTypeCapacityInput, msg_out.stream);

    

    serialize_ptr(componentTypeCountOutput, 1, msg_out.stream);

    

    
    serialize_ptr(componentTypes, componentTypeCapacityInput, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&componentTypeCountOutput, msg_in.stream, true);

    
    deserialize_ptr(&componentTypes, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrEnumerateSpatialEntityComponentTypesBD: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrGetSpatialEntityUuidBD(XrSenseDataSnapshotBD snapshot, XrSpatialEntityIdBD entityId, XrUuidEXT* uuid) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 8012;
    serialize(&function_id, msg_out.stream);
    

    serialize(&snapshot, msg_out.stream);

    

    serialize(&entityId, msg_out.stream);

    

    serialize_ptr(uuid, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&uuid, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetSpatialEntityUuidBD: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrGetSpatialEntityComponentDataBD(XrSenseDataSnapshotBD snapshot, const XrSpatialEntityComponentGetInfoBD* getInfo, XrSpatialEntityComponentDataBaseHeaderBD* componentData) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 8011;
    serialize(&function_id, msg_out.stream);
    

    serialize(&snapshot, msg_out.stream);

    

    serialize_ptr(getInfo, 1, msg_out.stream);

    

    serialize_xr(componentData, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_xr(&componentData, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetSpatialEntityComponentDataBD: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrCreateSenseDataProviderBD(XrSession session, const XrSenseDataProviderCreateInfoBD* createInfo, XrSenseDataProviderBD* provider) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 8002;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(createInfo, 1, msg_out.stream);

    

    serialize_ptr(provider, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&provider, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrCreateSenseDataProviderBD: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrStartSenseDataProviderAsyncBD(XrSenseDataProviderBD provider, const XrSenseDataProviderStartInfoBD* startInfo, XrFutureEXT* future) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 8015;
    serialize(&function_id, msg_out.stream);
    

    serialize(&provider, msg_out.stream);

    

    serialize_ptr(startInfo, 1, msg_out.stream);

    

    serialize_ptr(future, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&future, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrStartSenseDataProviderAsyncBD: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrStartSenseDataProviderCompleteBD(XrSession session, XrFutureEXT future, XrFutureCompletionEXT* completion) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 8016;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize(&future, msg_out.stream);

    

    serialize_ptr(completion, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&completion, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrStartSenseDataProviderCompleteBD: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrGetSenseDataProviderStateBD(XrSenseDataProviderBD provider, XrSenseDataProviderStateBD* state) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 8010;
    serialize(&function_id, msg_out.stream);
    

    serialize(&provider, msg_out.stream);

    

    serialize_ptr(state, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&state, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetSenseDataProviderStateBD: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrQuerySenseDataAsyncBD(XrSenseDataProviderBD provider, const XrSenseDataQueryInfoBD* queryInfo, XrFutureEXT* future) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 8013;
    serialize(&function_id, msg_out.stream);
    

    serialize(&provider, msg_out.stream);

    

    serialize_ptr(queryInfo, 1, msg_out.stream);

    

    serialize_ptr(future, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&future, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrQuerySenseDataAsyncBD: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrQuerySenseDataCompleteBD(XrSenseDataProviderBD provider, XrFutureEXT future, XrSenseDataQueryCompletionBD* completion) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 8014;
    serialize(&function_id, msg_out.stream);
    

    serialize(&provider, msg_out.stream);

    

    serialize(&future, msg_out.stream);

    

    serialize_ptr(completion, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&completion, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrQuerySenseDataCompleteBD: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrDestroySenseDataSnapshotBD(XrSenseDataSnapshotBD snapshot) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 8006;
    serialize(&function_id, msg_out.stream);
    

    serialize(&snapshot, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrDestroySenseDataSnapshotBD: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrGetQueriedSenseDataBD(XrSenseDataSnapshotBD snapshot, XrQueriedSenseDataGetInfoBD* getInfo, XrQueriedSenseDataBD* queriedSenseData) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 8009;
    serialize(&function_id, msg_out.stream);
    

    serialize(&snapshot, msg_out.stream);

    

    serialize_ptr(getInfo, 1, msg_out.stream);

    

    serialize_ptr(queriedSenseData, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&getInfo, msg_in.stream, true);

    
    deserialize_ptr(&queriedSenseData, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetQueriedSenseDataBD: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrStopSenseDataProviderBD(XrSenseDataProviderBD provider) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 8017;
    serialize(&function_id, msg_out.stream);
    

    serialize(&provider, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrStopSenseDataProviderBD: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrDestroySenseDataProviderBD(XrSenseDataProviderBD provider) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 8005;
    serialize(&function_id, msg_out.stream);
    

    serialize(&provider, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrDestroySenseDataProviderBD: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrCreateSpatialEntityAnchorBD(XrSenseDataProviderBD provider, const XrSpatialEntityAnchorCreateInfoBD* createInfo, XrAnchorBD* anchor) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 8003;
    serialize(&function_id, msg_out.stream);
    

    serialize(&provider, msg_out.stream);

    

    serialize_ptr(createInfo, 1, msg_out.stream);

    

    serialize_ptr(anchor, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&anchor, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrCreateSpatialEntityAnchorBD: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrDestroyAnchorBD(XrAnchorBD anchor) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 8004;
    serialize(&function_id, msg_out.stream);
    

    serialize(&anchor, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrDestroyAnchorBD: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrGetAnchorUuidBD(XrAnchorBD anchor, XrUuidEXT* uuid) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 8008;
    serialize(&function_id, msg_out.stream);
    

    serialize(&anchor, msg_out.stream);

    

    serialize_ptr(uuid, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&uuid, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetAnchorUuidBD: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrCreateAnchorSpaceBD(XrSession session, const XrAnchorSpaceCreateInfoBD* createInfo, XrSpace* space) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 8001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(createInfo, 1, msg_out.stream);

    

    serialize_ptr(space, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&space, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrCreateAnchorSpaceBD: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_BD_spatial_sensing
#ifdef XRTRANSPORT_EXT_XR_BD_spatial_anchor

XRAPI_ATTR XrResult XRAPI_CALL xrCreateSpatialAnchorAsyncBD(XrSenseDataProviderBD provider, const XrSpatialAnchorCreateInfoBD* info, XrFutureEXT* future) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 4001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&provider, msg_out.stream);

    

    serialize_ptr(info, 1, msg_out.stream);

    

    serialize_ptr(future, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&future, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrCreateSpatialAnchorAsyncBD: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrCreateSpatialAnchorCompleteBD(XrSenseDataProviderBD provider, XrFutureEXT future, XrSpatialAnchorCreateCompletionBD* completion) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 4002;
    serialize(&function_id, msg_out.stream);
    

    serialize(&provider, msg_out.stream);

    

    serialize(&future, msg_out.stream);

    

    serialize_ptr(completion, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&completion, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrCreateSpatialAnchorCompleteBD: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrPersistSpatialAnchorAsyncBD(XrSenseDataProviderBD provider, const XrSpatialAnchorPersistInfoBD* info, XrFutureEXT* future) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 4003;
    serialize(&function_id, msg_out.stream);
    

    serialize(&provider, msg_out.stream);

    

    serialize_ptr(info, 1, msg_out.stream);

    

    serialize_ptr(future, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&future, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrPersistSpatialAnchorAsyncBD: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrPersistSpatialAnchorCompleteBD(XrSenseDataProviderBD provider, XrFutureEXT future, XrFutureCompletionEXT* completion) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 4004;
    serialize(&function_id, msg_out.stream);
    

    serialize(&provider, msg_out.stream);

    

    serialize(&future, msg_out.stream);

    

    serialize_ptr(completion, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&completion, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrPersistSpatialAnchorCompleteBD: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrUnpersistSpatialAnchorAsyncBD(XrSenseDataProviderBD provider, const XrSpatialAnchorUnpersistInfoBD* info, XrFutureEXT* future) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 4005;
    serialize(&function_id, msg_out.stream);
    

    serialize(&provider, msg_out.stream);

    

    serialize_ptr(info, 1, msg_out.stream);

    

    serialize_ptr(future, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&future, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrUnpersistSpatialAnchorAsyncBD: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrUnpersistSpatialAnchorCompleteBD(XrSenseDataProviderBD provider, XrFutureEXT future, XrFutureCompletionEXT* completion) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 4006;
    serialize(&function_id, msg_out.stream);
    

    serialize(&provider, msg_out.stream);

    

    serialize(&future, msg_out.stream);

    

    serialize_ptr(completion, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&completion, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrUnpersistSpatialAnchorCompleteBD: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_BD_spatial_anchor
#ifdef XRTRANSPORT_EXT_XR_BD_spatial_anchor_sharing

XRAPI_ATTR XrResult XRAPI_CALL xrShareSpatialAnchorAsyncBD(XrSenseDataProviderBD provider, const XrSpatialAnchorShareInfoBD* info, XrFutureEXT* future) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 5003;
    serialize(&function_id, msg_out.stream);
    

    serialize(&provider, msg_out.stream);

    

    serialize_ptr(info, 1, msg_out.stream);

    

    serialize_ptr(future, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&future, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrShareSpatialAnchorAsyncBD: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrShareSpatialAnchorCompleteBD(XrSenseDataProviderBD provider, XrFutureEXT future, XrFutureCompletionEXT* completion) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 5004;
    serialize(&function_id, msg_out.stream);
    

    serialize(&provider, msg_out.stream);

    

    serialize(&future, msg_out.stream);

    

    serialize_ptr(completion, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&completion, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrShareSpatialAnchorCompleteBD: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrDownloadSharedSpatialAnchorAsyncBD(XrSenseDataProviderBD provider, const XrSharedSpatialAnchorDownloadInfoBD* info, XrFutureEXT* future) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 5001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&provider, msg_out.stream);

    

    serialize_ptr(info, 1, msg_out.stream);

    

    serialize_ptr(future, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&future, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrDownloadSharedSpatialAnchorAsyncBD: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrDownloadSharedSpatialAnchorCompleteBD(XrSenseDataProviderBD provider, XrFutureEXT future, XrFutureCompletionEXT* completion) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 5002;
    serialize(&function_id, msg_out.stream);
    

    serialize(&provider, msg_out.stream);

    

    serialize(&future, msg_out.stream);

    

    serialize_ptr(completion, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&completion, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrDownloadSharedSpatialAnchorCompleteBD: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_BD_spatial_anchor_sharing
#ifdef XRTRANSPORT_EXT_XR_BD_spatial_scene

XRAPI_ATTR XrResult XRAPI_CALL xrCaptureSceneAsyncBD(XrSenseDataProviderBD provider, const XrSceneCaptureInfoBD* info, XrFutureEXT* future) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 7001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&provider, msg_out.stream);

    

    serialize_ptr(info, 1, msg_out.stream);

    

    serialize_ptr(future, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&future, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrCaptureSceneAsyncBD: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrCaptureSceneCompleteBD(XrSenseDataProviderBD provider, XrFutureEXT future, XrFutureCompletionEXT* completion) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 7002;
    serialize(&function_id, msg_out.stream);
    

    serialize(&provider, msg_out.stream);

    

    serialize(&future, msg_out.stream);

    

    serialize_ptr(completion, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&completion, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrCaptureSceneCompleteBD: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_BD_spatial_scene
#ifdef XRTRANSPORT_EXT_XR_BD_spatial_mesh
#endif // XRTRANSPORT_EXT_XR_BD_spatial_mesh
#ifdef XRTRANSPORT_EXT_XR_BD_future_progress
#endif // XRTRANSPORT_EXT_XR_BD_future_progress
#ifdef XRTRANSPORT_EXT_XR_EXT_hand_tracking_data_source
#endif // XRTRANSPORT_EXT_XR_EXT_hand_tracking_data_source
#ifdef XRTRANSPORT_EXT_XR_EXT_plane_detection

XRAPI_ATTR XrResult XRAPI_CALL xrCreatePlaneDetectorEXT(XrSession session, const XrPlaneDetectorCreateInfoEXT* createInfo, XrPlaneDetectorEXT* planeDetector) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 22002;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(createInfo, 1, msg_out.stream);

    

    serialize_ptr(planeDetector, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&planeDetector, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrCreatePlaneDetectorEXT: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrDestroyPlaneDetectorEXT(XrPlaneDetectorEXT planeDetector) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 22003;
    serialize(&function_id, msg_out.stream);
    

    serialize(&planeDetector, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrDestroyPlaneDetectorEXT: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrBeginPlaneDetectionEXT(XrPlaneDetectorEXT planeDetector, const XrPlaneDetectorBeginInfoEXT* beginInfo) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 22001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&planeDetector, msg_out.stream);

    

    serialize_ptr(beginInfo, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrBeginPlaneDetectionEXT: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrGetPlaneDetectionStateEXT(XrPlaneDetectorEXT planeDetector, XrPlaneDetectionStateEXT* state) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 22004;
    serialize(&function_id, msg_out.stream);
    

    serialize(&planeDetector, msg_out.stream);

    

    serialize_ptr(state, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&state, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetPlaneDetectionStateEXT: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrGetPlaneDetectionsEXT(XrPlaneDetectorEXT planeDetector, const XrPlaneDetectorGetInfoEXT* info, XrPlaneDetectorLocationsEXT* locations) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 22005;
    serialize(&function_id, msg_out.stream);
    

    serialize(&planeDetector, msg_out.stream);

    

    serialize_ptr(info, 1, msg_out.stream);

    

    serialize_ptr(locations, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&locations, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetPlaneDetectionsEXT: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrGetPlanePolygonBufferEXT(XrPlaneDetectorEXT planeDetector, uint64_t planeId, uint32_t polygonBufferIndex, XrPlaneDetectorPolygonBufferEXT* polygonBuffer) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 22006;
    serialize(&function_id, msg_out.stream);
    

    serialize(&planeDetector, msg_out.stream);

    

    serialize(&planeId, msg_out.stream);

    

    serialize(&polygonBufferIndex, msg_out.stream);

    

    serialize_ptr(polygonBuffer, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&polygonBuffer, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetPlanePolygonBufferEXT: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_EXT_plane_detection
#ifdef XRTRANSPORT_EXT_XR_EXT_future

XRAPI_ATTR XrResult XRAPI_CALL xrPollFutureEXT(XrInstance instance, const XrFuturePollInfoEXT* pollInfo, XrFuturePollResultEXT* pollResult) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 17002;
    serialize(&function_id, msg_out.stream);
    

    serialize(&instance, msg_out.stream);

    

    serialize_ptr(pollInfo, 1, msg_out.stream);

    

    serialize_ptr(pollResult, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&pollResult, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrPollFutureEXT: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrCancelFutureEXT(XrInstance instance, const XrFutureCancelInfoEXT* cancelInfo) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 17001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&instance, msg_out.stream);

    

    serialize_ptr(cancelInfo, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrCancelFutureEXT: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_EXT_future
#ifdef XRTRANSPORT_EXT_XR_EXT_user_presence
#endif // XRTRANSPORT_EXT_XR_EXT_user_presence
#ifdef XRTRANSPORT_EXT_XR_ML_system_notifications

XRAPI_ATTR XrResult XRAPI_CALL xrSetSystemNotificationsML(XrInstance instance, const XrSystemNotificationsSetInfoML* info) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 120001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&instance, msg_out.stream);

    

    serialize_ptr(info, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrSetSystemNotificationsML: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_ML_system_notifications
#ifdef XRTRANSPORT_EXT_XR_ML_world_mesh_detection

XRAPI_ATTR XrResult XRAPI_CALL xrCreateWorldMeshDetectorML(XrSession session, const XrWorldMeshDetectorCreateInfoML* createInfo, XrWorldMeshDetectorML* detector) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 122002;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(createInfo, 1, msg_out.stream);

    

    serialize_ptr(detector, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&detector, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrCreateWorldMeshDetectorML: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrDestroyWorldMeshDetectorML(XrWorldMeshDetectorML detector) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 122003;
    serialize(&function_id, msg_out.stream);
    

    serialize(&detector, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrDestroyWorldMeshDetectorML: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrRequestWorldMeshStateAsyncML(XrWorldMeshDetectorML detector, const XrWorldMeshStateRequestInfoML* stateRequest, XrFutureEXT* future) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 122008;
    serialize(&function_id, msg_out.stream);
    

    serialize(&detector, msg_out.stream);

    

    serialize_ptr(stateRequest, 1, msg_out.stream);

    

    serialize_ptr(future, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&future, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrRequestWorldMeshStateAsyncML: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrRequestWorldMeshStateCompleteML(XrWorldMeshDetectorML detector, XrFutureEXT future, XrWorldMeshStateRequestCompletionML* completion) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 122009;
    serialize(&function_id, msg_out.stream);
    

    serialize(&detector, msg_out.stream);

    

    serialize(&future, msg_out.stream);

    

    serialize_ptr(completion, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&completion, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrRequestWorldMeshStateCompleteML: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrGetWorldMeshBufferRecommendSizeML(XrWorldMeshDetectorML detector, const XrWorldMeshBufferRecommendedSizeInfoML* sizeInfo, XrWorldMeshBufferSizeML* size) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 122005;
    serialize(&function_id, msg_out.stream);
    

    serialize(&detector, msg_out.stream);

    

    serialize_ptr(sizeInfo, 1, msg_out.stream);

    

    serialize_ptr(size, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&size, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetWorldMeshBufferRecommendSizeML: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrAllocateWorldMeshBufferML(XrWorldMeshDetectorML detector, const XrWorldMeshBufferSizeML* size, XrWorldMeshBufferML* buffer) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 122001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&detector, msg_out.stream);

    

    serialize_ptr(size, 1, msg_out.stream);

    

    serialize_ptr(buffer, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_xr(&size->next, msg_in.stream, true);

    
    deserialize_ptr(&buffer, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrAllocateWorldMeshBufferML: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrFreeWorldMeshBufferML(XrWorldMeshDetectorML detector, const XrWorldMeshBufferML* buffer) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 122004;
    serialize(&function_id, msg_out.stream);
    

    serialize(&detector, msg_out.stream);

    

    serialize_ptr(buffer, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_xr(&buffer->next, msg_in.stream, true);

    
    deserialize_ptr(&buffer->buffer, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrFreeWorldMeshBufferML: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrRequestWorldMeshAsyncML(XrWorldMeshDetectorML detector, const XrWorldMeshGetInfoML* getInfo, XrWorldMeshBufferML* buffer, XrFutureEXT* future) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 122006;
    serialize(&function_id, msg_out.stream);
    

    serialize(&detector, msg_out.stream);

    

    serialize_ptr(getInfo, 1, msg_out.stream);

    

    serialize_ptr(buffer, 1, msg_out.stream);

    

    serialize_ptr(future, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&getInfo->blocks, msg_in.stream, true);

    
    deserialize_ptr(&buffer, msg_in.stream, true);

    
    deserialize_ptr(&future, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrRequestWorldMeshAsyncML: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrRequestWorldMeshCompleteML(XrWorldMeshDetectorML detector, const XrWorldMeshRequestCompletionInfoML* completionInfo, XrFutureEXT future, XrWorldMeshRequestCompletionML* completion) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 122007;
    serialize(&function_id, msg_out.stream);
    

    serialize(&detector, msg_out.stream);

    

    serialize_ptr(completionInfo, 1, msg_out.stream);

    

    serialize(&future, msg_out.stream);

    

    serialize_ptr(completion, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&completion, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrRequestWorldMeshCompleteML: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_ML_world_mesh_detection
#ifdef XRTRANSPORT_EXT_XR_ML_facial_expression

XRAPI_ATTR XrResult XRAPI_CALL xrCreateFacialExpressionClientML(XrSession session, const XrFacialExpressionClientCreateInfoML* createInfo, XrFacialExpressionClientML* facialExpressionClient) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 113001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(createInfo, 1, msg_out.stream);

    

    serialize_ptr(facialExpressionClient, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&facialExpressionClient, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrCreateFacialExpressionClientML: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrDestroyFacialExpressionClientML(XrFacialExpressionClientML facialExpressionClient) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 113002;
    serialize(&function_id, msg_out.stream);
    

    serialize(&facialExpressionClient, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrDestroyFacialExpressionClientML: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrGetFacialExpressionBlendShapePropertiesML(XrFacialExpressionClientML facialExpressionClient, const XrFacialExpressionBlendShapeGetInfoML* blendShapeGetInfo, uint32_t blendShapeCount, XrFacialExpressionBlendShapePropertiesML* blendShapes) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 113003;
    serialize(&function_id, msg_out.stream);
    

    serialize(&facialExpressionClient, msg_out.stream);

    

    serialize_ptr(blendShapeGetInfo, 1, msg_out.stream);

    

    serialize(&blendShapeCount, msg_out.stream);

    

    
    serialize_ptr(blendShapes, blendShapeCount, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&blendShapes, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetFacialExpressionBlendShapePropertiesML: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_ML_facial_expression
#ifdef XRTRANSPORT_EXT_XR_META_simultaneous_hands_and_controllers

XRAPI_ATTR XrResult XRAPI_CALL xrResumeSimultaneousHandsAndControllersTrackingMETA(XrSession session, const XrSimultaneousHandsAndControllersTrackingResumeInfoMETA* resumeInfo) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 106002;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(resumeInfo, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrResumeSimultaneousHandsAndControllersTrackingMETA: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrPauseSimultaneousHandsAndControllersTrackingMETA(XrSession session, const XrSimultaneousHandsAndControllersTrackingPauseInfoMETA* pauseInfo) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 106001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(pauseInfo, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrPauseSimultaneousHandsAndControllersTrackingMETA: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_META_simultaneous_hands_and_controllers
#ifdef XRTRANSPORT_EXT_XR_META_colocation_discovery

XRAPI_ATTR XrResult XRAPI_CALL xrStartColocationDiscoveryMETA(XrSession session, const XrColocationDiscoveryStartInfoMETA* info, XrAsyncRequestIdFB* discoveryRequestId) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 96002;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(info, 1, msg_out.stream);

    

    serialize_ptr(discoveryRequestId, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&discoveryRequestId, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrStartColocationDiscoveryMETA: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrStopColocationDiscoveryMETA(XrSession session, const XrColocationDiscoveryStopInfoMETA* info, XrAsyncRequestIdFB* requestId) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 96004;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(info, 1, msg_out.stream);

    

    serialize_ptr(requestId, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&requestId, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrStopColocationDiscoveryMETA: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrStartColocationAdvertisementMETA(XrSession session, const XrColocationAdvertisementStartInfoMETA* info, XrAsyncRequestIdFB* advertisementRequestId) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 96001;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(info, 1, msg_out.stream);

    

    serialize_ptr(advertisementRequestId, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&info->buffer, msg_in.stream, true);

    
    deserialize_ptr(&advertisementRequestId, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrStartColocationAdvertisementMETA: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrStopColocationAdvertisementMETA(XrSession session, const XrColocationAdvertisementStopInfoMETA* info, XrAsyncRequestIdFB* requestId) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 96003;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(info, 1, msg_out.stream);

    

    serialize_ptr(requestId, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&requestId, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrStopColocationAdvertisementMETA: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}

#endif // XRTRANSPORT_EXT_XR_META_colocation_discovery
#ifdef XRTRANSPORT_EXT_XR_META_spatial_entity_group_sharing
#endif // XRTRANSPORT_EXT_XR_META_spatial_entity_group_sharing

XRAPI_ATTR XrResult XRAPI_CALL xrAcquireSwapchainImage(XrSwapchain swapchain, const XrSwapchainImageAcquireInfo* acquireInfo, uint32_t* index) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 1;
    serialize(&function_id, msg_out.stream);
    

    serialize(&swapchain, msg_out.stream);

    

    serialize_ptr(acquireInfo, 1, msg_out.stream);

    

    serialize_ptr(index, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&index, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrAcquireSwapchainImage: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrApplyHapticFeedback(XrSession session, const XrHapticActionInfo* hapticActionInfo, const XrHapticBaseHeader* hapticFeedback) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 2;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(hapticActionInfo, 1, msg_out.stream);

    

    serialize_xr(hapticFeedback, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrApplyHapticFeedback: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrAttachSessionActionSets(XrSession session, const XrSessionActionSetsAttachInfo* attachInfo) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 3;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(attachInfo, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrAttachSessionActionSets: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrBeginFrame(XrSession session, const XrFrameBeginInfo* frameBeginInfo) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 4;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(frameBeginInfo, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrBeginFrame: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrBeginSession(XrSession session, const XrSessionBeginInfo* beginInfo) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 5;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(beginInfo, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrBeginSession: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrCreateAction(XrActionSet actionSet, const XrActionCreateInfo* createInfo, XrAction* action) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 6;
    serialize(&function_id, msg_out.stream);
    

    serialize(&actionSet, msg_out.stream);

    

    serialize_ptr(createInfo, 1, msg_out.stream);

    

    serialize_ptr(action, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&action, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrCreateAction: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrCreateActionSet(XrInstance instance, const XrActionSetCreateInfo* createInfo, XrActionSet* actionSet) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 7;
    serialize(&function_id, msg_out.stream);
    

    serialize(&instance, msg_out.stream);

    

    serialize_ptr(createInfo, 1, msg_out.stream);

    

    serialize_ptr(actionSet, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&actionSet, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrCreateActionSet: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrCreateActionSpace(XrSession session, const XrActionSpaceCreateInfo* createInfo, XrSpace* space) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 8;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(createInfo, 1, msg_out.stream);

    

    serialize_ptr(space, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&space, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrCreateActionSpace: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrCreateInstance(const XrInstanceCreateInfo* createInfo, XrInstance* instance) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 10;
    serialize(&function_id, msg_out.stream);
    

    serialize_ptr(createInfo, 1, msg_out.stream);

    

    serialize_ptr(instance, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&instance, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrCreateInstance: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrCreateReferenceSpace(XrSession session, const XrReferenceSpaceCreateInfo* createInfo, XrSpace* space) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 11;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(createInfo, 1, msg_out.stream);

    

    serialize_ptr(space, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&space, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrCreateReferenceSpace: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrCreateSession(XrInstance instance, const XrSessionCreateInfo* createInfo, XrSession* session) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 12;
    serialize(&function_id, msg_out.stream);
    

    serialize(&instance, msg_out.stream);

    

    serialize_ptr(createInfo, 1, msg_out.stream);

    

    serialize_ptr(session, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&session, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrCreateSession: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrCreateSwapchain(XrSession session, const XrSwapchainCreateInfo* createInfo, XrSwapchain* swapchain) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 13;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(createInfo, 1, msg_out.stream);

    

    serialize_ptr(swapchain, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&swapchain, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrCreateSwapchain: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrDestroyAction(XrAction action) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 14;
    serialize(&function_id, msg_out.stream);
    

    serialize(&action, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrDestroyAction: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrDestroyActionSet(XrActionSet actionSet) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 15;
    serialize(&function_id, msg_out.stream);
    

    serialize(&actionSet, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrDestroyActionSet: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrDestroyInstance(XrInstance instance) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 16;
    serialize(&function_id, msg_out.stream);
    

    serialize(&instance, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrDestroyInstance: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrDestroySession(XrSession session) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 17;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrDestroySession: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrDestroySpace(XrSpace space) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 18;
    serialize(&function_id, msg_out.stream);
    

    serialize(&space, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrDestroySpace: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrDestroySwapchain(XrSwapchain swapchain) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 19;
    serialize(&function_id, msg_out.stream);
    

    serialize(&swapchain, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrDestroySwapchain: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrEndFrame(XrSession session, const XrFrameEndInfo* frameEndInfo) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 20;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(frameEndInfo, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrEndFrame: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrEndSession(XrSession session) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 21;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrEndSession: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrEnumerateApiLayerProperties(uint32_t propertyCapacityInput, uint32_t* propertyCountOutput, XrApiLayerProperties* properties) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 22;
    serialize(&function_id, msg_out.stream);
    

    serialize(&propertyCapacityInput, msg_out.stream);

    

    serialize_ptr(propertyCountOutput, 1, msg_out.stream);

    

    
    serialize_ptr(properties, propertyCapacityInput, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&propertyCountOutput, msg_in.stream, true);

    
    deserialize_ptr(&properties, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrEnumerateApiLayerProperties: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrEnumerateBoundSourcesForAction(XrSession session, const XrBoundSourcesForActionEnumerateInfo* enumerateInfo, uint32_t sourceCapacityInput, uint32_t* sourceCountOutput, XrPath* sources) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 23;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(enumerateInfo, 1, msg_out.stream);

    

    serialize(&sourceCapacityInput, msg_out.stream);

    

    serialize_ptr(sourceCountOutput, 1, msg_out.stream);

    

    
    serialize_ptr(sources, sourceCapacityInput, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&sourceCountOutput, msg_in.stream, true);

    
    deserialize_ptr(&sources, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrEnumerateBoundSourcesForAction: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrEnumerateEnvironmentBlendModes(XrInstance instance, XrSystemId systemId, XrViewConfigurationType viewConfigurationType, uint32_t environmentBlendModeCapacityInput, uint32_t* environmentBlendModeCountOutput, XrEnvironmentBlendMode* environmentBlendModes) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 24;
    serialize(&function_id, msg_out.stream);
    

    serialize(&instance, msg_out.stream);

    

    serialize(&systemId, msg_out.stream);

    

    serialize(&viewConfigurationType, msg_out.stream);

    

    serialize(&environmentBlendModeCapacityInput, msg_out.stream);

    

    serialize_ptr(environmentBlendModeCountOutput, 1, msg_out.stream);

    

    
    serialize_ptr(environmentBlendModes, environmentBlendModeCapacityInput, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&environmentBlendModeCountOutput, msg_in.stream, true);

    
    deserialize_ptr(&environmentBlendModes, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrEnumerateEnvironmentBlendModes: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrEnumerateInstanceExtensionProperties(const char* layerName, uint32_t propertyCapacityInput, uint32_t* propertyCountOutput, XrExtensionProperties* properties) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 25;
    serialize(&function_id, msg_out.stream);
    

    
    serialize_ptr(layerName, count_null_terminated(layerName), msg_out.stream);

    

    serialize(&propertyCapacityInput, msg_out.stream);

    

    serialize_ptr(propertyCountOutput, 1, msg_out.stream);

    

    
    serialize_ptr(properties, propertyCapacityInput, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&propertyCountOutput, msg_in.stream, true);

    
    deserialize_ptr(&properties, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrEnumerateInstanceExtensionProperties: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrEnumerateReferenceSpaces(XrSession session, uint32_t spaceCapacityInput, uint32_t* spaceCountOutput, XrReferenceSpaceType* spaces) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 26;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize(&spaceCapacityInput, msg_out.stream);

    

    serialize_ptr(spaceCountOutput, 1, msg_out.stream);

    

    
    serialize_ptr(spaces, spaceCapacityInput, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&spaceCountOutput, msg_in.stream, true);

    
    deserialize_ptr(&spaces, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrEnumerateReferenceSpaces: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrEnumerateSwapchainFormats(XrSession session, uint32_t formatCapacityInput, uint32_t* formatCountOutput, int64_t* formats) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 27;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize(&formatCapacityInput, msg_out.stream);

    

    serialize_ptr(formatCountOutput, 1, msg_out.stream);

    

    
    serialize_ptr(formats, formatCapacityInput, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&formatCountOutput, msg_in.stream, true);

    
    deserialize_ptr(&formats, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrEnumerateSwapchainFormats: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrEnumerateSwapchainImages(XrSwapchain swapchain, uint32_t imageCapacityInput, uint32_t* imageCountOutput, XrSwapchainImageBaseHeader* images) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 28;
    serialize(&function_id, msg_out.stream);
    

    serialize(&swapchain, msg_out.stream);

    

    serialize(&imageCapacityInput, msg_out.stream);

    

    serialize_ptr(imageCountOutput, 1, msg_out.stream);

    

    serialize_xr_array(images, imageCapacityInput, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&imageCountOutput, msg_in.stream, true);

    
    deserialize_xr_array(&images, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrEnumerateSwapchainImages: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrEnumerateViewConfigurationViews(XrInstance instance, XrSystemId systemId, XrViewConfigurationType viewConfigurationType, uint32_t viewCapacityInput, uint32_t* viewCountOutput, XrViewConfigurationView* views) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 29;
    serialize(&function_id, msg_out.stream);
    

    serialize(&instance, msg_out.stream);

    

    serialize(&systemId, msg_out.stream);

    

    serialize(&viewConfigurationType, msg_out.stream);

    

    serialize(&viewCapacityInput, msg_out.stream);

    

    serialize_ptr(viewCountOutput, 1, msg_out.stream);

    

    
    serialize_ptr(views, viewCapacityInput, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&viewCountOutput, msg_in.stream, true);

    
    deserialize_ptr(&views, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrEnumerateViewConfigurationViews: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrEnumerateViewConfigurations(XrInstance instance, XrSystemId systemId, uint32_t viewConfigurationTypeCapacityInput, uint32_t* viewConfigurationTypeCountOutput, XrViewConfigurationType* viewConfigurationTypes) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 30;
    serialize(&function_id, msg_out.stream);
    

    serialize(&instance, msg_out.stream);

    

    serialize(&systemId, msg_out.stream);

    

    serialize(&viewConfigurationTypeCapacityInput, msg_out.stream);

    

    serialize_ptr(viewConfigurationTypeCountOutput, 1, msg_out.stream);

    

    
    serialize_ptr(viewConfigurationTypes, viewConfigurationTypeCapacityInput, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&viewConfigurationTypeCountOutput, msg_in.stream, true);

    
    deserialize_ptr(&viewConfigurationTypes, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrEnumerateViewConfigurations: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrGetActionStateBoolean(XrSession session, const XrActionStateGetInfo* getInfo, XrActionStateBoolean* state) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 31;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(getInfo, 1, msg_out.stream);

    

    serialize_ptr(state, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&state, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetActionStateBoolean: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrGetActionStateFloat(XrSession session, const XrActionStateGetInfo* getInfo, XrActionStateFloat* state) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 32;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(getInfo, 1, msg_out.stream);

    

    serialize_ptr(state, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&state, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetActionStateFloat: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrGetActionStatePose(XrSession session, const XrActionStateGetInfo* getInfo, XrActionStatePose* state) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 33;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(getInfo, 1, msg_out.stream);

    

    serialize_ptr(state, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&state, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetActionStatePose: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrGetActionStateVector2f(XrSession session, const XrActionStateGetInfo* getInfo, XrActionStateVector2f* state) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 34;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(getInfo, 1, msg_out.stream);

    

    serialize_ptr(state, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&state, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetActionStateVector2f: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrGetCurrentInteractionProfile(XrSession session, XrPath topLevelUserPath, XrInteractionProfileState* interactionProfile) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 35;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize(&topLevelUserPath, msg_out.stream);

    

    serialize_ptr(interactionProfile, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&interactionProfile, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetCurrentInteractionProfile: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrGetInputSourceLocalizedName(XrSession session, const XrInputSourceLocalizedNameGetInfo* getInfo, uint32_t bufferCapacityInput, uint32_t* bufferCountOutput, char* buffer) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 36;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(getInfo, 1, msg_out.stream);

    

    serialize(&bufferCapacityInput, msg_out.stream);

    

    serialize_ptr(bufferCountOutput, 1, msg_out.stream);

    

    
    serialize_ptr(buffer, bufferCapacityInput, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&bufferCountOutput, msg_in.stream, true);

    
    deserialize_ptr(&buffer, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetInputSourceLocalizedName: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrGetInstanceProcAddr(XrInstance instance, const char* name, PFN_xrVoidFunction* function) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 37;
    serialize(&function_id, msg_out.stream);
    

    serialize(&instance, msg_out.stream);

    

    
    serialize_ptr(name, count_null_terminated(name), msg_out.stream);

    

    serialize_ptr(function, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&function, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetInstanceProcAddr: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrGetInstanceProperties(XrInstance instance, XrInstanceProperties* instanceProperties) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 38;
    serialize(&function_id, msg_out.stream);
    

    serialize(&instance, msg_out.stream);

    

    serialize_ptr(instanceProperties, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&instanceProperties, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetInstanceProperties: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrGetReferenceSpaceBoundsRect(XrSession session, XrReferenceSpaceType referenceSpaceType, XrExtent2Df* bounds) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 39;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize(&referenceSpaceType, msg_out.stream);

    

    serialize_ptr(bounds, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&bounds, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetReferenceSpaceBoundsRect: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrGetSystem(XrInstance instance, const XrSystemGetInfo* getInfo, XrSystemId* systemId) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 40;
    serialize(&function_id, msg_out.stream);
    

    serialize(&instance, msg_out.stream);

    

    serialize_ptr(getInfo, 1, msg_out.stream);

    

    serialize_ptr(systemId, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&systemId, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetSystem: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrGetSystemProperties(XrInstance instance, XrSystemId systemId, XrSystemProperties* properties) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 41;
    serialize(&function_id, msg_out.stream);
    

    serialize(&instance, msg_out.stream);

    

    serialize(&systemId, msg_out.stream);

    

    serialize_ptr(properties, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&properties, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetSystemProperties: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrGetViewConfigurationProperties(XrInstance instance, XrSystemId systemId, XrViewConfigurationType viewConfigurationType, XrViewConfigurationProperties* configurationProperties) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 42;
    serialize(&function_id, msg_out.stream);
    

    serialize(&instance, msg_out.stream);

    

    serialize(&systemId, msg_out.stream);

    

    serialize(&viewConfigurationType, msg_out.stream);

    

    serialize_ptr(configurationProperties, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&configurationProperties, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrGetViewConfigurationProperties: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrLocateSpace(XrSpace space, XrSpace baseSpace, XrTime time, XrSpaceLocation* location) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 43;
    serialize(&function_id, msg_out.stream);
    

    serialize(&space, msg_out.stream);

    

    serialize(&baseSpace, msg_out.stream);

    

    serialize(&time, msg_out.stream);

    

    serialize_ptr(location, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&location, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrLocateSpace: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrLocateSpaces(XrSession session, const XrSpacesLocateInfo* locateInfo, XrSpaceLocations* spaceLocations) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 44;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(locateInfo, 1, msg_out.stream);

    

    serialize_ptr(spaceLocations, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&spaceLocations, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrLocateSpaces: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrLocateViews(XrSession session, const XrViewLocateInfo* viewLocateInfo, XrViewState* viewState, uint32_t viewCapacityInput, uint32_t* viewCountOutput, XrView* views) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 45;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(viewLocateInfo, 1, msg_out.stream);

    

    serialize_ptr(viewState, 1, msg_out.stream);

    

    serialize(&viewCapacityInput, msg_out.stream);

    

    serialize_ptr(viewCountOutput, 1, msg_out.stream);

    

    
    serialize_ptr(views, viewCapacityInput, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&viewState, msg_in.stream, true);

    
    deserialize_ptr(&viewCountOutput, msg_in.stream, true);

    
    deserialize_ptr(&views, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrLocateViews: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrPathToString(XrInstance instance, XrPath path, uint32_t bufferCapacityInput, uint32_t* bufferCountOutput, char* buffer) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 48;
    serialize(&function_id, msg_out.stream);
    

    serialize(&instance, msg_out.stream);

    

    serialize(&path, msg_out.stream);

    

    serialize(&bufferCapacityInput, msg_out.stream);

    

    serialize_ptr(bufferCountOutput, 1, msg_out.stream);

    

    
    serialize_ptr(buffer, bufferCapacityInput, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&bufferCountOutput, msg_in.stream, true);

    
    deserialize_ptr(&buffer, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrPathToString: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrPollEvent(XrInstance instance, XrEventDataBuffer* eventData) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 49;
    serialize(&function_id, msg_out.stream);
    

    serialize(&instance, msg_out.stream);

    

    serialize_ptr(eventData, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&eventData, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrPollEvent: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrReleaseSwapchainImage(XrSwapchain swapchain, const XrSwapchainImageReleaseInfo* releaseInfo) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 50;
    serialize(&function_id, msg_out.stream);
    

    serialize(&swapchain, msg_out.stream);

    

    serialize_ptr(releaseInfo, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrReleaseSwapchainImage: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrRequestExitSession(XrSession session) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 51;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrRequestExitSession: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrResultToString(XrInstance instance, XrResult value, char buffer[XR_MAX_RESULT_STRING_SIZE]) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 52;
    serialize(&function_id, msg_out.stream);
    

    serialize(&instance, msg_out.stream);

    

    serialize(&value, msg_out.stream);

    

    serialize_array(buffer, XR_MAX_RESULT_STRING_SIZE, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&buffer, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrResultToString: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrStopHapticFeedback(XrSession session, const XrHapticActionInfo* hapticActionInfo) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 53;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(hapticActionInfo, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrStopHapticFeedback: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrStringToPath(XrInstance instance, const char* pathString, XrPath* path) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 54;
    serialize(&function_id, msg_out.stream);
    

    serialize(&instance, msg_out.stream);

    

    
    serialize_ptr(pathString, count_null_terminated(pathString), msg_out.stream);

    

    serialize_ptr(path, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&path, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrStringToPath: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrStructureTypeToString(XrInstance instance, XrStructureType value, char buffer[XR_MAX_STRUCTURE_NAME_SIZE]) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 55;
    serialize(&function_id, msg_out.stream);
    

    serialize(&instance, msg_out.stream);

    

    serialize(&value, msg_out.stream);

    

    serialize_array(buffer, XR_MAX_STRUCTURE_NAME_SIZE, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&buffer, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrStructureTypeToString: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrSuggestInteractionProfileBindings(XrInstance instance, const XrInteractionProfileSuggestedBinding* suggestedBindings) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 56;
    serialize(&function_id, msg_out.stream);
    

    serialize(&instance, msg_out.stream);

    

    serialize_ptr(suggestedBindings, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrSuggestInteractionProfileBindings: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrSyncActions(XrSession session, const XrActionsSyncInfo* syncInfo) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 57;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(syncInfo, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrSyncActions: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrWaitFrame(XrSession session, const XrFrameWaitInfo* frameWaitInfo, XrFrameState* frameState) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 58;
    serialize(&function_id, msg_out.stream);
    

    serialize(&session, msg_out.stream);

    

    serialize_ptr(frameWaitInfo, 1, msg_out.stream);

    

    serialize_ptr(frameState, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);
    
    deserialize_ptr(&frameState, msg_in.stream, true);


    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrWaitFrame: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}


XRAPI_ATTR XrResult XRAPI_CALL xrWaitSwapchainImage(XrSwapchain swapchain, const XrSwapchainImageWaitInfo* waitInfo) {
    try {
    auto msg_out = transport.start_message(FUNCTION_CALL);
    uint32_t function_id = 59;
    serialize(&function_id, msg_out.stream);
    

    serialize(&swapchain, msg_out.stream);

    

    serialize_ptr(waitInfo, 1, msg_out.stream);


    auto msg_in = transport.await_message(FUNCTION_RETURN);
    XrResult result;
    deserialize(&result, msg_in.stream);

    return result;
    }
    catch (const std::exception& e) {
        spdlog::error("Exception in xrWaitSwapchainImage: {}", e.what());
        return XR_ERROR_RUNTIME_FAILURE;
    }
}



}