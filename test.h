
#ifndef XRTRANSPORT_SERIALIZER_GENERATED_H
#define XRTRANSPORT_SERIALIZER_GENERATED_H

#include "openxr/openxr.h"
#include "xrtransport_protocol.h"

#include <iostream>
#include <cstdint>
#include <vector>
#include <cassert>

namespace xrtransport {

// Only to be used with OpenXR pNext structs
using StructSerializer = void(*)(const XrBaseInStructure*, std::ostream&);
#define STRUCT_SERIALIZER_PTR(t) (reinterpret_cast<StructSerializer>(static_cast<void(*)(const t*, std::ostream&)>(&serialize)))

// To be used to know member offsets at compile time
constexpr size_t align(std::size_t x, std::size_t n) {
    return n > 8 ?
        (x + 7) & ~(7) :
        (x + (n - 1)) & ~(n - 1);
}
static std::vector<std::tuple<XrStructureType, StructSerializer>> serializer_lookup_table = {
{XR_TYPE_API_LAYER_PROPERTIES, STRUCT_SERIALIZER_PTR(XrApiLayerProperties)},
{XR_TYPE_EXTENSION_PROPERTIES, STRUCT_SERIALIZER_PTR(XrExtensionProperties)},
{XR_TYPE_INSTANCE_CREATE_INFO, STRUCT_SERIALIZER_PTR(XrInstanceCreateInfo)},
{XR_TYPE_SYSTEM_GET_INFO, STRUCT_SERIALIZER_PTR(XrSystemGetInfo)},
{XR_TYPE_SYSTEM_PROPERTIES, STRUCT_SERIALIZER_PTR(XrSystemProperties)},
{XR_TYPE_VIEW_LOCATE_INFO, STRUCT_SERIALIZER_PTR(XrViewLocateInfo)},
{XR_TYPE_VIEW, STRUCT_SERIALIZER_PTR(XrView)},
{XR_TYPE_SESSION_CREATE_INFO, STRUCT_SERIALIZER_PTR(XrSessionCreateInfo)},
{XR_TYPE_SWAPCHAIN_CREATE_INFO, STRUCT_SERIALIZER_PTR(XrSwapchainCreateInfo)},
{XR_TYPE_SESSION_BEGIN_INFO, STRUCT_SERIALIZER_PTR(XrSessionBeginInfo)},
{XR_TYPE_VIEW_STATE, STRUCT_SERIALIZER_PTR(XrViewState)},
{XR_TYPE_FRAME_END_INFO, STRUCT_SERIALIZER_PTR(XrFrameEndInfo)},
{XR_TYPE_HAPTIC_VIBRATION, STRUCT_SERIALIZER_PTR(XrHapticVibration)},
{XR_TYPE_EVENT_DATA_BUFFER, STRUCT_SERIALIZER_PTR(XrEventDataBuffer)},
{XR_TYPE_EVENT_DATA_INSTANCE_LOSS_PENDING, STRUCT_SERIALIZER_PTR(XrEventDataInstanceLossPending)},
{XR_TYPE_EVENT_DATA_SESSION_STATE_CHANGED, STRUCT_SERIALIZER_PTR(XrEventDataSessionStateChanged)},
{XR_TYPE_ACTION_STATE_BOOLEAN, STRUCT_SERIALIZER_PTR(XrActionStateBoolean)},
{XR_TYPE_ACTION_STATE_FLOAT, STRUCT_SERIALIZER_PTR(XrActionStateFloat)},
{XR_TYPE_ACTION_STATE_VECTOR2F, STRUCT_SERIALIZER_PTR(XrActionStateVector2f)},
{XR_TYPE_ACTION_STATE_POSE, STRUCT_SERIALIZER_PTR(XrActionStatePose)},
{XR_TYPE_ACTION_SET_CREATE_INFO, STRUCT_SERIALIZER_PTR(XrActionSetCreateInfo)},
{XR_TYPE_ACTION_CREATE_INFO, STRUCT_SERIALIZER_PTR(XrActionCreateInfo)},
{XR_TYPE_INSTANCE_PROPERTIES, STRUCT_SERIALIZER_PTR(XrInstanceProperties)},
{XR_TYPE_FRAME_WAIT_INFO, STRUCT_SERIALIZER_PTR(XrFrameWaitInfo)},
{XR_TYPE_COMPOSITION_LAYER_PROJECTION, STRUCT_SERIALIZER_PTR(XrCompositionLayerProjection)},
{XR_TYPE_COMPOSITION_LAYER_QUAD, STRUCT_SERIALIZER_PTR(XrCompositionLayerQuad)},
{XR_TYPE_REFERENCE_SPACE_CREATE_INFO, STRUCT_SERIALIZER_PTR(XrReferenceSpaceCreateInfo)},
{XR_TYPE_ACTION_SPACE_CREATE_INFO, STRUCT_SERIALIZER_PTR(XrActionSpaceCreateInfo)},
{XR_TYPE_EVENT_DATA_REFERENCE_SPACE_CHANGE_PENDING, STRUCT_SERIALIZER_PTR(XrEventDataReferenceSpaceChangePending)},
{XR_TYPE_VIEW_CONFIGURATION_VIEW, STRUCT_SERIALIZER_PTR(XrViewConfigurationView)},
{XR_TYPE_SPACE_LOCATION, STRUCT_SERIALIZER_PTR(XrSpaceLocation)},
{XR_TYPE_SPACE_VELOCITY, STRUCT_SERIALIZER_PTR(XrSpaceVelocity)},
{XR_TYPE_FRAME_STATE, STRUCT_SERIALIZER_PTR(XrFrameState)},
{XR_TYPE_VIEW_CONFIGURATION_PROPERTIES, STRUCT_SERIALIZER_PTR(XrViewConfigurationProperties)},
{XR_TYPE_FRAME_BEGIN_INFO, STRUCT_SERIALIZER_PTR(XrFrameBeginInfo)},
{XR_TYPE_COMPOSITION_LAYER_PROJECTION_VIEW, STRUCT_SERIALIZER_PTR(XrCompositionLayerProjectionView)},
{XR_TYPE_EVENT_DATA_EVENTS_LOST, STRUCT_SERIALIZER_PTR(XrEventDataEventsLost)},
{XR_TYPE_INTERACTION_PROFILE_SUGGESTED_BINDING, STRUCT_SERIALIZER_PTR(XrInteractionProfileSuggestedBinding)},
{XR_TYPE_EVENT_DATA_INTERACTION_PROFILE_CHANGED, STRUCT_SERIALIZER_PTR(XrEventDataInteractionProfileChanged)},
{XR_TYPE_INTERACTION_PROFILE_STATE, STRUCT_SERIALIZER_PTR(XrInteractionProfileState)},
{XR_TYPE_SWAPCHAIN_IMAGE_ACQUIRE_INFO, STRUCT_SERIALIZER_PTR(XrSwapchainImageAcquireInfo)},
{XR_TYPE_SWAPCHAIN_IMAGE_WAIT_INFO, STRUCT_SERIALIZER_PTR(XrSwapchainImageWaitInfo)},
{XR_TYPE_SWAPCHAIN_IMAGE_RELEASE_INFO, STRUCT_SERIALIZER_PTR(XrSwapchainImageReleaseInfo)},
{XR_TYPE_ACTION_STATE_GET_INFO, STRUCT_SERIALIZER_PTR(XrActionStateGetInfo)},
{XR_TYPE_HAPTIC_ACTION_INFO, STRUCT_SERIALIZER_PTR(XrHapticActionInfo)},
{XR_TYPE_SESSION_ACTION_SETS_ATTACH_INFO, STRUCT_SERIALIZER_PTR(XrSessionActionSetsAttachInfo)},
{XR_TYPE_ACTIONS_SYNC_INFO, STRUCT_SERIALIZER_PTR(XrActionsSyncInfo)},
{XR_TYPE_BOUND_SOURCES_FOR_ACTION_ENUMERATE_INFO, STRUCT_SERIALIZER_PTR(XrBoundSourcesForActionEnumerateInfo)},
{XR_TYPE_INPUT_SOURCE_LOCALIZED_NAME_GET_INFO, STRUCT_SERIALIZER_PTR(XrInputSourceLocalizedNameGetInfo)},
#ifdef XRTRANSPORT_EXT_XR_KHR_composition_layer_cube
{XR_TYPE_COMPOSITION_LAYER_CUBE_KHR, STRUCT_SERIALIZER_PTR(XrCompositionLayerCubeKHR)},
#endif // XRTRANSPORT_EXT_XR_KHR_composition_layer_cube
#ifdef XRTRANSPORT_EXT_XR_KHR_android_create_instance
{XR_TYPE_INSTANCE_CREATE_INFO_ANDROID_KHR, STRUCT_SERIALIZER_PTR(XrInstanceCreateInfoAndroidKHR)},
#endif // XRTRANSPORT_EXT_XR_KHR_android_create_instance
#ifdef XRTRANSPORT_EXT_XR_KHR_composition_layer_depth
{XR_TYPE_COMPOSITION_LAYER_DEPTH_INFO_KHR, STRUCT_SERIALIZER_PTR(XrCompositionLayerDepthInfoKHR)},
#endif // XRTRANSPORT_EXT_XR_KHR_composition_layer_depth
#ifdef XRTRANSPORT_EXT_XR_KHR_vulkan_swapchain_format_list
{XR_TYPE_VULKAN_SWAPCHAIN_FORMAT_LIST_CREATE_INFO_KHR, STRUCT_SERIALIZER_PTR(XrVulkanSwapchainFormatListCreateInfoKHR)},
#endif // XRTRANSPORT_EXT_XR_KHR_vulkan_swapchain_format_list
#ifdef XRTRANSPORT_EXT_XR_EXT_performance_settings
{XR_TYPE_EVENT_DATA_PERF_SETTINGS_EXT, STRUCT_SERIALIZER_PTR(XrEventDataPerfSettingsEXT)},
#endif // XRTRANSPORT_EXT_XR_EXT_performance_settings
#ifdef XRTRANSPORT_EXT_XR_KHR_composition_layer_cylinder
{XR_TYPE_COMPOSITION_LAYER_CYLINDER_KHR, STRUCT_SERIALIZER_PTR(XrCompositionLayerCylinderKHR)},
#endif // XRTRANSPORT_EXT_XR_KHR_composition_layer_cylinder
#ifdef XRTRANSPORT_EXT_XR_KHR_composition_layer_equirect
{XR_TYPE_COMPOSITION_LAYER_EQUIRECT_KHR, STRUCT_SERIALIZER_PTR(XrCompositionLayerEquirectKHR)},
#endif // XRTRANSPORT_EXT_XR_KHR_composition_layer_equirect
#ifdef XRTRANSPORT_EXT_XR_EXT_debug_utils
{XR_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT, STRUCT_SERIALIZER_PTR(XrDebugUtilsObjectNameInfoEXT)},
{XR_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT, STRUCT_SERIALIZER_PTR(XrDebugUtilsMessengerCallbackDataEXT)},
{XR_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT, STRUCT_SERIALIZER_PTR(XrDebugUtilsMessengerCreateInfoEXT)},
{XR_TYPE_DEBUG_UTILS_LABEL_EXT, STRUCT_SERIALIZER_PTR(XrDebugUtilsLabelEXT)},
#endif // XRTRANSPORT_EXT_XR_EXT_debug_utils
#ifdef XRTRANSPORT_EXT_XR_KHR_opengl_enable
{XR_TYPE_GRAPHICS_BINDING_OPENGL_WIN32_KHR, STRUCT_SERIALIZER_PTR(XrGraphicsBindingOpenGLWin32KHR)},
{XR_TYPE_GRAPHICS_BINDING_OPENGL_XLIB_KHR, STRUCT_SERIALIZER_PTR(XrGraphicsBindingOpenGLXlibKHR)},
{XR_TYPE_GRAPHICS_BINDING_OPENGL_XCB_KHR, STRUCT_SERIALIZER_PTR(XrGraphicsBindingOpenGLXcbKHR)},
{XR_TYPE_GRAPHICS_BINDING_OPENGL_WAYLAND_KHR, STRUCT_SERIALIZER_PTR(XrGraphicsBindingOpenGLWaylandKHR)},
{XR_TYPE_SWAPCHAIN_IMAGE_OPENGL_KHR, STRUCT_SERIALIZER_PTR(XrSwapchainImageOpenGLKHR)},
{XR_TYPE_GRAPHICS_REQUIREMENTS_OPENGL_KHR, STRUCT_SERIALIZER_PTR(XrGraphicsRequirementsOpenGLKHR)},
#endif // XRTRANSPORT_EXT_XR_KHR_opengl_enable
#ifdef XRTRANSPORT_EXT_XR_KHR_opengl_es_enable
{XR_TYPE_GRAPHICS_BINDING_OPENGL_ES_ANDROID_KHR, STRUCT_SERIALIZER_PTR(XrGraphicsBindingOpenGLESAndroidKHR)},
{XR_TYPE_SWAPCHAIN_IMAGE_OPENGL_ES_KHR, STRUCT_SERIALIZER_PTR(XrSwapchainImageOpenGLESKHR)},
{XR_TYPE_GRAPHICS_REQUIREMENTS_OPENGL_ES_KHR, STRUCT_SERIALIZER_PTR(XrGraphicsRequirementsOpenGLESKHR)},
#endif // XRTRANSPORT_EXT_XR_KHR_opengl_es_enable
#ifdef XRTRANSPORT_EXT_XR_KHR_vulkan_enable
{XR_TYPE_GRAPHICS_BINDING_VULKAN_KHR, STRUCT_SERIALIZER_PTR(XrGraphicsBindingVulkanKHR)},
{XR_TYPE_SWAPCHAIN_IMAGE_VULKAN_KHR, STRUCT_SERIALIZER_PTR(XrSwapchainImageVulkanKHR)},
{XR_TYPE_GRAPHICS_REQUIREMENTS_VULKAN_KHR, STRUCT_SERIALIZER_PTR(XrGraphicsRequirementsVulkanKHR)},
#endif // XRTRANSPORT_EXT_XR_KHR_vulkan_enable
#ifdef XRTRANSPORT_EXT_XR_KHR_D3D11_enable
{XR_TYPE_GRAPHICS_BINDING_D3D11_KHR, STRUCT_SERIALIZER_PTR(XrGraphicsBindingD3D11KHR)},
{XR_TYPE_SWAPCHAIN_IMAGE_D3D11_KHR, STRUCT_SERIALIZER_PTR(XrSwapchainImageD3D11KHR)},
{XR_TYPE_GRAPHICS_REQUIREMENTS_D3D11_KHR, STRUCT_SERIALIZER_PTR(XrGraphicsRequirementsD3D11KHR)},
#endif // XRTRANSPORT_EXT_XR_KHR_D3D11_enable
#ifdef XRTRANSPORT_EXT_XR_KHR_D3D12_enable
{XR_TYPE_GRAPHICS_BINDING_D3D12_KHR, STRUCT_SERIALIZER_PTR(XrGraphicsBindingD3D12KHR)},
{XR_TYPE_SWAPCHAIN_IMAGE_D3D12_KHR, STRUCT_SERIALIZER_PTR(XrSwapchainImageD3D12KHR)},
{XR_TYPE_GRAPHICS_REQUIREMENTS_D3D12_KHR, STRUCT_SERIALIZER_PTR(XrGraphicsRequirementsD3D12KHR)},
#endif // XRTRANSPORT_EXT_XR_KHR_D3D12_enable
#ifdef XRTRANSPORT_EXT_XR_KHR_metal_enable
{XR_TYPE_GRAPHICS_BINDING_METAL_KHR, STRUCT_SERIALIZER_PTR(XrGraphicsBindingMetalKHR)},
{XR_TYPE_SWAPCHAIN_IMAGE_METAL_KHR, STRUCT_SERIALIZER_PTR(XrSwapchainImageMetalKHR)},
{XR_TYPE_GRAPHICS_REQUIREMENTS_METAL_KHR, STRUCT_SERIALIZER_PTR(XrGraphicsRequirementsMetalKHR)},
#endif // XRTRANSPORT_EXT_XR_KHR_metal_enable
#ifdef XRTRANSPORT_EXT_XR_EXT_eye_gaze_interaction
{XR_TYPE_SYSTEM_EYE_GAZE_INTERACTION_PROPERTIES_EXT, STRUCT_SERIALIZER_PTR(XrSystemEyeGazeInteractionPropertiesEXT)},
{XR_TYPE_EYE_GAZE_SAMPLE_TIME_EXT, STRUCT_SERIALIZER_PTR(XrEyeGazeSampleTimeEXT)},
#endif // XRTRANSPORT_EXT_XR_EXT_eye_gaze_interaction
#ifdef XRTRANSPORT_EXT_XR_KHR_visibility_mask
{XR_TYPE_VISIBILITY_MASK_KHR, STRUCT_SERIALIZER_PTR(XrVisibilityMaskKHR)},
{XR_TYPE_EVENT_DATA_VISIBILITY_MASK_CHANGED_KHR, STRUCT_SERIALIZER_PTR(XrEventDataVisibilityMaskChangedKHR)},
#endif // XRTRANSPORT_EXT_XR_KHR_visibility_mask
#ifdef XRTRANSPORT_EXT_XR_EXTX_overlay
{XR_TYPE_SESSION_CREATE_INFO_OVERLAY_EXTX, STRUCT_SERIALIZER_PTR(XrSessionCreateInfoOverlayEXTX)},
{XR_TYPE_EVENT_DATA_MAIN_SESSION_VISIBILITY_CHANGED_EXTX, STRUCT_SERIALIZER_PTR(XrEventDataMainSessionVisibilityChangedEXTX)},
#endif // XRTRANSPORT_EXT_XR_EXTX_overlay
#ifdef XRTRANSPORT_EXT_XR_KHR_composition_layer_color_scale_bias
{XR_TYPE_COMPOSITION_LAYER_COLOR_SCALE_BIAS_KHR, STRUCT_SERIALIZER_PTR(XrCompositionLayerColorScaleBiasKHR)},
{XR_TYPE_SPATIAL_ANCHOR_CREATE_INFO_MSFT, STRUCT_SERIALIZER_PTR(XrSpatialAnchorCreateInfoMSFT)},
{XR_TYPE_SPATIAL_ANCHOR_SPACE_CREATE_INFO_MSFT, STRUCT_SERIALIZER_PTR(XrSpatialAnchorSpaceCreateInfoMSFT)},
#endif // XRTRANSPORT_EXT_XR_KHR_composition_layer_color_scale_bias
#ifdef XRTRANSPORT_EXT_XR_FB_composition_layer_image_layout
{XR_TYPE_COMPOSITION_LAYER_IMAGE_LAYOUT_FB, STRUCT_SERIALIZER_PTR(XrCompositionLayerImageLayoutFB)},
#endif // XRTRANSPORT_EXT_XR_FB_composition_layer_image_layout
#ifdef XRTRANSPORT_EXT_XR_FB_composition_layer_alpha_blend
{XR_TYPE_COMPOSITION_LAYER_ALPHA_BLEND_FB, STRUCT_SERIALIZER_PTR(XrCompositionLayerAlphaBlendFB)},
#endif // XRTRANSPORT_EXT_XR_FB_composition_layer_alpha_blend
#ifdef XRTRANSPORT_EXT_XR_EXT_view_configuration_depth_range
{XR_TYPE_VIEW_CONFIGURATION_DEPTH_RANGE_EXT, STRUCT_SERIALIZER_PTR(XrViewConfigurationDepthRangeEXT)},
#endif // XRTRANSPORT_EXT_XR_EXT_view_configuration_depth_range
#ifdef XRTRANSPORT_EXT_XR_MNDX_egl_enable
{XR_TYPE_GRAPHICS_BINDING_EGL_MNDX, STRUCT_SERIALIZER_PTR(XrGraphicsBindingEGLMNDX)},
#endif // XRTRANSPORT_EXT_XR_MNDX_egl_enable
#ifdef XRTRANSPORT_EXT_XR_MSFT_spatial_graph_bridge
{XR_TYPE_SPATIAL_GRAPH_NODE_SPACE_CREATE_INFO_MSFT, STRUCT_SERIALIZER_PTR(XrSpatialGraphNodeSpaceCreateInfoMSFT)},
{XR_TYPE_SPATIAL_GRAPH_STATIC_NODE_BINDING_CREATE_INFO_MSFT, STRUCT_SERIALIZER_PTR(XrSpatialGraphStaticNodeBindingCreateInfoMSFT)},
{XR_TYPE_SPATIAL_GRAPH_NODE_BINDING_PROPERTIES_GET_INFO_MSFT, STRUCT_SERIALIZER_PTR(XrSpatialGraphNodeBindingPropertiesGetInfoMSFT)},
{XR_TYPE_SPATIAL_GRAPH_NODE_BINDING_PROPERTIES_MSFT, STRUCT_SERIALIZER_PTR(XrSpatialGraphNodeBindingPropertiesMSFT)},
#endif // XRTRANSPORT_EXT_XR_MSFT_spatial_graph_bridge
#ifdef XRTRANSPORT_EXT_XR_EXT_hand_tracking
{XR_TYPE_SYSTEM_HAND_TRACKING_PROPERTIES_EXT, STRUCT_SERIALIZER_PTR(XrSystemHandTrackingPropertiesEXT)},
{XR_TYPE_HAND_TRACKER_CREATE_INFO_EXT, STRUCT_SERIALIZER_PTR(XrHandTrackerCreateInfoEXT)},
{XR_TYPE_HAND_JOINTS_LOCATE_INFO_EXT, STRUCT_SERIALIZER_PTR(XrHandJointsLocateInfoEXT)},
{XR_TYPE_HAND_JOINT_LOCATIONS_EXT, STRUCT_SERIALIZER_PTR(XrHandJointLocationsEXT)},
{XR_TYPE_HAND_JOINT_VELOCITIES_EXT, STRUCT_SERIALIZER_PTR(XrHandJointVelocitiesEXT)},
#endif // XRTRANSPORT_EXT_XR_EXT_hand_tracking
#ifdef XRTRANSPORT_EXT_XR_MSFT_hand_tracking_mesh
{XR_TYPE_SYSTEM_HAND_TRACKING_MESH_PROPERTIES_MSFT, STRUCT_SERIALIZER_PTR(XrSystemHandTrackingMeshPropertiesMSFT)},
{XR_TYPE_HAND_MESH_SPACE_CREATE_INFO_MSFT, STRUCT_SERIALIZER_PTR(XrHandMeshSpaceCreateInfoMSFT)},
{XR_TYPE_HAND_MESH_UPDATE_INFO_MSFT, STRUCT_SERIALIZER_PTR(XrHandMeshUpdateInfoMSFT)},
{XR_TYPE_HAND_MESH_MSFT, STRUCT_SERIALIZER_PTR(XrHandMeshMSFT)},
{XR_TYPE_HAND_POSE_TYPE_INFO_MSFT, STRUCT_SERIALIZER_PTR(XrHandPoseTypeInfoMSFT)},
#endif // XRTRANSPORT_EXT_XR_MSFT_hand_tracking_mesh
#ifdef XRTRANSPORT_EXT_XR_MSFT_secondary_view_configuration
{XR_TYPE_SECONDARY_VIEW_CONFIGURATION_SESSION_BEGIN_INFO_MSFT, STRUCT_SERIALIZER_PTR(XrSecondaryViewConfigurationSessionBeginInfoMSFT)},
{XR_TYPE_SECONDARY_VIEW_CONFIGURATION_STATE_MSFT, STRUCT_SERIALIZER_PTR(XrSecondaryViewConfigurationStateMSFT)},
{XR_TYPE_SECONDARY_VIEW_CONFIGURATION_FRAME_STATE_MSFT, STRUCT_SERIALIZER_PTR(XrSecondaryViewConfigurationFrameStateMSFT)},
{XR_TYPE_SECONDARY_VIEW_CONFIGURATION_FRAME_END_INFO_MSFT, STRUCT_SERIALIZER_PTR(XrSecondaryViewConfigurationFrameEndInfoMSFT)},
{XR_TYPE_SECONDARY_VIEW_CONFIGURATION_LAYER_INFO_MSFT, STRUCT_SERIALIZER_PTR(XrSecondaryViewConfigurationLayerInfoMSFT)},
{XR_TYPE_SECONDARY_VIEW_CONFIGURATION_SWAPCHAIN_CREATE_INFO_MSFT, STRUCT_SERIALIZER_PTR(XrSecondaryViewConfigurationSwapchainCreateInfoMSFT)},
#endif // XRTRANSPORT_EXT_XR_MSFT_secondary_view_configuration
#ifdef XRTRANSPORT_EXT_XR_MSFT_controller_model
{XR_TYPE_CONTROLLER_MODEL_KEY_STATE_MSFT, STRUCT_SERIALIZER_PTR(XrControllerModelKeyStateMSFT)},
{XR_TYPE_CONTROLLER_MODEL_NODE_PROPERTIES_MSFT, STRUCT_SERIALIZER_PTR(XrControllerModelNodePropertiesMSFT)},
{XR_TYPE_CONTROLLER_MODEL_PROPERTIES_MSFT, STRUCT_SERIALIZER_PTR(XrControllerModelPropertiesMSFT)},
{XR_TYPE_CONTROLLER_MODEL_NODE_STATE_MSFT, STRUCT_SERIALIZER_PTR(XrControllerModelNodeStateMSFT)},
{XR_TYPE_CONTROLLER_MODEL_STATE_MSFT, STRUCT_SERIALIZER_PTR(XrControllerModelStateMSFT)},
#endif // XRTRANSPORT_EXT_XR_MSFT_controller_model
#ifdef XRTRANSPORT_EXT_XR_EPIC_view_configuration_fov
{XR_TYPE_VIEW_CONFIGURATION_VIEW_FOV_EPIC, STRUCT_SERIALIZER_PTR(XrViewConfigurationViewFovEPIC)},
#endif // XRTRANSPORT_EXT_XR_EPIC_view_configuration_fov
#ifdef XRTRANSPORT_EXT_XR_MSFT_holographic_window_attachment
{XR_TYPE_HOLOGRAPHIC_WINDOW_ATTACHMENT_MSFT, STRUCT_SERIALIZER_PTR(XrHolographicWindowAttachmentMSFT)},
#endif // XRTRANSPORT_EXT_XR_MSFT_holographic_window_attachment
#ifdef XRTRANSPORT_EXT_XR_MSFT_composition_layer_reprojection
{XR_TYPE_COMPOSITION_LAYER_REPROJECTION_INFO_MSFT, STRUCT_SERIALIZER_PTR(XrCompositionLayerReprojectionInfoMSFT)},
{XR_TYPE_COMPOSITION_LAYER_REPROJECTION_PLANE_OVERRIDE_MSFT, STRUCT_SERIALIZER_PTR(XrCompositionLayerReprojectionPlaneOverrideMSFT)},
#endif // XRTRANSPORT_EXT_XR_MSFT_composition_layer_reprojection
#ifdef XRTRANSPORT_EXT_XR_FB_android_surface_swapchain_create
{XR_TYPE_ANDROID_SURFACE_SWAPCHAIN_CREATE_INFO_FB, STRUCT_SERIALIZER_PTR(XrAndroidSurfaceSwapchainCreateInfoFB)},
#endif // XRTRANSPORT_EXT_XR_FB_android_surface_swapchain_create
#ifdef XRTRANSPORT_EXT_XR_FB_composition_layer_secure_content
{XR_TYPE_COMPOSITION_LAYER_SECURE_CONTENT_FB, STRUCT_SERIALIZER_PTR(XrCompositionLayerSecureContentFB)},
#endif // XRTRANSPORT_EXT_XR_FB_composition_layer_secure_content
#ifdef XRTRANSPORT_EXT_XR_FB_body_tracking
{XR_TYPE_BODY_TRACKER_CREATE_INFO_FB, STRUCT_SERIALIZER_PTR(XrBodyTrackerCreateInfoFB)},
{XR_TYPE_BODY_JOINTS_LOCATE_INFO_FB, STRUCT_SERIALIZER_PTR(XrBodyJointsLocateInfoFB)},
{XR_TYPE_SYSTEM_BODY_TRACKING_PROPERTIES_FB, STRUCT_SERIALIZER_PTR(XrSystemBodyTrackingPropertiesFB)},
{XR_TYPE_BODY_JOINT_LOCATIONS_FB, STRUCT_SERIALIZER_PTR(XrBodyJointLocationsFB)},
{XR_TYPE_BODY_SKELETON_FB, STRUCT_SERIALIZER_PTR(XrBodySkeletonFB)},
#endif // XRTRANSPORT_EXT_XR_FB_body_tracking
#ifdef XRTRANSPORT_EXT_XR_EXT_dpad_binding
{XR_TYPE_INTERACTION_PROFILE_DPAD_BINDING_EXT, STRUCT_SERIALIZER_PTR(XrInteractionProfileDpadBindingEXT)},
#endif // XRTRANSPORT_EXT_XR_EXT_dpad_binding
#ifdef XRTRANSPORT_EXT_XR_VALVE_analog_threshold
{XR_TYPE_INTERACTION_PROFILE_ANALOG_THRESHOLD_VALVE, STRUCT_SERIALIZER_PTR(XrInteractionProfileAnalogThresholdVALVE)},
#endif // XRTRANSPORT_EXT_XR_VALVE_analog_threshold
#ifdef XRTRANSPORT_EXT_XR_EXT_hand_joints_motion_range
{XR_TYPE_HAND_JOINTS_MOTION_RANGE_INFO_EXT, STRUCT_SERIALIZER_PTR(XrHandJointsMotionRangeInfoEXT)},
#endif // XRTRANSPORT_EXT_XR_EXT_hand_joints_motion_range
#ifdef XRTRANSPORT_EXT_XR_KHR_loader_init_android
{XR_TYPE_LOADER_INIT_INFO_ANDROID_KHR, STRUCT_SERIALIZER_PTR(XrLoaderInitInfoAndroidKHR)},
#endif // XRTRANSPORT_EXT_XR_KHR_loader_init_android
#ifdef XRTRANSPORT_EXT_XR_KHR_vulkan_enable2
{XR_TYPE_VULKAN_INSTANCE_CREATE_INFO_KHR, STRUCT_SERIALIZER_PTR(XrVulkanInstanceCreateInfoKHR)},
{XR_TYPE_VULKAN_DEVICE_CREATE_INFO_KHR, STRUCT_SERIALIZER_PTR(XrVulkanDeviceCreateInfoKHR)},
{XR_TYPE_VULKAN_GRAPHICS_DEVICE_GET_INFO_KHR, STRUCT_SERIALIZER_PTR(XrVulkanGraphicsDeviceGetInfoKHR)},
#endif // XRTRANSPORT_EXT_XR_KHR_vulkan_enable2
#ifdef XRTRANSPORT_EXT_XR_KHR_composition_layer_equirect2
{XR_TYPE_COMPOSITION_LAYER_EQUIRECT2_KHR, STRUCT_SERIALIZER_PTR(XrCompositionLayerEquirect2KHR)},
#endif // XRTRANSPORT_EXT_XR_KHR_composition_layer_equirect2
#ifdef XRTRANSPORT_EXT_XR_MSFT_scene_understanding
{XR_TYPE_SCENE_OBSERVER_CREATE_INFO_MSFT, STRUCT_SERIALIZER_PTR(XrSceneObserverCreateInfoMSFT)},
{XR_TYPE_SCENE_CREATE_INFO_MSFT, STRUCT_SERIALIZER_PTR(XrSceneCreateInfoMSFT)},
{XR_TYPE_NEW_SCENE_COMPUTE_INFO_MSFT, STRUCT_SERIALIZER_PTR(XrNewSceneComputeInfoMSFT)},
{XR_TYPE_VISUAL_MESH_COMPUTE_LOD_INFO_MSFT, STRUCT_SERIALIZER_PTR(XrVisualMeshComputeLodInfoMSFT)},
{XR_TYPE_SCENE_COMPONENTS_MSFT, STRUCT_SERIALIZER_PTR(XrSceneComponentsMSFT)},
{XR_TYPE_SCENE_COMPONENTS_GET_INFO_MSFT, STRUCT_SERIALIZER_PTR(XrSceneComponentsGetInfoMSFT)},
{XR_TYPE_SCENE_COMPONENT_LOCATIONS_MSFT, STRUCT_SERIALIZER_PTR(XrSceneComponentLocationsMSFT)},
{XR_TYPE_SCENE_COMPONENTS_LOCATE_INFO_MSFT, STRUCT_SERIALIZER_PTR(XrSceneComponentsLocateInfoMSFT)},
{XR_TYPE_SCENE_OBJECTS_MSFT, STRUCT_SERIALIZER_PTR(XrSceneObjectsMSFT)},
{XR_TYPE_SCENE_COMPONENT_PARENT_FILTER_INFO_MSFT, STRUCT_SERIALIZER_PTR(XrSceneComponentParentFilterInfoMSFT)},
{XR_TYPE_SCENE_OBJECT_TYPES_FILTER_INFO_MSFT, STRUCT_SERIALIZER_PTR(XrSceneObjectTypesFilterInfoMSFT)},
{XR_TYPE_SCENE_PLANES_MSFT, STRUCT_SERIALIZER_PTR(XrScenePlanesMSFT)},
{XR_TYPE_SCENE_PLANE_ALIGNMENT_FILTER_INFO_MSFT, STRUCT_SERIALIZER_PTR(XrScenePlaneAlignmentFilterInfoMSFT)},
{XR_TYPE_SCENE_MESHES_MSFT, STRUCT_SERIALIZER_PTR(XrSceneMeshesMSFT)},
{XR_TYPE_SCENE_MESH_BUFFERS_GET_INFO_MSFT, STRUCT_SERIALIZER_PTR(XrSceneMeshBuffersGetInfoMSFT)},
{XR_TYPE_SCENE_MESH_BUFFERS_MSFT, STRUCT_SERIALIZER_PTR(XrSceneMeshBuffersMSFT)},
{XR_TYPE_SCENE_MESH_VERTEX_BUFFER_MSFT, STRUCT_SERIALIZER_PTR(XrSceneMeshVertexBufferMSFT)},
{XR_TYPE_SCENE_MESH_INDICES_UINT32_MSFT, STRUCT_SERIALIZER_PTR(XrSceneMeshIndicesUint32MSFT)},
{XR_TYPE_SCENE_MESH_INDICES_UINT16_MSFT, STRUCT_SERIALIZER_PTR(XrSceneMeshIndicesUint16MSFT)},
#endif // XRTRANSPORT_EXT_XR_MSFT_scene_understanding
#ifdef XRTRANSPORT_EXT_XR_MSFT_scene_understanding_serialization
{XR_TYPE_SERIALIZED_SCENE_FRAGMENT_DATA_GET_INFO_MSFT, STRUCT_SERIALIZER_PTR(XrSerializedSceneFragmentDataGetInfoMSFT)},
{XR_TYPE_SCENE_DESERIALIZE_INFO_MSFT, STRUCT_SERIALIZER_PTR(XrSceneDeserializeInfoMSFT)},
#endif // XRTRANSPORT_EXT_XR_MSFT_scene_understanding_serialization
#ifdef XRTRANSPORT_EXT_XR_FB_display_refresh_rate
{XR_TYPE_EVENT_DATA_DISPLAY_REFRESH_RATE_CHANGED_FB, STRUCT_SERIALIZER_PTR(XrEventDataDisplayRefreshRateChangedFB)},
#endif // XRTRANSPORT_EXT_XR_FB_display_refresh_rate
#ifdef XRTRANSPORT_EXT_XR_HTCX_vive_tracker_interaction
{XR_TYPE_VIVE_TRACKER_PATHS_HTCX, STRUCT_SERIALIZER_PTR(XrViveTrackerPathsHTCX)},
{XR_TYPE_EVENT_DATA_VIVE_TRACKER_CONNECTED_HTCX, STRUCT_SERIALIZER_PTR(XrEventDataViveTrackerConnectedHTCX)},
#endif // XRTRANSPORT_EXT_XR_HTCX_vive_tracker_interaction
#ifdef XRTRANSPORT_EXT_XR_HTC_facial_tracking
{XR_TYPE_SYSTEM_FACIAL_TRACKING_PROPERTIES_HTC, STRUCT_SERIALIZER_PTR(XrSystemFacialTrackingPropertiesHTC)},
{XR_TYPE_FACIAL_TRACKER_CREATE_INFO_HTC, STRUCT_SERIALIZER_PTR(XrFacialTrackerCreateInfoHTC)},
{XR_TYPE_FACIAL_EXPRESSIONS_HTC, STRUCT_SERIALIZER_PTR(XrFacialExpressionsHTC)},
#endif // XRTRANSPORT_EXT_XR_HTC_facial_tracking
#ifdef XRTRANSPORT_EXT_XR_FB_color_space
{XR_TYPE_SYSTEM_COLOR_SPACE_PROPERTIES_FB, STRUCT_SERIALIZER_PTR(XrSystemColorSpacePropertiesFB)},
#endif // XRTRANSPORT_EXT_XR_FB_color_space
#ifdef XRTRANSPORT_EXT_XR_FB_hand_tracking_mesh
{XR_TYPE_HAND_TRACKING_MESH_FB, STRUCT_SERIALIZER_PTR(XrHandTrackingMeshFB)},
{XR_TYPE_HAND_TRACKING_SCALE_FB, STRUCT_SERIALIZER_PTR(XrHandTrackingScaleFB)},
#endif // XRTRANSPORT_EXT_XR_FB_hand_tracking_mesh
#ifdef XRTRANSPORT_EXT_XR_FB_hand_tracking_aim
{XR_TYPE_HAND_TRACKING_AIM_STATE_FB, STRUCT_SERIALIZER_PTR(XrHandTrackingAimStateFB)},
#endif // XRTRANSPORT_EXT_XR_FB_hand_tracking_aim
#ifdef XRTRANSPORT_EXT_XR_FB_hand_tracking_capsules
{XR_TYPE_HAND_TRACKING_CAPSULES_STATE_FB, STRUCT_SERIALIZER_PTR(XrHandTrackingCapsulesStateFB)},
#endif // XRTRANSPORT_EXT_XR_FB_hand_tracking_capsules
#ifdef XRTRANSPORT_EXT_XR_FB_spatial_entity
{XR_TYPE_SPACE_COMPONENT_STATUS_FB, STRUCT_SERIALIZER_PTR(XrSpaceComponentStatusFB)},
{XR_TYPE_SPATIAL_ANCHOR_CREATE_INFO_FB, STRUCT_SERIALIZER_PTR(XrSpatialAnchorCreateInfoFB)},
{XR_TYPE_SYSTEM_SPATIAL_ENTITY_PROPERTIES_FB, STRUCT_SERIALIZER_PTR(XrSystemSpatialEntityPropertiesFB)},
{XR_TYPE_EVENT_DATA_SPATIAL_ANCHOR_CREATE_COMPLETE_FB, STRUCT_SERIALIZER_PTR(XrEventDataSpatialAnchorCreateCompleteFB)},
{XR_TYPE_EVENT_DATA_SPACE_SET_STATUS_COMPLETE_FB, STRUCT_SERIALIZER_PTR(XrEventDataSpaceSetStatusCompleteFB)},
{XR_TYPE_SPACE_COMPONENT_STATUS_SET_INFO_FB, STRUCT_SERIALIZER_PTR(XrSpaceComponentStatusSetInfoFB)},
#endif // XRTRANSPORT_EXT_XR_FB_spatial_entity
#ifdef XRTRANSPORT_EXT_XR_FB_foveation
{XR_TYPE_FOVEATION_PROFILE_CREATE_INFO_FB, STRUCT_SERIALIZER_PTR(XrFoveationProfileCreateInfoFB)},
{XR_TYPE_SWAPCHAIN_CREATE_INFO_FOVEATION_FB, STRUCT_SERIALIZER_PTR(XrSwapchainCreateInfoFoveationFB)},
{XR_TYPE_SWAPCHAIN_STATE_FOVEATION_FB, STRUCT_SERIALIZER_PTR(XrSwapchainStateFoveationFB)},
#endif // XRTRANSPORT_EXT_XR_FB_foveation
#ifdef XRTRANSPORT_EXT_XR_FB_foveation_configuration
{XR_TYPE_FOVEATION_LEVEL_PROFILE_CREATE_INFO_FB, STRUCT_SERIALIZER_PTR(XrFoveationLevelProfileCreateInfoFB)},
#endif // XRTRANSPORT_EXT_XR_FB_foveation_configuration
#ifdef XRTRANSPORT_EXT_XR_FB_keyboard_tracking
{XR_TYPE_SYSTEM_KEYBOARD_TRACKING_PROPERTIES_FB, STRUCT_SERIALIZER_PTR(XrSystemKeyboardTrackingPropertiesFB)},
{XR_TYPE_KEYBOARD_TRACKING_QUERY_FB, STRUCT_SERIALIZER_PTR(XrKeyboardTrackingQueryFB)},
{XR_TYPE_KEYBOARD_SPACE_CREATE_INFO_FB, STRUCT_SERIALIZER_PTR(XrKeyboardSpaceCreateInfoFB)},
#endif // XRTRANSPORT_EXT_XR_FB_keyboard_tracking
#ifdef XRTRANSPORT_EXT_XR_FB_triangle_mesh
{XR_TYPE_TRIANGLE_MESH_CREATE_INFO_FB, STRUCT_SERIALIZER_PTR(XrTriangleMeshCreateInfoFB)},
#endif // XRTRANSPORT_EXT_XR_FB_triangle_mesh
#ifdef XRTRANSPORT_EXT_XR_FB_passthrough
{XR_TYPE_SYSTEM_PASSTHROUGH_PROPERTIES_FB, STRUCT_SERIALIZER_PTR(XrSystemPassthroughPropertiesFB)},
{XR_TYPE_PASSTHROUGH_CREATE_INFO_FB, STRUCT_SERIALIZER_PTR(XrPassthroughCreateInfoFB)},
{XR_TYPE_PASSTHROUGH_LAYER_CREATE_INFO_FB, STRUCT_SERIALIZER_PTR(XrPassthroughLayerCreateInfoFB)},
{XR_TYPE_COMPOSITION_LAYER_PASSTHROUGH_FB, STRUCT_SERIALIZER_PTR(XrCompositionLayerPassthroughFB)},
{XR_TYPE_GEOMETRY_INSTANCE_CREATE_INFO_FB, STRUCT_SERIALIZER_PTR(XrGeometryInstanceCreateInfoFB)},
{XR_TYPE_GEOMETRY_INSTANCE_TRANSFORM_FB, STRUCT_SERIALIZER_PTR(XrGeometryInstanceTransformFB)},
{XR_TYPE_SYSTEM_PASSTHROUGH_PROPERTIES2_FB, STRUCT_SERIALIZER_PTR(XrSystemPassthroughProperties2FB)},
{XR_TYPE_PASSTHROUGH_STYLE_FB, STRUCT_SERIALIZER_PTR(XrPassthroughStyleFB)},
{XR_TYPE_PASSTHROUGH_COLOR_MAP_MONO_TO_RGBA_FB, STRUCT_SERIALIZER_PTR(XrPassthroughColorMapMonoToRgbaFB)},
{XR_TYPE_PASSTHROUGH_COLOR_MAP_MONO_TO_MONO_FB, STRUCT_SERIALIZER_PTR(XrPassthroughColorMapMonoToMonoFB)},
{XR_TYPE_PASSTHROUGH_BRIGHTNESS_CONTRAST_SATURATION_FB, STRUCT_SERIALIZER_PTR(XrPassthroughBrightnessContrastSaturationFB)},
{XR_TYPE_EVENT_DATA_PASSTHROUGH_STATE_CHANGED_FB, STRUCT_SERIALIZER_PTR(XrEventDataPassthroughStateChangedFB)},
#endif // XRTRANSPORT_EXT_XR_FB_passthrough
#ifdef XRTRANSPORT_EXT_XR_FB_render_model
{XR_TYPE_RENDER_MODEL_PATH_INFO_FB, STRUCT_SERIALIZER_PTR(XrRenderModelPathInfoFB)},
{XR_TYPE_RENDER_MODEL_PROPERTIES_FB, STRUCT_SERIALIZER_PTR(XrRenderModelPropertiesFB)},
{XR_TYPE_RENDER_MODEL_BUFFER_FB, STRUCT_SERIALIZER_PTR(XrRenderModelBufferFB)},
{XR_TYPE_RENDER_MODEL_LOAD_INFO_FB, STRUCT_SERIALIZER_PTR(XrRenderModelLoadInfoFB)},
{XR_TYPE_SYSTEM_RENDER_MODEL_PROPERTIES_FB, STRUCT_SERIALIZER_PTR(XrSystemRenderModelPropertiesFB)},
{XR_TYPE_RENDER_MODEL_CAPABILITIES_REQUEST_FB, STRUCT_SERIALIZER_PTR(XrRenderModelCapabilitiesRequestFB)},
#endif // XRTRANSPORT_EXT_XR_FB_render_model
#ifdef XRTRANSPORT_EXT_XR_KHR_binding_modification
{XR_TYPE_BINDING_MODIFICATIONS_KHR, STRUCT_SERIALIZER_PTR(XrBindingModificationsKHR)},
#endif // XRTRANSPORT_EXT_XR_KHR_binding_modification
#ifdef XRTRANSPORT_EXT_XR_VARJO_foveated_rendering
{XR_TYPE_VIEW_LOCATE_FOVEATED_RENDERING_VARJO, STRUCT_SERIALIZER_PTR(XrViewLocateFoveatedRenderingVARJO)},
{XR_TYPE_FOVEATED_VIEW_CONFIGURATION_VIEW_VARJO, STRUCT_SERIALIZER_PTR(XrFoveatedViewConfigurationViewVARJO)},
{XR_TYPE_SYSTEM_FOVEATED_RENDERING_PROPERTIES_VARJO, STRUCT_SERIALIZER_PTR(XrSystemFoveatedRenderingPropertiesVARJO)},
#endif // XRTRANSPORT_EXT_XR_VARJO_foveated_rendering
#ifdef XRTRANSPORT_EXT_XR_VARJO_composition_layer_depth_test
{XR_TYPE_COMPOSITION_LAYER_DEPTH_TEST_VARJO, STRUCT_SERIALIZER_PTR(XrCompositionLayerDepthTestVARJO)},
#endif // XRTRANSPORT_EXT_XR_VARJO_composition_layer_depth_test
#ifdef XRTRANSPORT_EXT_XR_VARJO_marker_tracking
{XR_TYPE_SYSTEM_MARKER_TRACKING_PROPERTIES_VARJO, STRUCT_SERIALIZER_PTR(XrSystemMarkerTrackingPropertiesVARJO)},
{XR_TYPE_EVENT_DATA_MARKER_TRACKING_UPDATE_VARJO, STRUCT_SERIALIZER_PTR(XrEventDataMarkerTrackingUpdateVARJO)},
{XR_TYPE_MARKER_SPACE_CREATE_INFO_VARJO, STRUCT_SERIALIZER_PTR(XrMarkerSpaceCreateInfoVARJO)},
#endif // XRTRANSPORT_EXT_XR_VARJO_marker_tracking
#ifdef XRTRANSPORT_EXT_XR_ML_frame_end_info
{XR_TYPE_FRAME_END_INFO_ML, STRUCT_SERIALIZER_PTR(XrFrameEndInfoML)},
#endif // XRTRANSPORT_EXT_XR_ML_frame_end_info
#ifdef XRTRANSPORT_EXT_XR_ML_global_dimmer
{XR_TYPE_GLOBAL_DIMMER_FRAME_END_INFO_ML, STRUCT_SERIALIZER_PTR(XrGlobalDimmerFrameEndInfoML)},
{XR_TYPE_COORDINATE_SPACE_CREATE_INFO_ML, STRUCT_SERIALIZER_PTR(XrCoordinateSpaceCreateInfoML)},
#endif // XRTRANSPORT_EXT_XR_ML_global_dimmer
#ifdef XRTRANSPORT_EXT_XR_ML_marker_understanding
{XR_TYPE_SYSTEM_MARKER_UNDERSTANDING_PROPERTIES_ML, STRUCT_SERIALIZER_PTR(XrSystemMarkerUnderstandingPropertiesML)},
{XR_TYPE_MARKER_DETECTOR_CREATE_INFO_ML, STRUCT_SERIALIZER_PTR(XrMarkerDetectorCreateInfoML)},
{XR_TYPE_MARKER_DETECTOR_ARUCO_INFO_ML, STRUCT_SERIALIZER_PTR(XrMarkerDetectorArucoInfoML)},
{XR_TYPE_MARKER_DETECTOR_SIZE_INFO_ML, STRUCT_SERIALIZER_PTR(XrMarkerDetectorSizeInfoML)},
{XR_TYPE_MARKER_DETECTOR_APRIL_TAG_INFO_ML, STRUCT_SERIALIZER_PTR(XrMarkerDetectorAprilTagInfoML)},
{XR_TYPE_MARKER_DETECTOR_CUSTOM_PROFILE_INFO_ML, STRUCT_SERIALIZER_PTR(XrMarkerDetectorCustomProfileInfoML)},
{XR_TYPE_MARKER_DETECTOR_SNAPSHOT_INFO_ML, STRUCT_SERIALIZER_PTR(XrMarkerDetectorSnapshotInfoML)},
{XR_TYPE_MARKER_DETECTOR_STATE_ML, STRUCT_SERIALIZER_PTR(XrMarkerDetectorStateML)},
{XR_TYPE_MARKER_SPACE_CREATE_INFO_ML, STRUCT_SERIALIZER_PTR(XrMarkerSpaceCreateInfoML)},
#endif // XRTRANSPORT_EXT_XR_ML_marker_understanding
#ifdef XRTRANSPORT_EXT_XR_ML_localization_map
{XR_TYPE_LOCALIZATION_MAP_ML, STRUCT_SERIALIZER_PTR(XrLocalizationMapML)},
{XR_TYPE_EVENT_DATA_LOCALIZATION_CHANGED_ML, STRUCT_SERIALIZER_PTR(XrEventDataLocalizationChangedML)},
{XR_TYPE_MAP_LOCALIZATION_REQUEST_INFO_ML, STRUCT_SERIALIZER_PTR(XrMapLocalizationRequestInfoML)},
{XR_TYPE_LOCALIZATION_MAP_IMPORT_INFO_ML, STRUCT_SERIALIZER_PTR(XrLocalizationMapImportInfoML)},
{XR_TYPE_LOCALIZATION_ENABLE_EVENTS_INFO_ML, STRUCT_SERIALIZER_PTR(XrLocalizationEnableEventsInfoML)},
#endif // XRTRANSPORT_EXT_XR_ML_localization_map
#ifdef XRTRANSPORT_EXT_XR_ML_spatial_anchors
{XR_TYPE_SPATIAL_ANCHORS_CREATE_INFO_FROM_POSE_ML, STRUCT_SERIALIZER_PTR(XrSpatialAnchorsCreateInfoFromPoseML)},
{XR_TYPE_CREATE_SPATIAL_ANCHORS_COMPLETION_ML, STRUCT_SERIALIZER_PTR(XrCreateSpatialAnchorsCompletionML)},
{XR_TYPE_SPATIAL_ANCHOR_STATE_ML, STRUCT_SERIALIZER_PTR(XrSpatialAnchorStateML)},
#endif // XRTRANSPORT_EXT_XR_ML_spatial_anchors
#ifdef XRTRANSPORT_EXT_XR_ML_spatial_anchors_storage
{XR_TYPE_SPATIAL_ANCHORS_CREATE_STORAGE_INFO_ML, STRUCT_SERIALIZER_PTR(XrSpatialAnchorsCreateStorageInfoML)},
{XR_TYPE_SPATIAL_ANCHORS_QUERY_INFO_RADIUS_ML, STRUCT_SERIALIZER_PTR(XrSpatialAnchorsQueryInfoRadiusML)},
{XR_TYPE_SPATIAL_ANCHORS_QUERY_COMPLETION_ML, STRUCT_SERIALIZER_PTR(XrSpatialAnchorsQueryCompletionML)},
{XR_TYPE_SPATIAL_ANCHORS_CREATE_INFO_FROM_UUIDS_ML, STRUCT_SERIALIZER_PTR(XrSpatialAnchorsCreateInfoFromUuidsML)},
{XR_TYPE_SPATIAL_ANCHORS_PUBLISH_INFO_ML, STRUCT_SERIALIZER_PTR(XrSpatialAnchorsPublishInfoML)},
{XR_TYPE_SPATIAL_ANCHORS_PUBLISH_COMPLETION_ML, STRUCT_SERIALIZER_PTR(XrSpatialAnchorsPublishCompletionML)},
{XR_TYPE_SPATIAL_ANCHORS_DELETE_INFO_ML, STRUCT_SERIALIZER_PTR(XrSpatialAnchorsDeleteInfoML)},
{XR_TYPE_SPATIAL_ANCHORS_DELETE_COMPLETION_ML, STRUCT_SERIALIZER_PTR(XrSpatialAnchorsDeleteCompletionML)},
{XR_TYPE_SPATIAL_ANCHORS_UPDATE_EXPIRATION_INFO_ML, STRUCT_SERIALIZER_PTR(XrSpatialAnchorsUpdateExpirationInfoML)},
{XR_TYPE_SPATIAL_ANCHORS_UPDATE_EXPIRATION_COMPLETION_ML, STRUCT_SERIALIZER_PTR(XrSpatialAnchorsUpdateExpirationCompletionML)},
{XR_TYPE_SPATIAL_ANCHORS_PUBLISH_COMPLETION_DETAILS_ML, STRUCT_SERIALIZER_PTR(XrSpatialAnchorsPublishCompletionDetailsML)},
{XR_TYPE_SPATIAL_ANCHORS_DELETE_COMPLETION_DETAILS_ML, STRUCT_SERIALIZER_PTR(XrSpatialAnchorsDeleteCompletionDetailsML)},
{XR_TYPE_SPATIAL_ANCHORS_UPDATE_EXPIRATION_COMPLETION_DETAILS_ML, STRUCT_SERIALIZER_PTR(XrSpatialAnchorsUpdateExpirationCompletionDetailsML)},
#endif // XRTRANSPORT_EXT_XR_ML_spatial_anchors_storage
#ifdef XRTRANSPORT_EXT_XR_MSFT_spatial_anchor_persistence
{XR_TYPE_SPATIAL_ANCHOR_PERSISTENCE_INFO_MSFT, STRUCT_SERIALIZER_PTR(XrSpatialAnchorPersistenceInfoMSFT)},
{XR_TYPE_SPATIAL_ANCHOR_FROM_PERSISTED_ANCHOR_CREATE_INFO_MSFT, STRUCT_SERIALIZER_PTR(XrSpatialAnchorFromPersistedAnchorCreateInfoMSFT)},
#endif // XRTRANSPORT_EXT_XR_MSFT_spatial_anchor_persistence
#ifdef XRTRANSPORT_EXT_XR_MSFT_scene_marker
{XR_TYPE_SCENE_MARKERS_MSFT, STRUCT_SERIALIZER_PTR(XrSceneMarkersMSFT)},
{XR_TYPE_SCENE_MARKER_TYPE_FILTER_MSFT, STRUCT_SERIALIZER_PTR(XrSceneMarkerTypeFilterMSFT)},
{XR_TYPE_SCENE_MARKER_QR_CODES_MSFT, STRUCT_SERIALIZER_PTR(XrSceneMarkerQRCodesMSFT)},
#endif // XRTRANSPORT_EXT_XR_MSFT_scene_marker
#ifdef XRTRANSPORT_EXT_XR_FB_spatial_entity_query
{XR_TYPE_SPACE_QUERY_INFO_FB, STRUCT_SERIALIZER_PTR(XrSpaceQueryInfoFB)},
{XR_TYPE_SPACE_QUERY_RESULTS_FB, STRUCT_SERIALIZER_PTR(XrSpaceQueryResultsFB)},
{XR_TYPE_SPACE_STORAGE_LOCATION_FILTER_INFO_FB, STRUCT_SERIALIZER_PTR(XrSpaceStorageLocationFilterInfoFB)},
{XR_TYPE_SPACE_COMPONENT_FILTER_INFO_FB, STRUCT_SERIALIZER_PTR(XrSpaceComponentFilterInfoFB)},
{XR_TYPE_SPACE_UUID_FILTER_INFO_FB, STRUCT_SERIALIZER_PTR(XrSpaceUuidFilterInfoFB)},
{XR_TYPE_EVENT_DATA_SPACE_QUERY_RESULTS_AVAILABLE_FB, STRUCT_SERIALIZER_PTR(XrEventDataSpaceQueryResultsAvailableFB)},
{XR_TYPE_EVENT_DATA_SPACE_QUERY_COMPLETE_FB, STRUCT_SERIALIZER_PTR(XrEventDataSpaceQueryCompleteFB)},
#endif // XRTRANSPORT_EXT_XR_FB_spatial_entity_query
#ifdef XRTRANSPORT_EXT_XR_FB_spatial_entity_storage
{XR_TYPE_SPACE_SAVE_INFO_FB, STRUCT_SERIALIZER_PTR(XrSpaceSaveInfoFB)},
{XR_TYPE_SPACE_ERASE_INFO_FB, STRUCT_SERIALIZER_PTR(XrSpaceEraseInfoFB)},
{XR_TYPE_EVENT_DATA_SPACE_SAVE_COMPLETE_FB, STRUCT_SERIALIZER_PTR(XrEventDataSpaceSaveCompleteFB)},
{XR_TYPE_EVENT_DATA_SPACE_ERASE_COMPLETE_FB, STRUCT_SERIALIZER_PTR(XrEventDataSpaceEraseCompleteFB)},
#endif // XRTRANSPORT_EXT_XR_FB_spatial_entity_storage
#ifdef XRTRANSPORT_EXT_XR_FB_foveation_vulkan
{XR_TYPE_SWAPCHAIN_IMAGE_FOVEATION_VULKAN_FB, STRUCT_SERIALIZER_PTR(XrSwapchainImageFoveationVulkanFB)},
#endif // XRTRANSPORT_EXT_XR_FB_foveation_vulkan
#ifdef XRTRANSPORT_EXT_XR_FB_swapchain_update_state_android_surface
{XR_TYPE_SWAPCHAIN_STATE_ANDROID_SURFACE_DIMENSIONS_FB, STRUCT_SERIALIZER_PTR(XrSwapchainStateAndroidSurfaceDimensionsFB)},
#endif // XRTRANSPORT_EXT_XR_FB_swapchain_update_state_android_surface
#ifdef XRTRANSPORT_EXT_XR_FB_swapchain_update_state_opengl_es
{XR_TYPE_SWAPCHAIN_STATE_SAMPLER_OPENGL_ES_FB, STRUCT_SERIALIZER_PTR(XrSwapchainStateSamplerOpenGLESFB)},
#endif // XRTRANSPORT_EXT_XR_FB_swapchain_update_state_opengl_es
#ifdef XRTRANSPORT_EXT_XR_FB_swapchain_update_state_vulkan
{XR_TYPE_SWAPCHAIN_STATE_SAMPLER_VULKAN_FB, STRUCT_SERIALIZER_PTR(XrSwapchainStateSamplerVulkanFB)},
#endif // XRTRANSPORT_EXT_XR_FB_swapchain_update_state_vulkan
#ifdef XRTRANSPORT_EXT_XR_FB_spatial_entity_sharing
{XR_TYPE_SPACE_SHARE_INFO_FB, STRUCT_SERIALIZER_PTR(XrSpaceShareInfoFB)},
{XR_TYPE_EVENT_DATA_SPACE_SHARE_COMPLETE_FB, STRUCT_SERIALIZER_PTR(XrEventDataSpaceShareCompleteFB)},
#endif // XRTRANSPORT_EXT_XR_FB_spatial_entity_sharing
#ifdef XRTRANSPORT_EXT_XR_FB_space_warp
{XR_TYPE_COMPOSITION_LAYER_SPACE_WARP_INFO_FB, STRUCT_SERIALIZER_PTR(XrCompositionLayerSpaceWarpInfoFB)},
{XR_TYPE_SYSTEM_SPACE_WARP_PROPERTIES_FB, STRUCT_SERIALIZER_PTR(XrSystemSpaceWarpPropertiesFB)},
#endif // XRTRANSPORT_EXT_XR_FB_space_warp
#ifdef XRTRANSPORT_EXT_XR_FB_haptic_amplitude_envelope
{XR_TYPE_HAPTIC_AMPLITUDE_ENVELOPE_VIBRATION_FB, STRUCT_SERIALIZER_PTR(XrHapticAmplitudeEnvelopeVibrationFB)},
#endif // XRTRANSPORT_EXT_XR_FB_haptic_amplitude_envelope
#ifdef XRTRANSPORT_EXT_XR_FB_scene
{XR_TYPE_SEMANTIC_LABELS_FB, STRUCT_SERIALIZER_PTR(XrSemanticLabelsFB)},
{XR_TYPE_ROOM_LAYOUT_FB, STRUCT_SERIALIZER_PTR(XrRoomLayoutFB)},
{XR_TYPE_BOUNDARY_2D_FB, STRUCT_SERIALIZER_PTR(XrBoundary2DFB)},
{XR_TYPE_SEMANTIC_LABELS_SUPPORT_INFO_FB, STRUCT_SERIALIZER_PTR(XrSemanticLabelsSupportInfoFB)},
{XR_TYPE_DIGITAL_LENS_CONTROL_ALMALENCE, STRUCT_SERIALIZER_PTR(XrDigitalLensControlALMALENCE)},
#endif // XRTRANSPORT_EXT_XR_FB_scene
#ifdef XRTRANSPORT_EXT_XR_FB_scene_capture
{XR_TYPE_EVENT_DATA_SCENE_CAPTURE_COMPLETE_FB, STRUCT_SERIALIZER_PTR(XrEventDataSceneCaptureCompleteFB)},
{XR_TYPE_SCENE_CAPTURE_REQUEST_INFO_FB, STRUCT_SERIALIZER_PTR(XrSceneCaptureRequestInfoFB)},
#endif // XRTRANSPORT_EXT_XR_FB_scene_capture
#ifdef XRTRANSPORT_EXT_XR_FB_spatial_entity_container
{XR_TYPE_SPACE_CONTAINER_FB, STRUCT_SERIALIZER_PTR(XrSpaceContainerFB)},
#endif // XRTRANSPORT_EXT_XR_FB_spatial_entity_container
#ifdef XRTRANSPORT_EXT_XR_META_foveation_eye_tracked
{XR_TYPE_FOVEATION_EYE_TRACKED_PROFILE_CREATE_INFO_META, STRUCT_SERIALIZER_PTR(XrFoveationEyeTrackedProfileCreateInfoMETA)},
{XR_TYPE_FOVEATION_EYE_TRACKED_STATE_META, STRUCT_SERIALIZER_PTR(XrFoveationEyeTrackedStateMETA)},
{XR_TYPE_SYSTEM_FOVEATION_EYE_TRACKED_PROPERTIES_META, STRUCT_SERIALIZER_PTR(XrSystemFoveationEyeTrackedPropertiesMETA)},
#endif // XRTRANSPORT_EXT_XR_META_foveation_eye_tracked
#ifdef XRTRANSPORT_EXT_XR_FB_face_tracking
{XR_TYPE_FACE_EXPRESSION_INFO_FB, STRUCT_SERIALIZER_PTR(XrFaceExpressionInfoFB)},
{XR_TYPE_SYSTEM_FACE_TRACKING_PROPERTIES_FB, STRUCT_SERIALIZER_PTR(XrSystemFaceTrackingPropertiesFB)},
{XR_TYPE_FACE_TRACKER_CREATE_INFO_FB, STRUCT_SERIALIZER_PTR(XrFaceTrackerCreateInfoFB)},
{XR_TYPE_FACE_EXPRESSION_WEIGHTS_FB, STRUCT_SERIALIZER_PTR(XrFaceExpressionWeightsFB)},
#endif // XRTRANSPORT_EXT_XR_FB_face_tracking
#ifdef XRTRANSPORT_EXT_XR_FB_eye_tracking_social
{XR_TYPE_EYE_TRACKER_CREATE_INFO_FB, STRUCT_SERIALIZER_PTR(XrEyeTrackerCreateInfoFB)},
{XR_TYPE_EYE_GAZES_INFO_FB, STRUCT_SERIALIZER_PTR(XrEyeGazesInfoFB)},
{XR_TYPE_EYE_GAZES_FB, STRUCT_SERIALIZER_PTR(XrEyeGazesFB)},
{XR_TYPE_SYSTEM_EYE_TRACKING_PROPERTIES_FB, STRUCT_SERIALIZER_PTR(XrSystemEyeTrackingPropertiesFB)},
#endif // XRTRANSPORT_EXT_XR_FB_eye_tracking_social
#ifdef XRTRANSPORT_EXT_XR_FB_passthrough_keyboard_hands
{XR_TYPE_PASSTHROUGH_KEYBOARD_HANDS_INTENSITY_FB, STRUCT_SERIALIZER_PTR(XrPassthroughKeyboardHandsIntensityFB)},
#endif // XRTRANSPORT_EXT_XR_FB_passthrough_keyboard_hands
#ifdef XRTRANSPORT_EXT_XR_FB_composition_layer_settings
{XR_TYPE_COMPOSITION_LAYER_SETTINGS_FB, STRUCT_SERIALIZER_PTR(XrCompositionLayerSettingsFB)},
#endif // XRTRANSPORT_EXT_XR_FB_composition_layer_settings
#ifdef XRTRANSPORT_EXT_XR_FB_haptic_pcm
{XR_TYPE_HAPTIC_PCM_VIBRATION_FB, STRUCT_SERIALIZER_PTR(XrHapticPcmVibrationFB)},
{XR_TYPE_DEVICE_PCM_SAMPLE_RATE_STATE_FB, STRUCT_SERIALIZER_PTR(XrDevicePcmSampleRateStateFB)},
#endif // XRTRANSPORT_EXT_XR_FB_haptic_pcm
#ifdef XRTRANSPORT_EXT_XR_EXT_frame_synthesis
{XR_TYPE_FRAME_SYNTHESIS_INFO_EXT, STRUCT_SERIALIZER_PTR(XrFrameSynthesisInfoEXT)},
{XR_TYPE_FRAME_SYNTHESIS_CONFIG_VIEW_EXT, STRUCT_SERIALIZER_PTR(XrFrameSynthesisConfigViewEXT)},
#endif // XRTRANSPORT_EXT_XR_EXT_frame_synthesis
#ifdef XRTRANSPORT_EXT_XR_FB_composition_layer_depth_test
{XR_TYPE_COMPOSITION_LAYER_DEPTH_TEST_FB, STRUCT_SERIALIZER_PTR(XrCompositionLayerDepthTestFB)},
#endif // XRTRANSPORT_EXT_XR_FB_composition_layer_depth_test
#ifdef XRTRANSPORT_EXT_XR_META_local_dimming
{XR_TYPE_LOCAL_DIMMING_FRAME_END_INFO_META, STRUCT_SERIALIZER_PTR(XrLocalDimmingFrameEndInfoMETA)},
#endif // XRTRANSPORT_EXT_XR_META_local_dimming
#ifdef XRTRANSPORT_EXT_XR_META_passthrough_preferences
{XR_TYPE_PASSTHROUGH_PREFERENCES_META, STRUCT_SERIALIZER_PTR(XrPassthroughPreferencesMETA)},
#endif // XRTRANSPORT_EXT_XR_META_passthrough_preferences
#ifdef XRTRANSPORT_EXT_XR_META_virtual_keyboard
{XR_TYPE_SYSTEM_VIRTUAL_KEYBOARD_PROPERTIES_META, STRUCT_SERIALIZER_PTR(XrSystemVirtualKeyboardPropertiesMETA)},
{XR_TYPE_VIRTUAL_KEYBOARD_CREATE_INFO_META, STRUCT_SERIALIZER_PTR(XrVirtualKeyboardCreateInfoMETA)},
{XR_TYPE_VIRTUAL_KEYBOARD_SPACE_CREATE_INFO_META, STRUCT_SERIALIZER_PTR(XrVirtualKeyboardSpaceCreateInfoMETA)},
{XR_TYPE_VIRTUAL_KEYBOARD_LOCATION_INFO_META, STRUCT_SERIALIZER_PTR(XrVirtualKeyboardLocationInfoMETA)},
{XR_TYPE_VIRTUAL_KEYBOARD_MODEL_VISIBILITY_SET_INFO_META, STRUCT_SERIALIZER_PTR(XrVirtualKeyboardModelVisibilitySetInfoMETA)},
{XR_TYPE_VIRTUAL_KEYBOARD_ANIMATION_STATE_META, STRUCT_SERIALIZER_PTR(XrVirtualKeyboardAnimationStateMETA)},
{XR_TYPE_VIRTUAL_KEYBOARD_MODEL_ANIMATION_STATES_META, STRUCT_SERIALIZER_PTR(XrVirtualKeyboardModelAnimationStatesMETA)},
{XR_TYPE_VIRTUAL_KEYBOARD_TEXTURE_DATA_META, STRUCT_SERIALIZER_PTR(XrVirtualKeyboardTextureDataMETA)},
{XR_TYPE_VIRTUAL_KEYBOARD_INPUT_INFO_META, STRUCT_SERIALIZER_PTR(XrVirtualKeyboardInputInfoMETA)},
{XR_TYPE_VIRTUAL_KEYBOARD_TEXT_CONTEXT_CHANGE_INFO_META, STRUCT_SERIALIZER_PTR(XrVirtualKeyboardTextContextChangeInfoMETA)},
{XR_TYPE_EVENT_DATA_VIRTUAL_KEYBOARD_COMMIT_TEXT_META, STRUCT_SERIALIZER_PTR(XrEventDataVirtualKeyboardCommitTextMETA)},
{XR_TYPE_EVENT_DATA_VIRTUAL_KEYBOARD_BACKSPACE_META, STRUCT_SERIALIZER_PTR(XrEventDataVirtualKeyboardBackspaceMETA)},
{XR_TYPE_EVENT_DATA_VIRTUAL_KEYBOARD_ENTER_META, STRUCT_SERIALIZER_PTR(XrEventDataVirtualKeyboardEnterMETA)},
{XR_TYPE_EVENT_DATA_VIRTUAL_KEYBOARD_SHOWN_META, STRUCT_SERIALIZER_PTR(XrEventDataVirtualKeyboardShownMETA)},
{XR_TYPE_EVENT_DATA_VIRTUAL_KEYBOARD_HIDDEN_META, STRUCT_SERIALIZER_PTR(XrEventDataVirtualKeyboardHiddenMETA)},
#endif // XRTRANSPORT_EXT_XR_META_virtual_keyboard
#ifdef XRTRANSPORT_EXT_XR_OCULUS_external_camera
{XR_TYPE_EXTERNAL_CAMERA_OCULUS, STRUCT_SERIALIZER_PTR(XrExternalCameraOCULUS)},
#endif // XRTRANSPORT_EXT_XR_OCULUS_external_camera
#ifdef XRTRANSPORT_EXT_XR_META_vulkan_swapchain_create_info
{XR_TYPE_VULKAN_SWAPCHAIN_CREATE_INFO_META, STRUCT_SERIALIZER_PTR(XrVulkanSwapchainCreateInfoMETA)},
#endif // XRTRANSPORT_EXT_XR_META_vulkan_swapchain_create_info
#ifdef XRTRANSPORT_EXT_XR_META_performance_metrics
{XR_TYPE_PERFORMANCE_METRICS_STATE_META, STRUCT_SERIALIZER_PTR(XrPerformanceMetricsStateMETA)},
{XR_TYPE_PERFORMANCE_METRICS_COUNTER_META, STRUCT_SERIALIZER_PTR(XrPerformanceMetricsCounterMETA)},
#endif // XRTRANSPORT_EXT_XR_META_performance_metrics
#ifdef XRTRANSPORT_EXT_XR_FB_spatial_entity_storage_batch
{XR_TYPE_SPACE_LIST_SAVE_INFO_FB, STRUCT_SERIALIZER_PTR(XrSpaceListSaveInfoFB)},
{XR_TYPE_EVENT_DATA_SPACE_LIST_SAVE_COMPLETE_FB, STRUCT_SERIALIZER_PTR(XrEventDataSpaceListSaveCompleteFB)},
#endif // XRTRANSPORT_EXT_XR_FB_spatial_entity_storage_batch
#ifdef XRTRANSPORT_EXT_XR_FB_spatial_entity_user
{XR_TYPE_SPACE_USER_CREATE_INFO_FB, STRUCT_SERIALIZER_PTR(XrSpaceUserCreateInfoFB)},
#endif // XRTRANSPORT_EXT_XR_FB_spatial_entity_user
#ifdef XRTRANSPORT_EXT_XR_META_headset_id
{XR_TYPE_SYSTEM_HEADSET_ID_PROPERTIES_META, STRUCT_SERIALIZER_PTR(XrSystemHeadsetIdPropertiesMETA)},
#endif // XRTRANSPORT_EXT_XR_META_headset_id
#ifdef XRTRANSPORT_EXT_XR_META_recommended_layer_resolution
{XR_TYPE_RECOMMENDED_LAYER_RESOLUTION_META, STRUCT_SERIALIZER_PTR(XrRecommendedLayerResolutionMETA)},
{XR_TYPE_RECOMMENDED_LAYER_RESOLUTION_GET_INFO_META, STRUCT_SERIALIZER_PTR(XrRecommendedLayerResolutionGetInfoMETA)},
#endif // XRTRANSPORT_EXT_XR_META_recommended_layer_resolution
#ifdef XRTRANSPORT_EXT_XR_META_passthrough_color_lut
{XR_TYPE_SYSTEM_PASSTHROUGH_COLOR_LUT_PROPERTIES_META, STRUCT_SERIALIZER_PTR(XrSystemPassthroughColorLutPropertiesMETA)},
{XR_TYPE_PASSTHROUGH_COLOR_LUT_CREATE_INFO_META, STRUCT_SERIALIZER_PTR(XrPassthroughColorLutCreateInfoMETA)},
{XR_TYPE_PASSTHROUGH_COLOR_LUT_UPDATE_INFO_META, STRUCT_SERIALIZER_PTR(XrPassthroughColorLutUpdateInfoMETA)},
{XR_TYPE_PASSTHROUGH_COLOR_MAP_LUT_META, STRUCT_SERIALIZER_PTR(XrPassthroughColorMapLutMETA)},
{XR_TYPE_PASSTHROUGH_COLOR_MAP_INTERPOLATED_LUT_META, STRUCT_SERIALIZER_PTR(XrPassthroughColorMapInterpolatedLutMETA)},
#endif // XRTRANSPORT_EXT_XR_META_passthrough_color_lut
#ifdef XRTRANSPORT_EXT_XR_META_spatial_entity_mesh
{XR_TYPE_SPACE_TRIANGLE_MESH_GET_INFO_META, STRUCT_SERIALIZER_PTR(XrSpaceTriangleMeshGetInfoMETA)},
{XR_TYPE_SPACE_TRIANGLE_MESH_META, STRUCT_SERIALIZER_PTR(XrSpaceTriangleMeshMETA)},
#endif // XRTRANSPORT_EXT_XR_META_spatial_entity_mesh
#ifdef XRTRANSPORT_EXT_XR_META_body_tracking_full_body
{XR_TYPE_SYSTEM_PROPERTIES_BODY_TRACKING_FULL_BODY_META, STRUCT_SERIALIZER_PTR(XrSystemPropertiesBodyTrackingFullBodyMETA)},
#endif // XRTRANSPORT_EXT_XR_META_body_tracking_full_body
#ifdef XRTRANSPORT_EXT_XR_META_passthrough_layer_resumed_event
{XR_TYPE_EVENT_DATA_PASSTHROUGH_LAYER_RESUMED_META, STRUCT_SERIALIZER_PTR(XrEventDataPassthroughLayerResumedMETA)},
#endif // XRTRANSPORT_EXT_XR_META_passthrough_layer_resumed_event
#ifdef XRTRANSPORT_EXT_XR_FB_face_tracking2
{XR_TYPE_SYSTEM_FACE_TRACKING_PROPERTIES2_FB, STRUCT_SERIALIZER_PTR(XrSystemFaceTrackingProperties2FB)},
{XR_TYPE_FACE_TRACKER_CREATE_INFO2_FB, STRUCT_SERIALIZER_PTR(XrFaceTrackerCreateInfo2FB)},
{XR_TYPE_FACE_EXPRESSION_INFO2_FB, STRUCT_SERIALIZER_PTR(XrFaceExpressionInfo2FB)},
{XR_TYPE_FACE_EXPRESSION_WEIGHTS2_FB, STRUCT_SERIALIZER_PTR(XrFaceExpressionWeights2FB)},
#endif // XRTRANSPORT_EXT_XR_FB_face_tracking2
#ifdef XRTRANSPORT_EXT_XR_META_spatial_entity_sharing
{XR_TYPE_SYSTEM_SPATIAL_ENTITY_SHARING_PROPERTIES_META, STRUCT_SERIALIZER_PTR(XrSystemSpatialEntitySharingPropertiesMETA)},
{XR_TYPE_SHARE_SPACES_INFO_META, STRUCT_SERIALIZER_PTR(XrShareSpacesInfoMETA)},
{XR_TYPE_EVENT_DATA_SHARE_SPACES_COMPLETE_META, STRUCT_SERIALIZER_PTR(XrEventDataShareSpacesCompleteMETA)},
#endif // XRTRANSPORT_EXT_XR_META_spatial_entity_sharing
#ifdef XRTRANSPORT_EXT_XR_META_environment_depth
{XR_TYPE_ENVIRONMENT_DEPTH_PROVIDER_CREATE_INFO_META, STRUCT_SERIALIZER_PTR(XrEnvironmentDepthProviderCreateInfoMETA)},
{XR_TYPE_ENVIRONMENT_DEPTH_SWAPCHAIN_CREATE_INFO_META, STRUCT_SERIALIZER_PTR(XrEnvironmentDepthSwapchainCreateInfoMETA)},
{XR_TYPE_ENVIRONMENT_DEPTH_SWAPCHAIN_STATE_META, STRUCT_SERIALIZER_PTR(XrEnvironmentDepthSwapchainStateMETA)},
{XR_TYPE_ENVIRONMENT_DEPTH_IMAGE_ACQUIRE_INFO_META, STRUCT_SERIALIZER_PTR(XrEnvironmentDepthImageAcquireInfoMETA)},
{XR_TYPE_ENVIRONMENT_DEPTH_IMAGE_VIEW_META, STRUCT_SERIALIZER_PTR(XrEnvironmentDepthImageViewMETA)},
{XR_TYPE_ENVIRONMENT_DEPTH_IMAGE_META, STRUCT_SERIALIZER_PTR(XrEnvironmentDepthImageMETA)},
{XR_TYPE_ENVIRONMENT_DEPTH_HAND_REMOVAL_SET_INFO_META, STRUCT_SERIALIZER_PTR(XrEnvironmentDepthHandRemovalSetInfoMETA)},
{XR_TYPE_SYSTEM_ENVIRONMENT_DEPTH_PROPERTIES_META, STRUCT_SERIALIZER_PTR(XrSystemEnvironmentDepthPropertiesMETA)},
#endif // XRTRANSPORT_EXT_XR_META_environment_depth
#ifdef XRTRANSPORT_EXT_XR_HTC_passthrough
{XR_TYPE_PASSTHROUGH_CREATE_INFO_HTC, STRUCT_SERIALIZER_PTR(XrPassthroughCreateInfoHTC)},
{XR_TYPE_PASSTHROUGH_COLOR_HTC, STRUCT_SERIALIZER_PTR(XrPassthroughColorHTC)},
{XR_TYPE_PASSTHROUGH_MESH_TRANSFORM_INFO_HTC, STRUCT_SERIALIZER_PTR(XrPassthroughMeshTransformInfoHTC)},
{XR_TYPE_COMPOSITION_LAYER_PASSTHROUGH_HTC, STRUCT_SERIALIZER_PTR(XrCompositionLayerPassthroughHTC)},
#endif // XRTRANSPORT_EXT_XR_HTC_passthrough
#ifdef XRTRANSPORT_EXT_XR_HTC_foveation
{XR_TYPE_FOVEATION_APPLY_INFO_HTC, STRUCT_SERIALIZER_PTR(XrFoveationApplyInfoHTC)},
{XR_TYPE_FOVEATION_DYNAMIC_MODE_INFO_HTC, STRUCT_SERIALIZER_PTR(XrFoveationDynamicModeInfoHTC)},
{XR_TYPE_FOVEATION_CUSTOM_MODE_INFO_HTC, STRUCT_SERIALIZER_PTR(XrFoveationCustomModeInfoHTC)},
#endif // XRTRANSPORT_EXT_XR_HTC_foveation
#ifdef XRTRANSPORT_EXT_XR_HTC_anchor
{XR_TYPE_SYSTEM_ANCHOR_PROPERTIES_HTC, STRUCT_SERIALIZER_PTR(XrSystemAnchorPropertiesHTC)},
{XR_TYPE_SPATIAL_ANCHOR_CREATE_INFO_HTC, STRUCT_SERIALIZER_PTR(XrSpatialAnchorCreateInfoHTC)},
#endif // XRTRANSPORT_EXT_XR_HTC_anchor
#ifdef XRTRANSPORT_EXT_XR_HTC_body_tracking
{XR_TYPE_SYSTEM_BODY_TRACKING_PROPERTIES_HTC, STRUCT_SERIALIZER_PTR(XrSystemBodyTrackingPropertiesHTC)},
{XR_TYPE_BODY_TRACKER_CREATE_INFO_HTC, STRUCT_SERIALIZER_PTR(XrBodyTrackerCreateInfoHTC)},
{XR_TYPE_BODY_JOINTS_LOCATE_INFO_HTC, STRUCT_SERIALIZER_PTR(XrBodyJointsLocateInfoHTC)},
{XR_TYPE_BODY_JOINT_LOCATIONS_HTC, STRUCT_SERIALIZER_PTR(XrBodyJointLocationsHTC)},
{XR_TYPE_BODY_SKELETON_HTC, STRUCT_SERIALIZER_PTR(XrBodySkeletonHTC)},
#endif // XRTRANSPORT_EXT_XR_HTC_body_tracking
#ifdef XRTRANSPORT_EXT_XR_EXT_active_action_set_priority
{XR_TYPE_ACTIVE_ACTION_SET_PRIORITIES_EXT, STRUCT_SERIALIZER_PTR(XrActiveActionSetPrioritiesEXT)},
#endif // XRTRANSPORT_EXT_XR_EXT_active_action_set_priority
#ifdef XRTRANSPORT_EXT_XR_MNDX_force_feedback_curl
{XR_TYPE_SYSTEM_FORCE_FEEDBACK_CURL_PROPERTIES_MNDX, STRUCT_SERIALIZER_PTR(XrSystemForceFeedbackCurlPropertiesMNDX)},
{XR_TYPE_FORCE_FEEDBACK_CURL_APPLY_LOCATIONS_MNDX, STRUCT_SERIALIZER_PTR(XrForceFeedbackCurlApplyLocationsMNDX)},
#endif // XRTRANSPORT_EXT_XR_MNDX_force_feedback_curl
#ifdef XRTRANSPORT_EXT_XR_BD_body_tracking
{XR_TYPE_BODY_TRACKER_CREATE_INFO_BD, STRUCT_SERIALIZER_PTR(XrBodyTrackerCreateInfoBD)},
{XR_TYPE_BODY_JOINTS_LOCATE_INFO_BD, STRUCT_SERIALIZER_PTR(XrBodyJointsLocateInfoBD)},
{XR_TYPE_BODY_JOINT_LOCATIONS_BD, STRUCT_SERIALIZER_PTR(XrBodyJointLocationsBD)},
{XR_TYPE_SYSTEM_BODY_TRACKING_PROPERTIES_BD, STRUCT_SERIALIZER_PTR(XrSystemBodyTrackingPropertiesBD)},
#endif // XRTRANSPORT_EXT_XR_BD_body_tracking
#ifdef XRTRANSPORT_EXT_XR_BD_spatial_sensing
{XR_TYPE_SYSTEM_SPATIAL_SENSING_PROPERTIES_BD, STRUCT_SERIALIZER_PTR(XrSystemSpatialSensingPropertiesBD)},
{XR_TYPE_SPATIAL_ENTITY_COMPONENT_GET_INFO_BD, STRUCT_SERIALIZER_PTR(XrSpatialEntityComponentGetInfoBD)},
{XR_TYPE_SPATIAL_ENTITY_LOCATION_GET_INFO_BD, STRUCT_SERIALIZER_PTR(XrSpatialEntityLocationGetInfoBD)},
{XR_TYPE_SPATIAL_ENTITY_COMPONENT_DATA_LOCATION_BD, STRUCT_SERIALIZER_PTR(XrSpatialEntityComponentDataLocationBD)},
{XR_TYPE_SPATIAL_ENTITY_COMPONENT_DATA_SEMANTIC_BD, STRUCT_SERIALIZER_PTR(XrSpatialEntityComponentDataSemanticBD)},
{XR_TYPE_SPATIAL_ENTITY_COMPONENT_DATA_BOUNDING_BOX_2D_BD, STRUCT_SERIALIZER_PTR(XrSpatialEntityComponentDataBoundingBox2DBD)},
{XR_TYPE_SPATIAL_ENTITY_COMPONENT_DATA_POLYGON_BD, STRUCT_SERIALIZER_PTR(XrSpatialEntityComponentDataPolygonBD)},
{XR_TYPE_SPATIAL_ENTITY_COMPONENT_DATA_BOUNDING_BOX_3D_BD, STRUCT_SERIALIZER_PTR(XrSpatialEntityComponentDataBoundingBox3DBD)},
{XR_TYPE_SPATIAL_ENTITY_COMPONENT_DATA_TRIANGLE_MESH_BD, STRUCT_SERIALIZER_PTR(XrSpatialEntityComponentDataTriangleMeshBD)},
{XR_TYPE_SENSE_DATA_PROVIDER_CREATE_INFO_BD, STRUCT_SERIALIZER_PTR(XrSenseDataProviderCreateInfoBD)},
{XR_TYPE_SENSE_DATA_PROVIDER_START_INFO_BD, STRUCT_SERIALIZER_PTR(XrSenseDataProviderStartInfoBD)},
{XR_TYPE_EVENT_DATA_SENSE_DATA_PROVIDER_STATE_CHANGED_BD, STRUCT_SERIALIZER_PTR(XrEventDataSenseDataProviderStateChangedBD)},
{XR_TYPE_EVENT_DATA_SENSE_DATA_UPDATED_BD, STRUCT_SERIALIZER_PTR(XrEventDataSenseDataUpdatedBD)},
{XR_TYPE_SENSE_DATA_QUERY_INFO_BD, STRUCT_SERIALIZER_PTR(XrSenseDataQueryInfoBD)},
{XR_TYPE_SENSE_DATA_QUERY_COMPLETION_BD, STRUCT_SERIALIZER_PTR(XrSenseDataQueryCompletionBD)},
{XR_TYPE_SENSE_DATA_FILTER_UUID_BD, STRUCT_SERIALIZER_PTR(XrSenseDataFilterUuidBD)},
{XR_TYPE_SENSE_DATA_FILTER_SEMANTIC_BD, STRUCT_SERIALIZER_PTR(XrSenseDataFilterSemanticBD)},
{XR_TYPE_QUERIED_SENSE_DATA_GET_INFO_BD, STRUCT_SERIALIZER_PTR(XrQueriedSenseDataGetInfoBD)},
{XR_TYPE_QUERIED_SENSE_DATA_BD, STRUCT_SERIALIZER_PTR(XrQueriedSenseDataBD)},
{XR_TYPE_SPATIAL_ENTITY_STATE_BD, STRUCT_SERIALIZER_PTR(XrSpatialEntityStateBD)},
{XR_TYPE_SPATIAL_ENTITY_ANCHOR_CREATE_INFO_BD, STRUCT_SERIALIZER_PTR(XrSpatialEntityAnchorCreateInfoBD)},
{XR_TYPE_ANCHOR_SPACE_CREATE_INFO_BD, STRUCT_SERIALIZER_PTR(XrAnchorSpaceCreateInfoBD)},
#endif // XRTRANSPORT_EXT_XR_BD_spatial_sensing
#ifdef XRTRANSPORT_EXT_XR_BD_spatial_anchor
{XR_TYPE_SYSTEM_SPATIAL_ANCHOR_PROPERTIES_BD, STRUCT_SERIALIZER_PTR(XrSystemSpatialAnchorPropertiesBD)},
{XR_TYPE_SPATIAL_ANCHOR_CREATE_INFO_BD, STRUCT_SERIALIZER_PTR(XrSpatialAnchorCreateInfoBD)},
{XR_TYPE_SPATIAL_ANCHOR_CREATE_COMPLETION_BD, STRUCT_SERIALIZER_PTR(XrSpatialAnchorCreateCompletionBD)},
{XR_TYPE_SPATIAL_ANCHOR_PERSIST_INFO_BD, STRUCT_SERIALIZER_PTR(XrSpatialAnchorPersistInfoBD)},
{XR_TYPE_SPATIAL_ANCHOR_UNPERSIST_INFO_BD, STRUCT_SERIALIZER_PTR(XrSpatialAnchorUnpersistInfoBD)},
#endif // XRTRANSPORT_EXT_XR_BD_spatial_anchor
#ifdef XRTRANSPORT_EXT_XR_BD_spatial_anchor_sharing
{XR_TYPE_SYSTEM_SPATIAL_ANCHOR_SHARING_PROPERTIES_BD, STRUCT_SERIALIZER_PTR(XrSystemSpatialAnchorSharingPropertiesBD)},
{XR_TYPE_SPATIAL_ANCHOR_SHARE_INFO_BD, STRUCT_SERIALIZER_PTR(XrSpatialAnchorShareInfoBD)},
{XR_TYPE_SHARED_SPATIAL_ANCHOR_DOWNLOAD_INFO_BD, STRUCT_SERIALIZER_PTR(XrSharedSpatialAnchorDownloadInfoBD)},
#endif // XRTRANSPORT_EXT_XR_BD_spatial_anchor_sharing
#ifdef XRTRANSPORT_EXT_XR_BD_spatial_scene
{XR_TYPE_SYSTEM_SPATIAL_SCENE_PROPERTIES_BD, STRUCT_SERIALIZER_PTR(XrSystemSpatialScenePropertiesBD)},
{XR_TYPE_SCENE_CAPTURE_INFO_BD, STRUCT_SERIALIZER_PTR(XrSceneCaptureInfoBD)},
#endif // XRTRANSPORT_EXT_XR_BD_spatial_scene
#ifdef XRTRANSPORT_EXT_XR_BD_spatial_mesh
{XR_TYPE_SYSTEM_SPATIAL_MESH_PROPERTIES_BD, STRUCT_SERIALIZER_PTR(XrSystemSpatialMeshPropertiesBD)},
{XR_TYPE_SENSE_DATA_PROVIDER_CREATE_INFO_SPATIAL_MESH_BD, STRUCT_SERIALIZER_PTR(XrSenseDataProviderCreateInfoSpatialMeshBD)},
#endif // XRTRANSPORT_EXT_XR_BD_spatial_mesh
#ifdef XRTRANSPORT_EXT_XR_BD_future_progress
{XR_TYPE_FUTURE_POLL_RESULT_PROGRESS_BD, STRUCT_SERIALIZER_PTR(XrFuturePollResultProgressBD)},
#endif // XRTRANSPORT_EXT_XR_BD_future_progress
#ifdef XRTRANSPORT_EXT_XR_EXT_hand_tracking_data_source
{XR_TYPE_HAND_TRACKING_DATA_SOURCE_INFO_EXT, STRUCT_SERIALIZER_PTR(XrHandTrackingDataSourceInfoEXT)},
{XR_TYPE_HAND_TRACKING_DATA_SOURCE_STATE_EXT, STRUCT_SERIALIZER_PTR(XrHandTrackingDataSourceStateEXT)},
#endif // XRTRANSPORT_EXT_XR_EXT_hand_tracking_data_source
#ifdef XRTRANSPORT_EXT_XR_EXT_plane_detection
{XR_TYPE_PLANE_DETECTOR_CREATE_INFO_EXT, STRUCT_SERIALIZER_PTR(XrPlaneDetectorCreateInfoEXT)},
{XR_TYPE_PLANE_DETECTOR_BEGIN_INFO_EXT, STRUCT_SERIALIZER_PTR(XrPlaneDetectorBeginInfoEXT)},
{XR_TYPE_PLANE_DETECTOR_GET_INFO_EXT, STRUCT_SERIALIZER_PTR(XrPlaneDetectorGetInfoEXT)},
{XR_TYPE_PLANE_DETECTOR_LOCATIONS_EXT, STRUCT_SERIALIZER_PTR(XrPlaneDetectorLocationsEXT)},
{XR_TYPE_PLANE_DETECTOR_LOCATION_EXT, STRUCT_SERIALIZER_PTR(XrPlaneDetectorLocationEXT)},
{XR_TYPE_PLANE_DETECTOR_POLYGON_BUFFER_EXT, STRUCT_SERIALIZER_PTR(XrPlaneDetectorPolygonBufferEXT)},
{XR_TYPE_SYSTEM_PLANE_DETECTION_PROPERTIES_EXT, STRUCT_SERIALIZER_PTR(XrSystemPlaneDetectionPropertiesEXT)},
#endif // XRTRANSPORT_EXT_XR_EXT_plane_detection
#ifdef XRTRANSPORT_EXT_XR_EXT_future
{XR_TYPE_FUTURE_CANCEL_INFO_EXT, STRUCT_SERIALIZER_PTR(XrFutureCancelInfoEXT)},
{XR_TYPE_FUTURE_POLL_INFO_EXT, STRUCT_SERIALIZER_PTR(XrFuturePollInfoEXT)},
{XR_TYPE_FUTURE_COMPLETION_EXT, STRUCT_SERIALIZER_PTR(XrFutureCompletionEXT)},
{XR_TYPE_FUTURE_POLL_RESULT_EXT, STRUCT_SERIALIZER_PTR(XrFuturePollResultEXT)},
#endif // XRTRANSPORT_EXT_XR_EXT_future
#ifdef XRTRANSPORT_EXT_XR_EXT_user_presence
{XR_TYPE_EVENT_DATA_USER_PRESENCE_CHANGED_EXT, STRUCT_SERIALIZER_PTR(XrEventDataUserPresenceChangedEXT)},
{XR_TYPE_SYSTEM_USER_PRESENCE_PROPERTIES_EXT, STRUCT_SERIALIZER_PTR(XrSystemUserPresencePropertiesEXT)},
{XR_TYPE_SPACES_LOCATE_INFO, STRUCT_SERIALIZER_PTR(XrSpacesLocateInfo)},
{XR_TYPE_SPACE_LOCATIONS, STRUCT_SERIALIZER_PTR(XrSpaceLocations)},
{XR_TYPE_SPACE_VELOCITIES, STRUCT_SERIALIZER_PTR(XrSpaceVelocities)},
#endif // XRTRANSPORT_EXT_XR_EXT_user_presence
#ifdef XRTRANSPORT_EXT_XR_ML_user_calibration
{XR_TYPE_EVENT_DATA_HEADSET_FIT_CHANGED_ML, STRUCT_SERIALIZER_PTR(XrEventDataHeadsetFitChangedML)},
{XR_TYPE_EVENT_DATA_EYE_CALIBRATION_CHANGED_ML, STRUCT_SERIALIZER_PTR(XrEventDataEyeCalibrationChangedML)},
{XR_TYPE_USER_CALIBRATION_ENABLE_EVENTS_INFO_ML, STRUCT_SERIALIZER_PTR(XrUserCalibrationEnableEventsInfoML)},
#endif // XRTRANSPORT_EXT_XR_ML_user_calibration
#ifdef XRTRANSPORT_EXT_XR_ML_system_notifications
{XR_TYPE_SYSTEM_NOTIFICATIONS_SET_INFO_ML, STRUCT_SERIALIZER_PTR(XrSystemNotificationsSetInfoML)},
#endif // XRTRANSPORT_EXT_XR_ML_system_notifications
#ifdef XRTRANSPORT_EXT_XR_ML_world_mesh_detection
{XR_TYPE_WORLD_MESH_DETECTOR_CREATE_INFO_ML, STRUCT_SERIALIZER_PTR(XrWorldMeshDetectorCreateInfoML)},
{XR_TYPE_WORLD_MESH_STATE_REQUEST_INFO_ML, STRUCT_SERIALIZER_PTR(XrWorldMeshStateRequestInfoML)},
{XR_TYPE_WORLD_MESH_BLOCK_STATE_ML, STRUCT_SERIALIZER_PTR(XrWorldMeshBlockStateML)},
{XR_TYPE_WORLD_MESH_STATE_REQUEST_COMPLETION_ML, STRUCT_SERIALIZER_PTR(XrWorldMeshStateRequestCompletionML)},
{XR_TYPE_WORLD_MESH_BUFFER_RECOMMENDED_SIZE_INFO_ML, STRUCT_SERIALIZER_PTR(XrWorldMeshBufferRecommendedSizeInfoML)},
{XR_TYPE_WORLD_MESH_BUFFER_SIZE_ML, STRUCT_SERIALIZER_PTR(XrWorldMeshBufferSizeML)},
{XR_TYPE_WORLD_MESH_BUFFER_ML, STRUCT_SERIALIZER_PTR(XrWorldMeshBufferML)},
{XR_TYPE_WORLD_MESH_BLOCK_REQUEST_ML, STRUCT_SERIALIZER_PTR(XrWorldMeshBlockRequestML)},
{XR_TYPE_WORLD_MESH_GET_INFO_ML, STRUCT_SERIALIZER_PTR(XrWorldMeshGetInfoML)},
{XR_TYPE_WORLD_MESH_BLOCK_ML, STRUCT_SERIALIZER_PTR(XrWorldMeshBlockML)},
{XR_TYPE_WORLD_MESH_REQUEST_COMPLETION_ML, STRUCT_SERIALIZER_PTR(XrWorldMeshRequestCompletionML)},
{XR_TYPE_WORLD_MESH_REQUEST_COMPLETION_INFO_ML, STRUCT_SERIALIZER_PTR(XrWorldMeshRequestCompletionInfoML)},
#endif // XRTRANSPORT_EXT_XR_ML_world_mesh_detection
#ifdef XRTRANSPORT_EXT_XR_ML_facial_expression
{XR_TYPE_SYSTEM_FACIAL_EXPRESSION_PROPERTIES_ML, STRUCT_SERIALIZER_PTR(XrSystemFacialExpressionPropertiesML)},
{XR_TYPE_FACIAL_EXPRESSION_CLIENT_CREATE_INFO_ML, STRUCT_SERIALIZER_PTR(XrFacialExpressionClientCreateInfoML)},
{XR_TYPE_FACIAL_EXPRESSION_BLEND_SHAPE_GET_INFO_ML, STRUCT_SERIALIZER_PTR(XrFacialExpressionBlendShapeGetInfoML)},
{XR_TYPE_FACIAL_EXPRESSION_BLEND_SHAPE_PROPERTIES_ML, STRUCT_SERIALIZER_PTR(XrFacialExpressionBlendShapePropertiesML)},
#endif // XRTRANSPORT_EXT_XR_ML_facial_expression
#ifdef XRTRANSPORT_EXT_XR_META_simultaneous_hands_and_controllers
{XR_TYPE_SYSTEM_SIMULTANEOUS_HANDS_AND_CONTROLLERS_PROPERTIES_META, STRUCT_SERIALIZER_PTR(XrSystemSimultaneousHandsAndControllersPropertiesMETA)},
{XR_TYPE_SIMULTANEOUS_HANDS_AND_CONTROLLERS_TRACKING_RESUME_INFO_META, STRUCT_SERIALIZER_PTR(XrSimultaneousHandsAndControllersTrackingResumeInfoMETA)},
{XR_TYPE_SIMULTANEOUS_HANDS_AND_CONTROLLERS_TRACKING_PAUSE_INFO_META, STRUCT_SERIALIZER_PTR(XrSimultaneousHandsAndControllersTrackingPauseInfoMETA)},
#endif // XRTRANSPORT_EXT_XR_META_simultaneous_hands_and_controllers
#ifdef XRTRANSPORT_EXT_XR_META_colocation_discovery
{XR_TYPE_COLOCATION_DISCOVERY_START_INFO_META, STRUCT_SERIALIZER_PTR(XrColocationDiscoveryStartInfoMETA)},
{XR_TYPE_COLOCATION_DISCOVERY_STOP_INFO_META, STRUCT_SERIALIZER_PTR(XrColocationDiscoveryStopInfoMETA)},
{XR_TYPE_COLOCATION_ADVERTISEMENT_START_INFO_META, STRUCT_SERIALIZER_PTR(XrColocationAdvertisementStartInfoMETA)},
{XR_TYPE_COLOCATION_ADVERTISEMENT_STOP_INFO_META, STRUCT_SERIALIZER_PTR(XrColocationAdvertisementStopInfoMETA)},
{XR_TYPE_EVENT_DATA_START_COLOCATION_ADVERTISEMENT_COMPLETE_META, STRUCT_SERIALIZER_PTR(XrEventDataStartColocationAdvertisementCompleteMETA)},
{XR_TYPE_EVENT_DATA_STOP_COLOCATION_ADVERTISEMENT_COMPLETE_META, STRUCT_SERIALIZER_PTR(XrEventDataStopColocationAdvertisementCompleteMETA)},
{XR_TYPE_EVENT_DATA_COLOCATION_ADVERTISEMENT_COMPLETE_META, STRUCT_SERIALIZER_PTR(XrEventDataColocationAdvertisementCompleteMETA)},
{XR_TYPE_EVENT_DATA_START_COLOCATION_DISCOVERY_COMPLETE_META, STRUCT_SERIALIZER_PTR(XrEventDataStartColocationDiscoveryCompleteMETA)},
{XR_TYPE_EVENT_DATA_COLOCATION_DISCOVERY_RESULT_META, STRUCT_SERIALIZER_PTR(XrEventDataColocationDiscoveryResultMETA)},
{XR_TYPE_EVENT_DATA_COLOCATION_DISCOVERY_COMPLETE_META, STRUCT_SERIALIZER_PTR(XrEventDataColocationDiscoveryCompleteMETA)},
{XR_TYPE_EVENT_DATA_STOP_COLOCATION_DISCOVERY_COMPLETE_META, STRUCT_SERIALIZER_PTR(XrEventDataStopColocationDiscoveryCompleteMETA)},
{XR_TYPE_SYSTEM_COLOCATION_DISCOVERY_PROPERTIES_META, STRUCT_SERIALIZER_PTR(XrSystemColocationDiscoveryPropertiesMETA)},
#endif // XRTRANSPORT_EXT_XR_META_colocation_discovery
#ifdef XRTRANSPORT_EXT_XR_META_spatial_entity_group_sharing
{XR_TYPE_SHARE_SPACES_RECIPIENT_GROUPS_META, STRUCT_SERIALIZER_PTR(XrShareSpacesRecipientGroupsMETA)},
{XR_TYPE_SPACE_GROUP_UUID_FILTER_INFO_META, STRUCT_SERIALIZER_PTR(XrSpaceGroupUuidFilterInfoMETA)},
{XR_TYPE_SYSTEM_SPATIAL_ENTITY_GROUP_SHARING_PROPERTIES_META, STRUCT_SERIALIZER_PTR(XrSystemSpatialEntityGroupSharingPropertiesMETA)},
#endif // XRTRANSPORT_EXT_XR_META_spatial_entity_group_sharing
};

static StructSerializer serializer_lookup(XrStructureType struct_type) {
    const auto begin = serializer_lookup_table.begin();
    const auto end = serializer_lookup_table.end();

    auto it = std::lower_bound(begin, end, struct_type,
        [](const auto& tuple, XrStructureType value) {
            return std::get<0>(tuple) < value;
        });

    if (it != end && std::get<0>(*it) == struct_type) {
        return std::get<1>(*it);
    }
    
    assert(false && "XrStructureType not found in serializers lookup table");
}
#ifdef XRTRANSPORT_EXT_XR_KHR_binding_modification
#endif // XRTRANSPORT_EXT_XR_KHR_binding_modification
#ifdef XRTRANSPORT_EXT_XR_EXT_hand_tracking
#endif // XRTRANSPORT_EXT_XR_EXT_hand_tracking
#ifdef XRTRANSPORT_EXT_XR_EXT_hand_tracking
#endif // XRTRANSPORT_EXT_XR_EXT_hand_tracking
#ifdef XRTRANSPORT_EXT_XR_FB_face_tracking
#endif // XRTRANSPORT_EXT_XR_FB_face_tracking
#ifdef XRTRANSPORT_EXT_XR_FB_body_tracking
#endif // XRTRANSPORT_EXT_XR_FB_body_tracking
#ifdef XRTRANSPORT_EXT_XR_FB_body_tracking
#endif // XRTRANSPORT_EXT_XR_FB_body_tracking
#ifdef XRTRANSPORT_EXT_XR_FB_eye_tracking_social
#endif // XRTRANSPORT_EXT_XR_FB_eye_tracking_social
#ifdef XRTRANSPORT_EXT_XR_MSFT_hand_tracking_mesh
#endif // XRTRANSPORT_EXT_XR_MSFT_hand_tracking_mesh
#ifdef XRTRANSPORT_EXT_XR_MSFT_hand_tracking_mesh
#endif // XRTRANSPORT_EXT_XR_MSFT_hand_tracking_mesh
#ifdef XRTRANSPORT_EXT_XR_MSFT_hand_tracking_mesh
#endif // XRTRANSPORT_EXT_XR_MSFT_hand_tracking_mesh
#ifdef XRTRANSPORT_EXT_XR_FB_swapchain_update_state
#endif // XRTRANSPORT_EXT_XR_FB_swapchain_update_state
#ifdef XRTRANSPORT_EXT_XR_KHR_loader_init
#endif // XRTRANSPORT_EXT_XR_KHR_loader_init
#ifdef XRTRANSPORT_EXT_XR_MSFT_scene_understanding
#endif // XRTRANSPORT_EXT_XR_MSFT_scene_understanding
#ifdef XRTRANSPORT_EXT_XR_MSFT_scene_understanding
#endif // XRTRANSPORT_EXT_XR_MSFT_scene_understanding
#ifdef XRTRANSPORT_EXT_XR_MSFT_scene_understanding
#endif // XRTRANSPORT_EXT_XR_MSFT_scene_understanding
#ifdef XRTRANSPORT_EXT_XR_MSFT_scene_understanding
#endif // XRTRANSPORT_EXT_XR_MSFT_scene_understanding
#ifdef XRTRANSPORT_EXT_XR_MSFT_scene_understanding
#endif // XRTRANSPORT_EXT_XR_MSFT_scene_understanding
#ifdef XRTRANSPORT_EXT_XR_MSFT_scene_understanding
#endif // XRTRANSPORT_EXT_XR_MSFT_scene_understanding
#ifdef XRTRANSPORT_EXT_XR_MSFT_scene_understanding
#endif // XRTRANSPORT_EXT_XR_MSFT_scene_understanding
#ifdef XRTRANSPORT_EXT_XR_MSFT_scene_understanding
#endif // XRTRANSPORT_EXT_XR_MSFT_scene_understanding
#ifdef XRTRANSPORT_EXT_XR_MSFT_scene_understanding
#endif // XRTRANSPORT_EXT_XR_MSFT_scene_understanding
#ifdef XRTRANSPORT_EXT_XR_MSFT_scene_understanding
#endif // XRTRANSPORT_EXT_XR_MSFT_scene_understanding
#ifdef XRTRANSPORT_EXT_XR_MSFT_scene_understanding_serialization
#endif // XRTRANSPORT_EXT_XR_MSFT_scene_understanding_serialization
#ifdef XRTRANSPORT_EXT_XR_MSFT_scene_marker
#endif // XRTRANSPORT_EXT_XR_MSFT_scene_marker
#ifdef XRTRANSPORT_EXT_XR_MSFT_scene_marker
#endif // XRTRANSPORT_EXT_XR_MSFT_scene_marker
#ifdef XRTRANSPORT_EXT_XR_FB_hand_tracking_mesh
#endif // XRTRANSPORT_EXT_XR_FB_hand_tracking_mesh
#ifdef XRTRANSPORT_EXT_XR_FB_hand_tracking_capsules
#endif // XRTRANSPORT_EXT_XR_FB_hand_tracking_capsules
#ifdef XRTRANSPORT_EXT_XR_FB_spatial_entity_query
#endif // XRTRANSPORT_EXT_XR_FB_spatial_entity_query
#ifdef XRTRANSPORT_EXT_XR_FB_spatial_entity_query
#endif // XRTRANSPORT_EXT_XR_FB_spatial_entity_query
#ifdef XRTRANSPORT_EXT_XR_FB_spatial_entity_query
#endif // XRTRANSPORT_EXT_XR_FB_spatial_entity_query
#ifdef XRTRANSPORT_EXT_XR_FB_scene
#endif // XRTRANSPORT_EXT_XR_FB_scene
#ifdef XRTRANSPORT_EXT_XR_FB_scene
#endif // XRTRANSPORT_EXT_XR_FB_scene
#ifdef XRTRANSPORT_EXT_XR_FB_keyboard_tracking
#endif // XRTRANSPORT_EXT_XR_FB_keyboard_tracking
#ifdef XRTRANSPORT_EXT_XR_META_spatial_entity_sharing
#endif // XRTRANSPORT_EXT_XR_META_spatial_entity_sharing
#ifdef XRTRANSPORT_EXT_XR_MSFT_spatial_anchor_persistence
#endif // XRTRANSPORT_EXT_XR_MSFT_spatial_anchor_persistence
#ifdef XRTRANSPORT_EXT_XR_BD_body_tracking
#endif // XRTRANSPORT_EXT_XR_BD_body_tracking
#ifdef XRTRANSPORT_EXT_XR_HTC_anchor
#endif // XRTRANSPORT_EXT_XR_HTC_anchor
#ifdef XRTRANSPORT_EXT_XR_HTC_body_tracking
#endif // XRTRANSPORT_EXT_XR_HTC_body_tracking
#ifdef XRTRANSPORT_EXT_XR_OCULUS_external_camera
#endif // XRTRANSPORT_EXT_XR_OCULUS_external_camera
#ifdef XRTRANSPORT_EXT_XR_OCULUS_external_camera
#endif // XRTRANSPORT_EXT_XR_OCULUS_external_camera
#ifdef XRTRANSPORT_EXT_XR_META_passthrough_color_lut
#endif // XRTRANSPORT_EXT_XR_META_passthrough_color_lut
#ifdef XRTRANSPORT_EXT_XR_HTC_foveation
#endif // XRTRANSPORT_EXT_XR_HTC_foveation
#ifdef XRTRANSPORT_EXT_XR_EXT_active_action_set_priority
#endif // XRTRANSPORT_EXT_XR_EXT_active_action_set_priority
#ifdef XRTRANSPORT_EXT_XR_MNDX_force_feedback_curl
#endif // XRTRANSPORT_EXT_XR_MNDX_force_feedback_curl
#ifdef XRTRANSPORT_EXT_XR_ML_localization_map
#endif // XRTRANSPORT_EXT_XR_ML_localization_map
#ifdef XRTRANSPORT_EXT_XR_EXT_future
#endif // XRTRANSPORT_EXT_XR_EXT_future
#ifdef XRTRANSPORT_EXT_XR_ML_spatial_anchors
#endif // XRTRANSPORT_EXT_XR_ML_spatial_anchors
#ifdef XRTRANSPORT_EXT_XR_ML_spatial_anchors_storage
#endif // XRTRANSPORT_EXT_XR_ML_spatial_anchors_storage
#ifdef XRTRANSPORT_EXT_XR_ML_spatial_anchors_storage
#endif // XRTRANSPORT_EXT_XR_ML_spatial_anchors_storage
#ifdef XRTRANSPORT_EXT_XR_BD_spatial_sensing
#endif // XRTRANSPORT_EXT_XR_BD_spatial_sensing
static void serialize(const XrApiLayerProperties* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).layerName), sizeof((*s).specVersion)) + sizeof((*s).specVersion), sizeof((*s).layerVersion)) + sizeof((*s).layerVersion), sizeof((*s).description)) + sizeof((*s).description);
}
static void serialize(const XrExtensionProperties* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).extensionName), sizeof((*s).extensionVersion)) + sizeof((*s).extensionVersion);
}
static void serialize(const XrInstanceCreateInfo* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).createFlags), sizeof((*s).applicationInfo)) + sizeof((*s).applicationInfo), sizeof((*s).enabledApiLayerCount)) + sizeof((*s).enabledApiLayerCount), sizeof((*s).enabledApiLayerNames)) + sizeof((*s).enabledApiLayerNames), sizeof((*s).enabledExtensionCount)) + sizeof((*s).enabledExtensionCount), sizeof((*s).enabledExtensionNames)) + sizeof((*s).enabledExtensionNames);
}
static void serialize(const XrSystemGetInfo* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).formFactor);
}
static void serialize(const XrSystemProperties* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).systemId), sizeof((*s).vendorId)) + sizeof((*s).vendorId), sizeof((*s).systemName)) + sizeof((*s).systemName), sizeof((*s).graphicsProperties)) + sizeof((*s).graphicsProperties), sizeof((*s).trackingProperties)) + sizeof((*s).trackingProperties);
}
static void serialize(const XrViewLocateInfo* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).viewConfigurationType), sizeof((*s).displayTime)) + sizeof((*s).displayTime), sizeof((*s).space)) + sizeof((*s).space);
}
static void serialize(const XrView* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).pose), sizeof((*s).fov)) + sizeof((*s).fov);
}
static void serialize(const XrSessionCreateInfo* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).createFlags), sizeof((*s).systemId)) + sizeof((*s).systemId);
}
static void serialize(const XrSwapchainCreateInfo* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(align(align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).createFlags), sizeof((*s).usageFlags)) + sizeof((*s).usageFlags), sizeof((*s).format)) + sizeof((*s).format), sizeof((*s).sampleCount)) + sizeof((*s).sampleCount), sizeof((*s).width)) + sizeof((*s).width), sizeof((*s).height)) + sizeof((*s).height), sizeof((*s).faceCount)) + sizeof((*s).faceCount), sizeof((*s).arraySize)) + sizeof((*s).arraySize), sizeof((*s).mipCount)) + sizeof((*s).mipCount);
}
static void serialize(const XrSessionBeginInfo* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).primaryViewConfigurationType);
}
static void serialize(const XrViewState* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).viewStateFlags);
}
static void serialize(const XrFrameEndInfo* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).displayTime), sizeof((*s).environmentBlendMode)) + sizeof((*s).environmentBlendMode), sizeof((*s).layerCount)) + sizeof((*s).layerCount), sizeof((*s).layers)) + sizeof((*s).layers);
}
static void serialize(const XrHapticVibration* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).duration), sizeof((*s).frequency)) + sizeof((*s).frequency), sizeof((*s).amplitude)) + sizeof((*s).amplitude);
}
static void serialize(const XrEventDataBuffer* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).varying);
}
static void serialize(const XrEventDataInstanceLossPending* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).lossTime);
}
static void serialize(const XrEventDataSessionStateChanged* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).session), sizeof((*s).state)) + sizeof((*s).state), sizeof((*s).time)) + sizeof((*s).time);
}
static void serialize(const XrActionStateBoolean* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).currentState), sizeof((*s).changedSinceLastSync)) + sizeof((*s).changedSinceLastSync), sizeof((*s).lastChangeTime)) + sizeof((*s).lastChangeTime), sizeof((*s).isActive)) + sizeof((*s).isActive);
}
static void serialize(const XrActionStateFloat* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).currentState), sizeof((*s).changedSinceLastSync)) + sizeof((*s).changedSinceLastSync), sizeof((*s).lastChangeTime)) + sizeof((*s).lastChangeTime), sizeof((*s).isActive)) + sizeof((*s).isActive);
}
static void serialize(const XrActionStateVector2f* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).currentState), sizeof((*s).changedSinceLastSync)) + sizeof((*s).changedSinceLastSync), sizeof((*s).lastChangeTime)) + sizeof((*s).lastChangeTime), sizeof((*s).isActive)) + sizeof((*s).isActive);
}
static void serialize(const XrActionStatePose* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).isActive);
}
static void serialize(const XrActionSetCreateInfo* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).actionSetName), sizeof((*s).localizedActionSetName)) + sizeof((*s).localizedActionSetName), sizeof((*s).priority)) + sizeof((*s).priority);
}
static void serialize(const XrActionCreateInfo* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).actionName), sizeof((*s).actionType)) + sizeof((*s).actionType), sizeof((*s).countSubactionPaths)) + sizeof((*s).countSubactionPaths), sizeof((*s).subactionPaths)) + sizeof((*s).subactionPaths), sizeof((*s).localizedActionName)) + sizeof((*s).localizedActionName);
}
static void serialize(const XrInstanceProperties* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).runtimeVersion), sizeof((*s).runtimeName)) + sizeof((*s).runtimeName);
}
static void serialize(const XrFrameWaitInfo* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).next);
}
static void serialize(const XrCompositionLayerProjection* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).layerFlags), sizeof((*s).space)) + sizeof((*s).space), sizeof((*s).viewCount)) + sizeof((*s).viewCount), sizeof((*s).views)) + sizeof((*s).views);
}
static void serialize(const XrCompositionLayerQuad* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).layerFlags), sizeof((*s).space)) + sizeof((*s).space), sizeof((*s).eyeVisibility)) + sizeof((*s).eyeVisibility), sizeof((*s).subImage)) + sizeof((*s).subImage), sizeof((*s).pose)) + sizeof((*s).pose), sizeof((*s).size)) + sizeof((*s).size);
}
static void serialize(const XrReferenceSpaceCreateInfo* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).referenceSpaceType), sizeof((*s).poseInReferenceSpace)) + sizeof((*s).poseInReferenceSpace);
}
static void serialize(const XrActionSpaceCreateInfo* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).action), sizeof((*s).subactionPath)) + sizeof((*s).subactionPath), sizeof((*s).poseInActionSpace)) + sizeof((*s).poseInActionSpace);
}
static void serialize(const XrEventDataReferenceSpaceChangePending* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).session), sizeof((*s).referenceSpaceType)) + sizeof((*s).referenceSpaceType), sizeof((*s).changeTime)) + sizeof((*s).changeTime), sizeof((*s).poseValid)) + sizeof((*s).poseValid), sizeof((*s).poseInPreviousSpace)) + sizeof((*s).poseInPreviousSpace);
}
static void serialize(const XrViewConfigurationView* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).recommendedImageRectWidth), sizeof((*s).maxImageRectWidth)) + sizeof((*s).maxImageRectWidth), sizeof((*s).recommendedImageRectHeight)) + sizeof((*s).recommendedImageRectHeight), sizeof((*s).maxImageRectHeight)) + sizeof((*s).maxImageRectHeight), sizeof((*s).recommendedSwapchainSampleCount)) + sizeof((*s).recommendedSwapchainSampleCount), sizeof((*s).maxSwapchainSampleCount)) + sizeof((*s).maxSwapchainSampleCount);
}
static void serialize(const XrSpaceLocation* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).locationFlags), sizeof((*s).pose)) + sizeof((*s).pose);
}
static void serialize(const XrSpaceVelocity* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).velocityFlags), sizeof((*s).linearVelocity)) + sizeof((*s).linearVelocity), sizeof((*s).angularVelocity)) + sizeof((*s).angularVelocity);
}
static void serialize(const XrFrameState* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).predictedDisplayTime), sizeof((*s).predictedDisplayPeriod)) + sizeof((*s).predictedDisplayPeriod), sizeof((*s).shouldRender)) + sizeof((*s).shouldRender);
}
static void serialize(const XrViewConfigurationProperties* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).viewConfigurationType), sizeof((*s).fovMutable)) + sizeof((*s).fovMutable);
}
static void serialize(const XrFrameBeginInfo* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).next);
}
static void serialize(const XrCompositionLayerProjectionView* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).pose), sizeof((*s).fov)) + sizeof((*s).fov), sizeof((*s).subImage)) + sizeof((*s).subImage);
}
static void serialize(const XrEventDataEventsLost* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).lostEventCount);
}
static void serialize(const XrInteractionProfileSuggestedBinding* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).interactionProfile), sizeof((*s).countSuggestedBindings)) + sizeof((*s).countSuggestedBindings), sizeof((*s).suggestedBindings)) + sizeof((*s).suggestedBindings);
}
static void serialize(const XrEventDataInteractionProfileChanged* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).session);
}
static void serialize(const XrInteractionProfileState* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).interactionProfile);
}
static void serialize(const XrSwapchainImageAcquireInfo* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).next);
}
static void serialize(const XrSwapchainImageWaitInfo* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).timeout);
}
static void serialize(const XrSwapchainImageReleaseInfo* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).next);
}
static void serialize(const XrActionStateGetInfo* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).action), sizeof((*s).subactionPath)) + sizeof((*s).subactionPath);
}
static void serialize(const XrHapticActionInfo* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).action), sizeof((*s).subactionPath)) + sizeof((*s).subactionPath);
}
static void serialize(const XrSessionActionSetsAttachInfo* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).countActionSets), sizeof((*s).actionSets)) + sizeof((*s).actionSets);
}
static void serialize(const XrActionsSyncInfo* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).countActiveActionSets), sizeof((*s).activeActionSets)) + sizeof((*s).activeActionSets);
}
static void serialize(const XrBoundSourcesForActionEnumerateInfo* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).action);
}
static void serialize(const XrInputSourceLocalizedNameGetInfo* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).sourcePath), sizeof((*s).whichComponents)) + sizeof((*s).whichComponents);
}
#ifdef XRTRANSPORT_EXT_XR_KHR_composition_layer_cube
static void serialize(const XrCompositionLayerCubeKHR* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).layerFlags), sizeof((*s).space)) + sizeof((*s).space), sizeof((*s).eyeVisibility)) + sizeof((*s).eyeVisibility), sizeof((*s).swapchain)) + sizeof((*s).swapchain), sizeof((*s).imageArrayIndex)) + sizeof((*s).imageArrayIndex), sizeof((*s).orientation)) + sizeof((*s).orientation);
}
#endif // XRTRANSPORT_EXT_XR_KHR_composition_layer_cube
#ifdef XRTRANSPORT_EXT_XR_KHR_android_create_instance
static void serialize(const XrInstanceCreateInfoAndroidKHR* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).applicationVM), sizeof((*s).applicationActivity)) + sizeof((*s).applicationActivity);
}
#endif // XRTRANSPORT_EXT_XR_KHR_android_create_instance
#ifdef XRTRANSPORT_EXT_XR_KHR_composition_layer_depth
static void serialize(const XrCompositionLayerDepthInfoKHR* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).subImage), sizeof((*s).minDepth)) + sizeof((*s).minDepth), sizeof((*s).maxDepth)) + sizeof((*s).maxDepth), sizeof((*s).nearZ)) + sizeof((*s).nearZ), sizeof((*s).farZ)) + sizeof((*s).farZ);
}
#endif // XRTRANSPORT_EXT_XR_KHR_composition_layer_depth
#ifdef XRTRANSPORT_EXT_XR_KHR_vulkan_swapchain_format_list
static void serialize(const XrVulkanSwapchainFormatListCreateInfoKHR* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).viewFormatCount), sizeof((*s).viewFormats)) + sizeof((*s).viewFormats);
}
#endif // XRTRANSPORT_EXT_XR_KHR_vulkan_swapchain_format_list
#ifdef XRTRANSPORT_EXT_XR_EXT_performance_settings
static void serialize(const XrEventDataPerfSettingsEXT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).domain), sizeof((*s).subDomain)) + sizeof((*s).subDomain), sizeof((*s).fromLevel)) + sizeof((*s).fromLevel), sizeof((*s).toLevel)) + sizeof((*s).toLevel);
}
#endif // XRTRANSPORT_EXT_XR_EXT_performance_settings
#ifdef XRTRANSPORT_EXT_XR_KHR_composition_layer_cylinder
static void serialize(const XrCompositionLayerCylinderKHR* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).layerFlags), sizeof((*s).space)) + sizeof((*s).space), sizeof((*s).eyeVisibility)) + sizeof((*s).eyeVisibility), sizeof((*s).subImage)) + sizeof((*s).subImage), sizeof((*s).pose)) + sizeof((*s).pose), sizeof((*s).radius)) + sizeof((*s).radius), sizeof((*s).centralAngle)) + sizeof((*s).centralAngle), sizeof((*s).aspectRatio)) + sizeof((*s).aspectRatio);
}
#endif // XRTRANSPORT_EXT_XR_KHR_composition_layer_cylinder
#ifdef XRTRANSPORT_EXT_XR_KHR_composition_layer_equirect
static void serialize(const XrCompositionLayerEquirectKHR* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).layerFlags), sizeof((*s).space)) + sizeof((*s).space), sizeof((*s).eyeVisibility)) + sizeof((*s).eyeVisibility), sizeof((*s).subImage)) + sizeof((*s).subImage), sizeof((*s).pose)) + sizeof((*s).pose), sizeof((*s).radius)) + sizeof((*s).radius), sizeof((*s).scale)) + sizeof((*s).scale), sizeof((*s).bias)) + sizeof((*s).bias);
}
#endif // XRTRANSPORT_EXT_XR_KHR_composition_layer_equirect
#ifdef XRTRANSPORT_EXT_XR_EXT_debug_utils
static void serialize(const XrDebugUtilsObjectNameInfoEXT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).objectType), sizeof((*s).objectHandle)) + sizeof((*s).objectHandle), sizeof((*s).objectName)) + sizeof((*s).objectName);
}
#endif // XRTRANSPORT_EXT_XR_EXT_debug_utils
#ifdef XRTRANSPORT_EXT_XR_EXT_debug_utils
static void serialize(const XrDebugUtilsMessengerCallbackDataEXT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).messageId), sizeof((*s).functionName)) + sizeof((*s).functionName), sizeof((*s).message)) + sizeof((*s).message), sizeof((*s).objectCount)) + sizeof((*s).objectCount), sizeof((*s).objects)) + sizeof((*s).objects), sizeof((*s).sessionLabelCount)) + sizeof((*s).sessionLabelCount), sizeof((*s).sessionLabels)) + sizeof((*s).sessionLabels);
}
#endif // XRTRANSPORT_EXT_XR_EXT_debug_utils
#ifdef XRTRANSPORT_EXT_XR_EXT_debug_utils
static void serialize(const XrDebugUtilsMessengerCreateInfoEXT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).messageSeverities), sizeof((*s).messageTypes)) + sizeof((*s).messageTypes), sizeof((*s).userCallback)) + sizeof((*s).userCallback), sizeof((*s).userData)) + sizeof((*s).userData);
}
#endif // XRTRANSPORT_EXT_XR_EXT_debug_utils
#ifdef XRTRANSPORT_EXT_XR_EXT_debug_utils
static void serialize(const XrDebugUtilsLabelEXT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).labelName);
}
#endif // XRTRANSPORT_EXT_XR_EXT_debug_utils
#ifdef XRTRANSPORT_EXT_XR_KHR_opengl_enable
static void serialize(const XrGraphicsBindingOpenGLWin32KHR* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).hDC), sizeof((*s).hGLRC)) + sizeof((*s).hGLRC);
}
#endif // XRTRANSPORT_EXT_XR_KHR_opengl_enable
#ifdef XRTRANSPORT_EXT_XR_KHR_opengl_enable
static void serialize(const XrGraphicsBindingOpenGLXlibKHR* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).xDisplay), sizeof((*s).visualid)) + sizeof((*s).visualid), sizeof((*s).glxFBConfig)) + sizeof((*s).glxFBConfig), sizeof((*s).glxDrawable)) + sizeof((*s).glxDrawable), sizeof((*s).glxContext)) + sizeof((*s).glxContext);
}
#endif // XRTRANSPORT_EXT_XR_KHR_opengl_enable
#ifdef XRTRANSPORT_EXT_XR_KHR_opengl_enable
static void serialize(const XrGraphicsBindingOpenGLXcbKHR* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).connection), sizeof((*s).screenNumber)) + sizeof((*s).screenNumber), sizeof((*s).fbconfigid)) + sizeof((*s).fbconfigid), sizeof((*s).visualid)) + sizeof((*s).visualid), sizeof((*s).glxDrawable)) + sizeof((*s).glxDrawable), sizeof((*s).glxContext)) + sizeof((*s).glxContext);
}
#endif // XRTRANSPORT_EXT_XR_KHR_opengl_enable
#ifdef XRTRANSPORT_EXT_XR_KHR_opengl_enable
static void serialize(const XrGraphicsBindingOpenGLWaylandKHR* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).display);
}
#endif // XRTRANSPORT_EXT_XR_KHR_opengl_enable
#ifdef XRTRANSPORT_EXT_XR_KHR_opengl_enable
static void serialize(const XrSwapchainImageOpenGLKHR* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).image);
}
#endif // XRTRANSPORT_EXT_XR_KHR_opengl_enable
#ifdef XRTRANSPORT_EXT_XR_KHR_opengl_enable
static void serialize(const XrGraphicsRequirementsOpenGLKHR* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).minApiVersionSupported), sizeof((*s).maxApiVersionSupported)) + sizeof((*s).maxApiVersionSupported);
}
#endif // XRTRANSPORT_EXT_XR_KHR_opengl_enable
#ifdef XRTRANSPORT_EXT_XR_KHR_opengl_es_enable
static void serialize(const XrGraphicsBindingOpenGLESAndroidKHR* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).display), sizeof((*s).config)) + sizeof((*s).config), sizeof((*s).context)) + sizeof((*s).context);
}
#endif // XRTRANSPORT_EXT_XR_KHR_opengl_es_enable
#ifdef XRTRANSPORT_EXT_XR_KHR_opengl_es_enable
static void serialize(const XrSwapchainImageOpenGLESKHR* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).image);
}
#endif // XRTRANSPORT_EXT_XR_KHR_opengl_es_enable
#ifdef XRTRANSPORT_EXT_XR_KHR_opengl_es_enable
static void serialize(const XrGraphicsRequirementsOpenGLESKHR* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).minApiVersionSupported), sizeof((*s).maxApiVersionSupported)) + sizeof((*s).maxApiVersionSupported);
}
#endif // XRTRANSPORT_EXT_XR_KHR_opengl_es_enable
#ifdef XRTRANSPORT_EXT_XR_KHR_vulkan_enable
static void serialize(const XrGraphicsBindingVulkanKHR* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).instance), sizeof((*s).physicalDevice)) + sizeof((*s).physicalDevice), sizeof((*s).device)) + sizeof((*s).device), sizeof((*s).queueFamilyIndex)) + sizeof((*s).queueFamilyIndex), sizeof((*s).queueIndex)) + sizeof((*s).queueIndex);
}
#endif // XRTRANSPORT_EXT_XR_KHR_vulkan_enable
#ifdef XRTRANSPORT_EXT_XR_KHR_vulkan_enable
static void serialize(const XrSwapchainImageVulkanKHR* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).image);
}
#endif // XRTRANSPORT_EXT_XR_KHR_vulkan_enable
#ifdef XRTRANSPORT_EXT_XR_KHR_vulkan_enable
static void serialize(const XrGraphicsRequirementsVulkanKHR* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).minApiVersionSupported), sizeof((*s).maxApiVersionSupported)) + sizeof((*s).maxApiVersionSupported);
}
#endif // XRTRANSPORT_EXT_XR_KHR_vulkan_enable
#ifdef XRTRANSPORT_EXT_XR_KHR_D3D11_enable
static void serialize(const XrGraphicsBindingD3D11KHR* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).device);
}
#endif // XRTRANSPORT_EXT_XR_KHR_D3D11_enable
#ifdef XRTRANSPORT_EXT_XR_KHR_D3D11_enable
static void serialize(const XrSwapchainImageD3D11KHR* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).texture);
}
#endif // XRTRANSPORT_EXT_XR_KHR_D3D11_enable
#ifdef XRTRANSPORT_EXT_XR_KHR_D3D11_enable
static void serialize(const XrGraphicsRequirementsD3D11KHR* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).adapterLuid), sizeof((*s).minFeatureLevel)) + sizeof((*s).minFeatureLevel);
}
#endif // XRTRANSPORT_EXT_XR_KHR_D3D11_enable
#ifdef XRTRANSPORT_EXT_XR_KHR_D3D12_enable
static void serialize(const XrGraphicsBindingD3D12KHR* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).device), sizeof((*s).queue)) + sizeof((*s).queue);
}
#endif // XRTRANSPORT_EXT_XR_KHR_D3D12_enable
#ifdef XRTRANSPORT_EXT_XR_KHR_D3D12_enable
static void serialize(const XrSwapchainImageD3D12KHR* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).texture);
}
#endif // XRTRANSPORT_EXT_XR_KHR_D3D12_enable
#ifdef XRTRANSPORT_EXT_XR_KHR_D3D12_enable
static void serialize(const XrGraphicsRequirementsD3D12KHR* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).adapterLuid), sizeof((*s).minFeatureLevel)) + sizeof((*s).minFeatureLevel);
}
#endif // XRTRANSPORT_EXT_XR_KHR_D3D12_enable
#ifdef XRTRANSPORT_EXT_XR_KHR_metal_enable
static void serialize(const XrGraphicsBindingMetalKHR* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).commandQueue);
}
#endif // XRTRANSPORT_EXT_XR_KHR_metal_enable
#ifdef XRTRANSPORT_EXT_XR_KHR_metal_enable
static void serialize(const XrSwapchainImageMetalKHR* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).texture);
}
#endif // XRTRANSPORT_EXT_XR_KHR_metal_enable
#ifdef XRTRANSPORT_EXT_XR_KHR_metal_enable
static void serialize(const XrGraphicsRequirementsMetalKHR* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).metalDevice);
}
#endif // XRTRANSPORT_EXT_XR_KHR_metal_enable
#ifdef XRTRANSPORT_EXT_XR_EXT_eye_gaze_interaction
static void serialize(const XrSystemEyeGazeInteractionPropertiesEXT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).supportsEyeGazeInteraction);
}
#endif // XRTRANSPORT_EXT_XR_EXT_eye_gaze_interaction
#ifdef XRTRANSPORT_EXT_XR_EXT_eye_gaze_interaction
static void serialize(const XrEyeGazeSampleTimeEXT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).time);
}
#endif // XRTRANSPORT_EXT_XR_EXT_eye_gaze_interaction
#ifdef XRTRANSPORT_EXT_XR_KHR_visibility_mask
static void serialize(const XrVisibilityMaskKHR* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).vertexCapacityInput), sizeof((*s).vertexCountOutput)) + sizeof((*s).vertexCountOutput), sizeof((*s).vertices)) + sizeof((*s).vertices), sizeof((*s).indexCapacityInput)) + sizeof((*s).indexCapacityInput), sizeof((*s).indexCountOutput)) + sizeof((*s).indexCountOutput), sizeof((*s).indices)) + sizeof((*s).indices);
}
#endif // XRTRANSPORT_EXT_XR_KHR_visibility_mask
#ifdef XRTRANSPORT_EXT_XR_KHR_visibility_mask
static void serialize(const XrEventDataVisibilityMaskChangedKHR* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).session), sizeof((*s).viewConfigurationType)) + sizeof((*s).viewConfigurationType), sizeof((*s).viewIndex)) + sizeof((*s).viewIndex);
}
#endif // XRTRANSPORT_EXT_XR_KHR_visibility_mask
#ifdef XRTRANSPORT_EXT_XR_EXTX_overlay
static void serialize(const XrSessionCreateInfoOverlayEXTX* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).createFlags), sizeof((*s).sessionLayersPlacement)) + sizeof((*s).sessionLayersPlacement);
}
#endif // XRTRANSPORT_EXT_XR_EXTX_overlay
#ifdef XRTRANSPORT_EXT_XR_EXTX_overlay
static void serialize(const XrEventDataMainSessionVisibilityChangedEXTX* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).visible), sizeof((*s).flags)) + sizeof((*s).flags);
}
#endif // XRTRANSPORT_EXT_XR_EXTX_overlay
#ifdef XRTRANSPORT_EXT_XR_KHR_composition_layer_color_scale_bias
static void serialize(const XrCompositionLayerColorScaleBiasKHR* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).colorScale), sizeof((*s).colorBias)) + sizeof((*s).colorBias);
}
#endif // XRTRANSPORT_EXT_XR_KHR_composition_layer_color_scale_bias
static void serialize(const XrSpatialAnchorCreateInfoMSFT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).space), sizeof((*s).pose)) + sizeof((*s).pose), sizeof((*s).time)) + sizeof((*s).time);
}
static void serialize(const XrSpatialAnchorSpaceCreateInfoMSFT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).anchor), sizeof((*s).poseInAnchorSpace)) + sizeof((*s).poseInAnchorSpace);
}
#ifdef XRTRANSPORT_EXT_XR_FB_composition_layer_image_layout
static void serialize(const XrCompositionLayerImageLayoutFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).flags);
}
#endif // XRTRANSPORT_EXT_XR_FB_composition_layer_image_layout
#ifdef XRTRANSPORT_EXT_XR_FB_composition_layer_alpha_blend
static void serialize(const XrCompositionLayerAlphaBlendFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).srcFactorColor), sizeof((*s).dstFactorColor)) + sizeof((*s).dstFactorColor), sizeof((*s).srcFactorAlpha)) + sizeof((*s).srcFactorAlpha), sizeof((*s).dstFactorAlpha)) + sizeof((*s).dstFactorAlpha);
}
#endif // XRTRANSPORT_EXT_XR_FB_composition_layer_alpha_blend
#ifdef XRTRANSPORT_EXT_XR_EXT_view_configuration_depth_range
static void serialize(const XrViewConfigurationDepthRangeEXT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).recommendedNearZ), sizeof((*s).minNearZ)) + sizeof((*s).minNearZ), sizeof((*s).recommendedFarZ)) + sizeof((*s).recommendedFarZ), sizeof((*s).maxFarZ)) + sizeof((*s).maxFarZ);
}
#endif // XRTRANSPORT_EXT_XR_EXT_view_configuration_depth_range
#ifdef XRTRANSPORT_EXT_XR_MNDX_egl_enable
static void serialize(const XrGraphicsBindingEGLMNDX* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).getProcAddress), sizeof((*s).display)) + sizeof((*s).display), sizeof((*s).config)) + sizeof((*s).config), sizeof((*s).context)) + sizeof((*s).context);
}
#endif // XRTRANSPORT_EXT_XR_MNDX_egl_enable
#ifdef XRTRANSPORT_EXT_XR_MSFT_spatial_graph_bridge
static void serialize(const XrSpatialGraphNodeSpaceCreateInfoMSFT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).nodeType), sizeof((*s).nodeId)) + sizeof((*s).nodeId), sizeof((*s).pose)) + sizeof((*s).pose);
}
#endif // XRTRANSPORT_EXT_XR_MSFT_spatial_graph_bridge
#ifdef XRTRANSPORT_EXT_XR_MSFT_spatial_graph_bridge
static void serialize(const XrSpatialGraphStaticNodeBindingCreateInfoMSFT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).space), sizeof((*s).poseInSpace)) + sizeof((*s).poseInSpace), sizeof((*s).time)) + sizeof((*s).time);
}
#endif // XRTRANSPORT_EXT_XR_MSFT_spatial_graph_bridge
#ifdef XRTRANSPORT_EXT_XR_MSFT_spatial_graph_bridge
static void serialize(const XrSpatialGraphNodeBindingPropertiesGetInfoMSFT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).next);
}
#endif // XRTRANSPORT_EXT_XR_MSFT_spatial_graph_bridge
#ifdef XRTRANSPORT_EXT_XR_MSFT_spatial_graph_bridge
static void serialize(const XrSpatialGraphNodeBindingPropertiesMSFT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).nodeId), sizeof((*s).poseInNodeSpace)) + sizeof((*s).poseInNodeSpace);
}
#endif // XRTRANSPORT_EXT_XR_MSFT_spatial_graph_bridge
#ifdef XRTRANSPORT_EXT_XR_EXT_hand_tracking
static void serialize(const XrSystemHandTrackingPropertiesEXT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).supportsHandTracking);
}
#endif // XRTRANSPORT_EXT_XR_EXT_hand_tracking
#ifdef XRTRANSPORT_EXT_XR_EXT_hand_tracking
static void serialize(const XrHandTrackerCreateInfoEXT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).hand), sizeof((*s).handJointSet)) + sizeof((*s).handJointSet);
}
#endif // XRTRANSPORT_EXT_XR_EXT_hand_tracking
#ifdef XRTRANSPORT_EXT_XR_EXT_hand_tracking
static void serialize(const XrHandJointsLocateInfoEXT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).baseSpace), sizeof((*s).time)) + sizeof((*s).time);
}
#endif // XRTRANSPORT_EXT_XR_EXT_hand_tracking
#ifdef XRTRANSPORT_EXT_XR_EXT_hand_tracking
static void serialize(const XrHandJointLocationsEXT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).isActive), sizeof((*s).jointCount)) + sizeof((*s).jointCount), sizeof((*s).jointLocations)) + sizeof((*s).jointLocations);
}
#endif // XRTRANSPORT_EXT_XR_EXT_hand_tracking
#ifdef XRTRANSPORT_EXT_XR_EXT_hand_tracking
static void serialize(const XrHandJointVelocitiesEXT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).jointCount), sizeof((*s).jointVelocities)) + sizeof((*s).jointVelocities);
}
#endif // XRTRANSPORT_EXT_XR_EXT_hand_tracking
#ifdef XRTRANSPORT_EXT_XR_MSFT_hand_tracking_mesh
static void serialize(const XrSystemHandTrackingMeshPropertiesMSFT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).supportsHandTrackingMesh), sizeof((*s).maxHandMeshIndexCount)) + sizeof((*s).maxHandMeshIndexCount), sizeof((*s).maxHandMeshVertexCount)) + sizeof((*s).maxHandMeshVertexCount);
}
#endif // XRTRANSPORT_EXT_XR_MSFT_hand_tracking_mesh
#ifdef XRTRANSPORT_EXT_XR_MSFT_hand_tracking_mesh
static void serialize(const XrHandMeshSpaceCreateInfoMSFT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).handPoseType), sizeof((*s).poseInHandMeshSpace)) + sizeof((*s).poseInHandMeshSpace);
}
#endif // XRTRANSPORT_EXT_XR_MSFT_hand_tracking_mesh
#ifdef XRTRANSPORT_EXT_XR_MSFT_hand_tracking_mesh
static void serialize(const XrHandMeshUpdateInfoMSFT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).time), sizeof((*s).handPoseType)) + sizeof((*s).handPoseType);
}
#endif // XRTRANSPORT_EXT_XR_MSFT_hand_tracking_mesh
#ifdef XRTRANSPORT_EXT_XR_MSFT_hand_tracking_mesh
static void serialize(const XrHandMeshMSFT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).isActive), sizeof((*s).indexBufferChanged)) + sizeof((*s).indexBufferChanged), sizeof((*s).vertexBufferChanged)) + sizeof((*s).vertexBufferChanged), sizeof((*s).indexBuffer)) + sizeof((*s).indexBuffer), sizeof((*s).vertexBuffer)) + sizeof((*s).vertexBuffer);
}
#endif // XRTRANSPORT_EXT_XR_MSFT_hand_tracking_mesh
#ifdef XRTRANSPORT_EXT_XR_MSFT_hand_tracking_mesh
static void serialize(const XrHandPoseTypeInfoMSFT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).handPoseType);
}
#endif // XRTRANSPORT_EXT_XR_MSFT_hand_tracking_mesh
#ifdef XRTRANSPORT_EXT_XR_MSFT_secondary_view_configuration
static void serialize(const XrSecondaryViewConfigurationSessionBeginInfoMSFT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).viewConfigurationCount), sizeof((*s).enabledViewConfigurationTypes)) + sizeof((*s).enabledViewConfigurationTypes);
}
#endif // XRTRANSPORT_EXT_XR_MSFT_secondary_view_configuration
#ifdef XRTRANSPORT_EXT_XR_MSFT_secondary_view_configuration
static void serialize(const XrSecondaryViewConfigurationStateMSFT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).viewConfigurationType), sizeof((*s).active)) + sizeof((*s).active);
}
#endif // XRTRANSPORT_EXT_XR_MSFT_secondary_view_configuration
#ifdef XRTRANSPORT_EXT_XR_MSFT_secondary_view_configuration
static void serialize(const XrSecondaryViewConfigurationFrameStateMSFT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).viewConfigurationCount), sizeof((*s).viewConfigurationStates)) + sizeof((*s).viewConfigurationStates);
}
#endif // XRTRANSPORT_EXT_XR_MSFT_secondary_view_configuration
#ifdef XRTRANSPORT_EXT_XR_MSFT_secondary_view_configuration
static void serialize(const XrSecondaryViewConfigurationFrameEndInfoMSFT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).viewConfigurationCount), sizeof((*s).viewConfigurationLayersInfo)) + sizeof((*s).viewConfigurationLayersInfo);
}
#endif // XRTRANSPORT_EXT_XR_MSFT_secondary_view_configuration
#ifdef XRTRANSPORT_EXT_XR_MSFT_secondary_view_configuration
static void serialize(const XrSecondaryViewConfigurationLayerInfoMSFT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).viewConfigurationType), sizeof((*s).environmentBlendMode)) + sizeof((*s).environmentBlendMode), sizeof((*s).layerCount)) + sizeof((*s).layerCount), sizeof((*s).layers)) + sizeof((*s).layers);
}
#endif // XRTRANSPORT_EXT_XR_MSFT_secondary_view_configuration
#ifdef XRTRANSPORT_EXT_XR_MSFT_secondary_view_configuration
static void serialize(const XrSecondaryViewConfigurationSwapchainCreateInfoMSFT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).viewConfigurationType);
}
#endif // XRTRANSPORT_EXT_XR_MSFT_secondary_view_configuration
#ifdef XRTRANSPORT_EXT_XR_MSFT_controller_model
static void serialize(const XrControllerModelKeyStateMSFT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).modelKey);
}
#endif // XRTRANSPORT_EXT_XR_MSFT_controller_model
#ifdef XRTRANSPORT_EXT_XR_MSFT_controller_model
static void serialize(const XrControllerModelNodePropertiesMSFT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).parentNodeName), sizeof((*s).nodeName)) + sizeof((*s).nodeName);
}
#endif // XRTRANSPORT_EXT_XR_MSFT_controller_model
#ifdef XRTRANSPORT_EXT_XR_MSFT_controller_model
static void serialize(const XrControllerModelPropertiesMSFT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).nodeCapacityInput), sizeof((*s).nodeCountOutput)) + sizeof((*s).nodeCountOutput), sizeof((*s).nodeProperties)) + sizeof((*s).nodeProperties);
}
#endif // XRTRANSPORT_EXT_XR_MSFT_controller_model
#ifdef XRTRANSPORT_EXT_XR_MSFT_controller_model
static void serialize(const XrControllerModelNodeStateMSFT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).nodePose);
}
#endif // XRTRANSPORT_EXT_XR_MSFT_controller_model
#ifdef XRTRANSPORT_EXT_XR_MSFT_controller_model
static void serialize(const XrControllerModelStateMSFT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).nodeCapacityInput), sizeof((*s).nodeCountOutput)) + sizeof((*s).nodeCountOutput), sizeof((*s).nodeStates)) + sizeof((*s).nodeStates);
}
#endif // XRTRANSPORT_EXT_XR_MSFT_controller_model
#ifdef XRTRANSPORT_EXT_XR_EPIC_view_configuration_fov
static void serialize(const XrViewConfigurationViewFovEPIC* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).recommendedFov), sizeof((*s).maxMutableFov)) + sizeof((*s).maxMutableFov);
}
#endif // XRTRANSPORT_EXT_XR_EPIC_view_configuration_fov
#ifdef XRTRANSPORT_EXT_XR_MSFT_holographic_window_attachment
static void serialize(const XrHolographicWindowAttachmentMSFT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).holographicSpace), sizeof((*s).coreWindow)) + sizeof((*s).coreWindow);
}
#endif // XRTRANSPORT_EXT_XR_MSFT_holographic_window_attachment
#ifdef XRTRANSPORT_EXT_XR_MSFT_composition_layer_reprojection
static void serialize(const XrCompositionLayerReprojectionInfoMSFT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).reprojectionMode);
}
#endif // XRTRANSPORT_EXT_XR_MSFT_composition_layer_reprojection
#ifdef XRTRANSPORT_EXT_XR_MSFT_composition_layer_reprojection
static void serialize(const XrCompositionLayerReprojectionPlaneOverrideMSFT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).position), sizeof((*s).normal)) + sizeof((*s).normal), sizeof((*s).velocity)) + sizeof((*s).velocity);
}
#endif // XRTRANSPORT_EXT_XR_MSFT_composition_layer_reprojection
#ifdef XRTRANSPORT_EXT_XR_FB_android_surface_swapchain_create
static void serialize(const XrAndroidSurfaceSwapchainCreateInfoFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).createFlags);
}
#endif // XRTRANSPORT_EXT_XR_FB_android_surface_swapchain_create
#ifdef XRTRANSPORT_EXT_XR_FB_composition_layer_secure_content
static void serialize(const XrCompositionLayerSecureContentFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).flags);
}
#endif // XRTRANSPORT_EXT_XR_FB_composition_layer_secure_content
#ifdef XRTRANSPORT_EXT_XR_FB_body_tracking
static void serialize(const XrBodyTrackerCreateInfoFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).bodyJointSet);
}
#endif // XRTRANSPORT_EXT_XR_FB_body_tracking
#ifdef XRTRANSPORT_EXT_XR_FB_body_tracking
static void serialize(const XrBodyJointsLocateInfoFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).baseSpace), sizeof((*s).time)) + sizeof((*s).time);
}
#endif // XRTRANSPORT_EXT_XR_FB_body_tracking
#ifdef XRTRANSPORT_EXT_XR_FB_body_tracking
static void serialize(const XrSystemBodyTrackingPropertiesFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).supportsBodyTracking);
}
#endif // XRTRANSPORT_EXT_XR_FB_body_tracking
#ifdef XRTRANSPORT_EXT_XR_FB_body_tracking
static void serialize(const XrBodyJointLocationsFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).isActive), sizeof((*s).confidence)) + sizeof((*s).confidence), sizeof((*s).jointCount)) + sizeof((*s).jointCount), sizeof((*s).jointLocations)) + sizeof((*s).jointLocations), sizeof((*s).skeletonChangedCount)) + sizeof((*s).skeletonChangedCount), sizeof((*s).time)) + sizeof((*s).time);
}
#endif // XRTRANSPORT_EXT_XR_FB_body_tracking
#ifdef XRTRANSPORT_EXT_XR_FB_body_tracking
static void serialize(const XrBodySkeletonFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).jointCount), sizeof((*s).joints)) + sizeof((*s).joints);
}
#endif // XRTRANSPORT_EXT_XR_FB_body_tracking
#ifdef XRTRANSPORT_EXT_XR_EXT_dpad_binding
static void serialize(const XrInteractionProfileDpadBindingEXT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(align(align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).binding), sizeof((*s).actionSet)) + sizeof((*s).actionSet), sizeof((*s).forceThreshold)) + sizeof((*s).forceThreshold), sizeof((*s).forceThresholdReleased)) + sizeof((*s).forceThresholdReleased), sizeof((*s).centerRegion)) + sizeof((*s).centerRegion), sizeof((*s).wedgeAngle)) + sizeof((*s).wedgeAngle), sizeof((*s).isSticky)) + sizeof((*s).isSticky), sizeof((*s).onHaptic)) + sizeof((*s).onHaptic), sizeof((*s).offHaptic)) + sizeof((*s).offHaptic);
}
#endif // XRTRANSPORT_EXT_XR_EXT_dpad_binding
#ifdef XRTRANSPORT_EXT_XR_VALVE_analog_threshold
static void serialize(const XrInteractionProfileAnalogThresholdVALVE* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).action), sizeof((*s).binding)) + sizeof((*s).binding), sizeof((*s).onThreshold)) + sizeof((*s).onThreshold), sizeof((*s).offThreshold)) + sizeof((*s).offThreshold), sizeof((*s).onHaptic)) + sizeof((*s).onHaptic), sizeof((*s).offHaptic)) + sizeof((*s).offHaptic);
}
#endif // XRTRANSPORT_EXT_XR_VALVE_analog_threshold
#ifdef XRTRANSPORT_EXT_XR_EXT_hand_joints_motion_range
static void serialize(const XrHandJointsMotionRangeInfoEXT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).handJointsMotionRange);
}
#endif // XRTRANSPORT_EXT_XR_EXT_hand_joints_motion_range
#ifdef XRTRANSPORT_EXT_XR_KHR_loader_init_android
static void serialize(const XrLoaderInitInfoAndroidKHR* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).applicationVM), sizeof((*s).applicationContext)) + sizeof((*s).applicationContext);
}
#endif // XRTRANSPORT_EXT_XR_KHR_loader_init_android
#ifdef XRTRANSPORT_EXT_XR_KHR_vulkan_enable2
static void serialize(const XrVulkanInstanceCreateInfoKHR* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).systemId), sizeof((*s).createFlags)) + sizeof((*s).createFlags), sizeof((*s).pfnGetInstanceProcAddr)) + sizeof((*s).pfnGetInstanceProcAddr), sizeof((*s).vulkanCreateInfo)) + sizeof((*s).vulkanCreateInfo), sizeof((*s).vulkanAllocator)) + sizeof((*s).vulkanAllocator);
}
#endif // XRTRANSPORT_EXT_XR_KHR_vulkan_enable2
#ifdef XRTRANSPORT_EXT_XR_KHR_vulkan_enable2
static void serialize(const XrVulkanDeviceCreateInfoKHR* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).systemId), sizeof((*s).createFlags)) + sizeof((*s).createFlags), sizeof((*s).pfnGetInstanceProcAddr)) + sizeof((*s).pfnGetInstanceProcAddr), sizeof((*s).vulkanPhysicalDevice)) + sizeof((*s).vulkanPhysicalDevice), sizeof((*s).vulkanCreateInfo)) + sizeof((*s).vulkanCreateInfo), sizeof((*s).vulkanAllocator)) + sizeof((*s).vulkanAllocator);
}
#endif // XRTRANSPORT_EXT_XR_KHR_vulkan_enable2
#ifdef XRTRANSPORT_EXT_XR_KHR_vulkan_enable2
static void serialize(const XrVulkanGraphicsDeviceGetInfoKHR* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).systemId), sizeof((*s).vulkanInstance)) + sizeof((*s).vulkanInstance);
}
#endif // XRTRANSPORT_EXT_XR_KHR_vulkan_enable2
#ifdef XRTRANSPORT_EXT_XR_KHR_composition_layer_equirect2
static void serialize(const XrCompositionLayerEquirect2KHR* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(align(align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).layerFlags), sizeof((*s).space)) + sizeof((*s).space), sizeof((*s).eyeVisibility)) + sizeof((*s).eyeVisibility), sizeof((*s).subImage)) + sizeof((*s).subImage), sizeof((*s).pose)) + sizeof((*s).pose), sizeof((*s).radius)) + sizeof((*s).radius), sizeof((*s).centralHorizontalAngle)) + sizeof((*s).centralHorizontalAngle), sizeof((*s).upperVerticalAngle)) + sizeof((*s).upperVerticalAngle), sizeof((*s).lowerVerticalAngle)) + sizeof((*s).lowerVerticalAngle);
}
#endif // XRTRANSPORT_EXT_XR_KHR_composition_layer_equirect2
#ifdef XRTRANSPORT_EXT_XR_MSFT_scene_understanding
static void serialize(const XrSceneObserverCreateInfoMSFT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).next);
}
#endif // XRTRANSPORT_EXT_XR_MSFT_scene_understanding
#ifdef XRTRANSPORT_EXT_XR_MSFT_scene_understanding
static void serialize(const XrSceneCreateInfoMSFT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).next);
}
#endif // XRTRANSPORT_EXT_XR_MSFT_scene_understanding
#ifdef XRTRANSPORT_EXT_XR_MSFT_scene_understanding
static void serialize(const XrNewSceneComputeInfoMSFT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).requestedFeatureCount), sizeof((*s).requestedFeatures)) + sizeof((*s).requestedFeatures), sizeof((*s).consistency)) + sizeof((*s).consistency), sizeof((*s).bounds)) + sizeof((*s).bounds);
}
#endif // XRTRANSPORT_EXT_XR_MSFT_scene_understanding
#ifdef XRTRANSPORT_EXT_XR_MSFT_scene_understanding
static void serialize(const XrVisualMeshComputeLodInfoMSFT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).lod);
}
#endif // XRTRANSPORT_EXT_XR_MSFT_scene_understanding
#ifdef XRTRANSPORT_EXT_XR_MSFT_scene_understanding
static void serialize(const XrSceneComponentsMSFT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).componentCapacityInput), sizeof((*s).componentCountOutput)) + sizeof((*s).componentCountOutput), sizeof((*s).components)) + sizeof((*s).components);
}
#endif // XRTRANSPORT_EXT_XR_MSFT_scene_understanding
#ifdef XRTRANSPORT_EXT_XR_MSFT_scene_understanding
static void serialize(const XrSceneComponentsGetInfoMSFT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).componentType);
}
#endif // XRTRANSPORT_EXT_XR_MSFT_scene_understanding
#ifdef XRTRANSPORT_EXT_XR_MSFT_scene_understanding
static void serialize(const XrSceneComponentLocationsMSFT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).locationCount), sizeof((*s).locations)) + sizeof((*s).locations);
}
#endif // XRTRANSPORT_EXT_XR_MSFT_scene_understanding
#ifdef XRTRANSPORT_EXT_XR_MSFT_scene_understanding
static void serialize(const XrSceneComponentsLocateInfoMSFT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).baseSpace), sizeof((*s).time)) + sizeof((*s).time), sizeof((*s).componentIdCount)) + sizeof((*s).componentIdCount), sizeof((*s).componentIds)) + sizeof((*s).componentIds);
}
#endif // XRTRANSPORT_EXT_XR_MSFT_scene_understanding
#ifdef XRTRANSPORT_EXT_XR_MSFT_scene_understanding
static void serialize(const XrSceneObjectsMSFT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).sceneObjectCount), sizeof((*s).sceneObjects)) + sizeof((*s).sceneObjects);
}
#endif // XRTRANSPORT_EXT_XR_MSFT_scene_understanding
#ifdef XRTRANSPORT_EXT_XR_MSFT_scene_understanding
static void serialize(const XrSceneComponentParentFilterInfoMSFT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).parentId);
}
#endif // XRTRANSPORT_EXT_XR_MSFT_scene_understanding
#ifdef XRTRANSPORT_EXT_XR_MSFT_scene_understanding
static void serialize(const XrSceneObjectTypesFilterInfoMSFT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).objectTypeCount), sizeof((*s).objectTypes)) + sizeof((*s).objectTypes);
}
#endif // XRTRANSPORT_EXT_XR_MSFT_scene_understanding
#ifdef XRTRANSPORT_EXT_XR_MSFT_scene_understanding
static void serialize(const XrScenePlanesMSFT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).scenePlaneCount), sizeof((*s).scenePlanes)) + sizeof((*s).scenePlanes);
}
#endif // XRTRANSPORT_EXT_XR_MSFT_scene_understanding
#ifdef XRTRANSPORT_EXT_XR_MSFT_scene_understanding
static void serialize(const XrScenePlaneAlignmentFilterInfoMSFT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).alignmentCount), sizeof((*s).alignments)) + sizeof((*s).alignments);
}
#endif // XRTRANSPORT_EXT_XR_MSFT_scene_understanding
#ifdef XRTRANSPORT_EXT_XR_MSFT_scene_understanding
static void serialize(const XrSceneMeshesMSFT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).sceneMeshCount), sizeof((*s).sceneMeshes)) + sizeof((*s).sceneMeshes);
}
#endif // XRTRANSPORT_EXT_XR_MSFT_scene_understanding
#ifdef XRTRANSPORT_EXT_XR_MSFT_scene_understanding
static void serialize(const XrSceneMeshBuffersGetInfoMSFT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).meshBufferId);
}
#endif // XRTRANSPORT_EXT_XR_MSFT_scene_understanding
#ifdef XRTRANSPORT_EXT_XR_MSFT_scene_understanding
static void serialize(const XrSceneMeshBuffersMSFT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).next);
}
#endif // XRTRANSPORT_EXT_XR_MSFT_scene_understanding
#ifdef XRTRANSPORT_EXT_XR_MSFT_scene_understanding
static void serialize(const XrSceneMeshVertexBufferMSFT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).vertexCapacityInput), sizeof((*s).vertexCountOutput)) + sizeof((*s).vertexCountOutput), sizeof((*s).vertices)) + sizeof((*s).vertices);
}
#endif // XRTRANSPORT_EXT_XR_MSFT_scene_understanding
#ifdef XRTRANSPORT_EXT_XR_MSFT_scene_understanding
static void serialize(const XrSceneMeshIndicesUint32MSFT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).indexCapacityInput), sizeof((*s).indexCountOutput)) + sizeof((*s).indexCountOutput), sizeof((*s).indices)) + sizeof((*s).indices);
}
#endif // XRTRANSPORT_EXT_XR_MSFT_scene_understanding
#ifdef XRTRANSPORT_EXT_XR_MSFT_scene_understanding
static void serialize(const XrSceneMeshIndicesUint16MSFT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).indexCapacityInput), sizeof((*s).indexCountOutput)) + sizeof((*s).indexCountOutput), sizeof((*s).indices)) + sizeof((*s).indices);
}
#endif // XRTRANSPORT_EXT_XR_MSFT_scene_understanding
#ifdef XRTRANSPORT_EXT_XR_MSFT_scene_understanding_serialization
static void serialize(const XrSerializedSceneFragmentDataGetInfoMSFT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).sceneFragmentId);
}
#endif // XRTRANSPORT_EXT_XR_MSFT_scene_understanding_serialization
#ifdef XRTRANSPORT_EXT_XR_MSFT_scene_understanding_serialization
static void serialize(const XrSceneDeserializeInfoMSFT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).fragmentCount), sizeof((*s).fragments)) + sizeof((*s).fragments);
}
#endif // XRTRANSPORT_EXT_XR_MSFT_scene_understanding_serialization
#ifdef XRTRANSPORT_EXT_XR_FB_display_refresh_rate
static void serialize(const XrEventDataDisplayRefreshRateChangedFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).fromDisplayRefreshRate), sizeof((*s).toDisplayRefreshRate)) + sizeof((*s).toDisplayRefreshRate);
}
#endif // XRTRANSPORT_EXT_XR_FB_display_refresh_rate
#ifdef XRTRANSPORT_EXT_XR_HTCX_vive_tracker_interaction
static void serialize(const XrViveTrackerPathsHTCX* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).persistentPath), sizeof((*s).rolePath)) + sizeof((*s).rolePath);
}
#endif // XRTRANSPORT_EXT_XR_HTCX_vive_tracker_interaction
#ifdef XRTRANSPORT_EXT_XR_HTCX_vive_tracker_interaction
static void serialize(const XrEventDataViveTrackerConnectedHTCX* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).paths);
}
#endif // XRTRANSPORT_EXT_XR_HTCX_vive_tracker_interaction
#ifdef XRTRANSPORT_EXT_XR_HTC_facial_tracking
static void serialize(const XrSystemFacialTrackingPropertiesHTC* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).supportEyeFacialTracking), sizeof((*s).supportLipFacialTracking)) + sizeof((*s).supportLipFacialTracking);
}
#endif // XRTRANSPORT_EXT_XR_HTC_facial_tracking
#ifdef XRTRANSPORT_EXT_XR_HTC_facial_tracking
static void serialize(const XrFacialTrackerCreateInfoHTC* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).facialTrackingType);
}
#endif // XRTRANSPORT_EXT_XR_HTC_facial_tracking
#ifdef XRTRANSPORT_EXT_XR_HTC_facial_tracking
static void serialize(const XrFacialExpressionsHTC* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).isActive), sizeof((*s).sampleTime)) + sizeof((*s).sampleTime), sizeof((*s).expressionCount)) + sizeof((*s).expressionCount), sizeof((*s).expressionWeightings)) + sizeof((*s).expressionWeightings);
}
#endif // XRTRANSPORT_EXT_XR_HTC_facial_tracking
#ifdef XRTRANSPORT_EXT_XR_FB_color_space
static void serialize(const XrSystemColorSpacePropertiesFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).colorSpace);
}
#endif // XRTRANSPORT_EXT_XR_FB_color_space
#ifdef XRTRANSPORT_EXT_XR_FB_hand_tracking_mesh
static void serialize(const XrHandTrackingMeshFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(align(align(align(align(align(align(align(align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).jointCapacityInput), sizeof((*s).jointCountOutput)) + sizeof((*s).jointCountOutput), sizeof((*s).jointBindPoses)) + sizeof((*s).jointBindPoses), sizeof((*s).jointRadii)) + sizeof((*s).jointRadii), sizeof((*s).jointParents)) + sizeof((*s).jointParents), sizeof((*s).vertexCapacityInput)) + sizeof((*s).vertexCapacityInput), sizeof((*s).vertexCountOutput)) + sizeof((*s).vertexCountOutput), sizeof((*s).vertexPositions)) + sizeof((*s).vertexPositions), sizeof((*s).vertexNormals)) + sizeof((*s).vertexNormals), sizeof((*s).vertexUVs)) + sizeof((*s).vertexUVs), sizeof((*s).vertexBlendIndices)) + sizeof((*s).vertexBlendIndices), sizeof((*s).vertexBlendWeights)) + sizeof((*s).vertexBlendWeights), sizeof((*s).indexCapacityInput)) + sizeof((*s).indexCapacityInput), sizeof((*s).indexCountOutput)) + sizeof((*s).indexCountOutput), sizeof((*s).indices)) + sizeof((*s).indices);
}
#endif // XRTRANSPORT_EXT_XR_FB_hand_tracking_mesh
#ifdef XRTRANSPORT_EXT_XR_FB_hand_tracking_mesh
static void serialize(const XrHandTrackingScaleFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).sensorOutput), sizeof((*s).currentOutput)) + sizeof((*s).currentOutput), sizeof((*s).overrideHandScale)) + sizeof((*s).overrideHandScale), sizeof((*s).overrideValueInput)) + sizeof((*s).overrideValueInput);
}
#endif // XRTRANSPORT_EXT_XR_FB_hand_tracking_mesh
#ifdef XRTRANSPORT_EXT_XR_FB_hand_tracking_aim
static void serialize(const XrHandTrackingAimStateFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).status), sizeof((*s).aimPose)) + sizeof((*s).aimPose), sizeof((*s).pinchStrengthIndex)) + sizeof((*s).pinchStrengthIndex), sizeof((*s).pinchStrengthMiddle)) + sizeof((*s).pinchStrengthMiddle), sizeof((*s).pinchStrengthRing)) + sizeof((*s).pinchStrengthRing), sizeof((*s).pinchStrengthLittle)) + sizeof((*s).pinchStrengthLittle);
}
#endif // XRTRANSPORT_EXT_XR_FB_hand_tracking_aim
#ifdef XRTRANSPORT_EXT_XR_FB_hand_tracking_capsules
static void serialize(const XrHandTrackingCapsulesStateFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).capsules);
}
#endif // XRTRANSPORT_EXT_XR_FB_hand_tracking_capsules
#ifdef XRTRANSPORT_EXT_XR_FB_spatial_entity
static void serialize(const XrSpaceComponentStatusFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).enabled), sizeof((*s).changePending)) + sizeof((*s).changePending);
}
#endif // XRTRANSPORT_EXT_XR_FB_spatial_entity
#ifdef XRTRANSPORT_EXT_XR_FB_spatial_entity
static void serialize(const XrSpatialAnchorCreateInfoFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).space), sizeof((*s).poseInSpace)) + sizeof((*s).poseInSpace), sizeof((*s).time)) + sizeof((*s).time);
}
#endif // XRTRANSPORT_EXT_XR_FB_spatial_entity
#ifdef XRTRANSPORT_EXT_XR_FB_spatial_entity
static void serialize(const XrSystemSpatialEntityPropertiesFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).supportsSpatialEntity);
}
#endif // XRTRANSPORT_EXT_XR_FB_spatial_entity
#ifdef XRTRANSPORT_EXT_XR_FB_spatial_entity
static void serialize(const XrEventDataSpatialAnchorCreateCompleteFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).requestId), sizeof((*s).result)) + sizeof((*s).result), sizeof((*s).space)) + sizeof((*s).space), sizeof((*s).uuid)) + sizeof((*s).uuid);
}
#endif // XRTRANSPORT_EXT_XR_FB_spatial_entity
#ifdef XRTRANSPORT_EXT_XR_FB_spatial_entity
static void serialize(const XrEventDataSpaceSetStatusCompleteFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).requestId), sizeof((*s).result)) + sizeof((*s).result), sizeof((*s).space)) + sizeof((*s).space), sizeof((*s).uuid)) + sizeof((*s).uuid), sizeof((*s).componentType)) + sizeof((*s).componentType), sizeof((*s).enabled)) + sizeof((*s).enabled);
}
#endif // XRTRANSPORT_EXT_XR_FB_spatial_entity
#ifdef XRTRANSPORT_EXT_XR_FB_spatial_entity
static void serialize(const XrSpaceComponentStatusSetInfoFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).componentType), sizeof((*s).enabled)) + sizeof((*s).enabled), sizeof((*s).timeout)) + sizeof((*s).timeout);
}
#endif // XRTRANSPORT_EXT_XR_FB_spatial_entity
#ifdef XRTRANSPORT_EXT_XR_FB_foveation
static void serialize(const XrFoveationProfileCreateInfoFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).next);
}
#endif // XRTRANSPORT_EXT_XR_FB_foveation
#ifdef XRTRANSPORT_EXT_XR_FB_foveation
static void serialize(const XrSwapchainCreateInfoFoveationFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).flags);
}
#endif // XRTRANSPORT_EXT_XR_FB_foveation
#ifdef XRTRANSPORT_EXT_XR_FB_foveation
static void serialize(const XrSwapchainStateFoveationFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).flags), sizeof((*s).profile)) + sizeof((*s).profile);
}
#endif // XRTRANSPORT_EXT_XR_FB_foveation
#ifdef XRTRANSPORT_EXT_XR_FB_foveation_configuration
static void serialize(const XrFoveationLevelProfileCreateInfoFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).level), sizeof((*s).verticalOffset)) + sizeof((*s).verticalOffset), sizeof((*s).dynamic)) + sizeof((*s).dynamic);
}
#endif // XRTRANSPORT_EXT_XR_FB_foveation_configuration
#ifdef XRTRANSPORT_EXT_XR_FB_keyboard_tracking
static void serialize(const XrSystemKeyboardTrackingPropertiesFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).supportsKeyboardTracking);
}
#endif // XRTRANSPORT_EXT_XR_FB_keyboard_tracking
#ifdef XRTRANSPORT_EXT_XR_FB_keyboard_tracking
static void serialize(const XrKeyboardTrackingQueryFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).flags);
}
#endif // XRTRANSPORT_EXT_XR_FB_keyboard_tracking
#ifdef XRTRANSPORT_EXT_XR_FB_keyboard_tracking
static void serialize(const XrKeyboardSpaceCreateInfoFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).trackedKeyboardId);
}
#endif // XRTRANSPORT_EXT_XR_FB_keyboard_tracking
#ifdef XRTRANSPORT_EXT_XR_FB_triangle_mesh
static void serialize(const XrTriangleMeshCreateInfoFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).flags), sizeof((*s).windingOrder)) + sizeof((*s).windingOrder), sizeof((*s).vertexCount)) + sizeof((*s).vertexCount), sizeof((*s).vertexBuffer)) + sizeof((*s).vertexBuffer), sizeof((*s).triangleCount)) + sizeof((*s).triangleCount), sizeof((*s).indexBuffer)) + sizeof((*s).indexBuffer);
}
#endif // XRTRANSPORT_EXT_XR_FB_triangle_mesh
#ifdef XRTRANSPORT_EXT_XR_FB_passthrough
static void serialize(const XrSystemPassthroughPropertiesFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).supportsPassthrough);
}
#endif // XRTRANSPORT_EXT_XR_FB_passthrough
#ifdef XRTRANSPORT_EXT_XR_FB_passthrough
static void serialize(const XrPassthroughCreateInfoFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).flags);
}
#endif // XRTRANSPORT_EXT_XR_FB_passthrough
#ifdef XRTRANSPORT_EXT_XR_FB_passthrough
static void serialize(const XrPassthroughLayerCreateInfoFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).passthrough), sizeof((*s).flags)) + sizeof((*s).flags), sizeof((*s).purpose)) + sizeof((*s).purpose);
}
#endif // XRTRANSPORT_EXT_XR_FB_passthrough
#ifdef XRTRANSPORT_EXT_XR_FB_passthrough
static void serialize(const XrCompositionLayerPassthroughFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).flags), sizeof((*s).space)) + sizeof((*s).space), sizeof((*s).layerHandle)) + sizeof((*s).layerHandle);
}
#endif // XRTRANSPORT_EXT_XR_FB_passthrough
#ifdef XRTRANSPORT_EXT_XR_FB_passthrough
static void serialize(const XrGeometryInstanceCreateInfoFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).layer), sizeof((*s).mesh)) + sizeof((*s).mesh), sizeof((*s).baseSpace)) + sizeof((*s).baseSpace), sizeof((*s).pose)) + sizeof((*s).pose), sizeof((*s).scale)) + sizeof((*s).scale);
}
#endif // XRTRANSPORT_EXT_XR_FB_passthrough
#ifdef XRTRANSPORT_EXT_XR_FB_passthrough
static void serialize(const XrGeometryInstanceTransformFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).baseSpace), sizeof((*s).time)) + sizeof((*s).time), sizeof((*s).pose)) + sizeof((*s).pose), sizeof((*s).scale)) + sizeof((*s).scale);
}
#endif // XRTRANSPORT_EXT_XR_FB_passthrough
#ifdef XRTRANSPORT_EXT_XR_FB_passthrough
static void serialize(const XrSystemPassthroughProperties2FB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).capabilities);
}
#endif // XRTRANSPORT_EXT_XR_FB_passthrough
#ifdef XRTRANSPORT_EXT_XR_FB_passthrough
static void serialize(const XrPassthroughStyleFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).textureOpacityFactor), sizeof((*s).edgeColor)) + sizeof((*s).edgeColor);
}
#endif // XRTRANSPORT_EXT_XR_FB_passthrough
#ifdef XRTRANSPORT_EXT_XR_FB_passthrough
static void serialize(const XrPassthroughColorMapMonoToRgbaFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).textureColorMap);
}
#endif // XRTRANSPORT_EXT_XR_FB_passthrough
#ifdef XRTRANSPORT_EXT_XR_FB_passthrough
static void serialize(const XrPassthroughColorMapMonoToMonoFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).textureColorMap);
}
#endif // XRTRANSPORT_EXT_XR_FB_passthrough
#ifdef XRTRANSPORT_EXT_XR_FB_passthrough
static void serialize(const XrPassthroughBrightnessContrastSaturationFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).brightness), sizeof((*s).contrast)) + sizeof((*s).contrast), sizeof((*s).saturation)) + sizeof((*s).saturation);
}
#endif // XRTRANSPORT_EXT_XR_FB_passthrough
#ifdef XRTRANSPORT_EXT_XR_FB_passthrough
static void serialize(const XrEventDataPassthroughStateChangedFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).flags);
}
#endif // XRTRANSPORT_EXT_XR_FB_passthrough
#ifdef XRTRANSPORT_EXT_XR_FB_render_model
static void serialize(const XrRenderModelPathInfoFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).path);
}
#endif // XRTRANSPORT_EXT_XR_FB_render_model
#ifdef XRTRANSPORT_EXT_XR_FB_render_model
static void serialize(const XrRenderModelPropertiesFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).vendorId), sizeof((*s).modelName)) + sizeof((*s).modelName), sizeof((*s).modelKey)) + sizeof((*s).modelKey), sizeof((*s).modelVersion)) + sizeof((*s).modelVersion), sizeof((*s).flags)) + sizeof((*s).flags);
}
#endif // XRTRANSPORT_EXT_XR_FB_render_model
#ifdef XRTRANSPORT_EXT_XR_FB_render_model
static void serialize(const XrRenderModelBufferFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).bufferCapacityInput), sizeof((*s).bufferCountOutput)) + sizeof((*s).bufferCountOutput), sizeof((*s).buffer)) + sizeof((*s).buffer);
}
#endif // XRTRANSPORT_EXT_XR_FB_render_model
#ifdef XRTRANSPORT_EXT_XR_FB_render_model
static void serialize(const XrRenderModelLoadInfoFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).modelKey);
}
#endif // XRTRANSPORT_EXT_XR_FB_render_model
#ifdef XRTRANSPORT_EXT_XR_FB_render_model
static void serialize(const XrSystemRenderModelPropertiesFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).supportsRenderModelLoading);
}
#endif // XRTRANSPORT_EXT_XR_FB_render_model
#ifdef XRTRANSPORT_EXT_XR_FB_render_model
static void serialize(const XrRenderModelCapabilitiesRequestFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).flags);
}
#endif // XRTRANSPORT_EXT_XR_FB_render_model
#ifdef XRTRANSPORT_EXT_XR_KHR_binding_modification
static void serialize(const XrBindingModificationsKHR* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).bindingModificationCount), sizeof((*s).bindingModifications)) + sizeof((*s).bindingModifications);
}
#endif // XRTRANSPORT_EXT_XR_KHR_binding_modification
#ifdef XRTRANSPORT_EXT_XR_VARJO_foveated_rendering
static void serialize(const XrViewLocateFoveatedRenderingVARJO* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).foveatedRenderingActive);
}
#endif // XRTRANSPORT_EXT_XR_VARJO_foveated_rendering
#ifdef XRTRANSPORT_EXT_XR_VARJO_foveated_rendering
static void serialize(const XrFoveatedViewConfigurationViewVARJO* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).foveatedRenderingActive);
}
#endif // XRTRANSPORT_EXT_XR_VARJO_foveated_rendering
#ifdef XRTRANSPORT_EXT_XR_VARJO_foveated_rendering
static void serialize(const XrSystemFoveatedRenderingPropertiesVARJO* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).supportsFoveatedRendering);
}
#endif // XRTRANSPORT_EXT_XR_VARJO_foveated_rendering
#ifdef XRTRANSPORT_EXT_XR_VARJO_composition_layer_depth_test
static void serialize(const XrCompositionLayerDepthTestVARJO* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).depthTestRangeNearZ), sizeof((*s).depthTestRangeFarZ)) + sizeof((*s).depthTestRangeFarZ);
}
#endif // XRTRANSPORT_EXT_XR_VARJO_composition_layer_depth_test
#ifdef XRTRANSPORT_EXT_XR_VARJO_marker_tracking
static void serialize(const XrSystemMarkerTrackingPropertiesVARJO* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).supportsMarkerTracking);
}
#endif // XRTRANSPORT_EXT_XR_VARJO_marker_tracking
#ifdef XRTRANSPORT_EXT_XR_VARJO_marker_tracking
static void serialize(const XrEventDataMarkerTrackingUpdateVARJO* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).markerId), sizeof((*s).isActive)) + sizeof((*s).isActive), sizeof((*s).isPredicted)) + sizeof((*s).isPredicted), sizeof((*s).time)) + sizeof((*s).time);
}
#endif // XRTRANSPORT_EXT_XR_VARJO_marker_tracking
#ifdef XRTRANSPORT_EXT_XR_VARJO_marker_tracking
static void serialize(const XrMarkerSpaceCreateInfoVARJO* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).markerId), sizeof((*s).poseInMarkerSpace)) + sizeof((*s).poseInMarkerSpace);
}
#endif // XRTRANSPORT_EXT_XR_VARJO_marker_tracking
#ifdef XRTRANSPORT_EXT_XR_ML_frame_end_info
static void serialize(const XrFrameEndInfoML* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).focusDistance), sizeof((*s).flags)) + sizeof((*s).flags);
}
#endif // XRTRANSPORT_EXT_XR_ML_frame_end_info
#ifdef XRTRANSPORT_EXT_XR_ML_global_dimmer
static void serialize(const XrGlobalDimmerFrameEndInfoML* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).dimmerValue), sizeof((*s).flags)) + sizeof((*s).flags);
}
#endif // XRTRANSPORT_EXT_XR_ML_global_dimmer
static void serialize(const XrCoordinateSpaceCreateInfoML* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).cfuid), sizeof((*s).poseInCoordinateSpace)) + sizeof((*s).poseInCoordinateSpace);
}
#ifdef XRTRANSPORT_EXT_XR_ML_marker_understanding
static void serialize(const XrSystemMarkerUnderstandingPropertiesML* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).supportsMarkerUnderstanding);
}
#endif // XRTRANSPORT_EXT_XR_ML_marker_understanding
#ifdef XRTRANSPORT_EXT_XR_ML_marker_understanding
static void serialize(const XrMarkerDetectorCreateInfoML* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).profile), sizeof((*s).markerType)) + sizeof((*s).markerType);
}
#endif // XRTRANSPORT_EXT_XR_ML_marker_understanding
#ifdef XRTRANSPORT_EXT_XR_ML_marker_understanding
static void serialize(const XrMarkerDetectorArucoInfoML* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).arucoDict);
}
#endif // XRTRANSPORT_EXT_XR_ML_marker_understanding
#ifdef XRTRANSPORT_EXT_XR_ML_marker_understanding
static void serialize(const XrMarkerDetectorSizeInfoML* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).markerLength);
}
#endif // XRTRANSPORT_EXT_XR_ML_marker_understanding
#ifdef XRTRANSPORT_EXT_XR_ML_marker_understanding
static void serialize(const XrMarkerDetectorAprilTagInfoML* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).aprilTagDict);
}
#endif // XRTRANSPORT_EXT_XR_ML_marker_understanding
#ifdef XRTRANSPORT_EXT_XR_ML_marker_understanding
static void serialize(const XrMarkerDetectorCustomProfileInfoML* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).fpsHint), sizeof((*s).resolutionHint)) + sizeof((*s).resolutionHint), sizeof((*s).cameraHint)) + sizeof((*s).cameraHint), sizeof((*s).cornerRefineMethod)) + sizeof((*s).cornerRefineMethod), sizeof((*s).useEdgeRefinement)) + sizeof((*s).useEdgeRefinement), sizeof((*s).fullAnalysisIntervalHint)) + sizeof((*s).fullAnalysisIntervalHint);
}
#endif // XRTRANSPORT_EXT_XR_ML_marker_understanding
#ifdef XRTRANSPORT_EXT_XR_ML_marker_understanding
static void serialize(const XrMarkerDetectorSnapshotInfoML* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).next);
}
#endif // XRTRANSPORT_EXT_XR_ML_marker_understanding
#ifdef XRTRANSPORT_EXT_XR_ML_marker_understanding
static void serialize(const XrMarkerDetectorStateML* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).state);
}
#endif // XRTRANSPORT_EXT_XR_ML_marker_understanding
#ifdef XRTRANSPORT_EXT_XR_ML_marker_understanding
static void serialize(const XrMarkerSpaceCreateInfoML* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).markerDetector), sizeof((*s).marker)) + sizeof((*s).marker), sizeof((*s).poseInMarkerSpace)) + sizeof((*s).poseInMarkerSpace);
}
#endif // XRTRANSPORT_EXT_XR_ML_marker_understanding
#ifdef XRTRANSPORT_EXT_XR_ML_localization_map
static void serialize(const XrLocalizationMapML* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).name), sizeof((*s).mapUuid)) + sizeof((*s).mapUuid), sizeof((*s).mapType)) + sizeof((*s).mapType);
}
#endif // XRTRANSPORT_EXT_XR_ML_localization_map
#ifdef XRTRANSPORT_EXT_XR_ML_localization_map
static void serialize(const XrEventDataLocalizationChangedML* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).session), sizeof((*s).state)) + sizeof((*s).state), sizeof((*s).map)) + sizeof((*s).map), sizeof((*s).confidence)) + sizeof((*s).confidence), sizeof((*s).errorFlags)) + sizeof((*s).errorFlags);
}
#endif // XRTRANSPORT_EXT_XR_ML_localization_map
#ifdef XRTRANSPORT_EXT_XR_ML_localization_map
static void serialize(const XrMapLocalizationRequestInfoML* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).mapUuid);
}
#endif // XRTRANSPORT_EXT_XR_ML_localization_map
#ifdef XRTRANSPORT_EXT_XR_ML_localization_map
static void serialize(const XrLocalizationMapImportInfoML* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).size), sizeof((*s).data)) + sizeof((*s).data);
}
#endif // XRTRANSPORT_EXT_XR_ML_localization_map
#ifdef XRTRANSPORT_EXT_XR_ML_localization_map
static void serialize(const XrLocalizationEnableEventsInfoML* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).enabled);
}
#endif // XRTRANSPORT_EXT_XR_ML_localization_map
#ifdef XRTRANSPORT_EXT_XR_ML_spatial_anchors
static void serialize(const XrSpatialAnchorsCreateInfoFromPoseML* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).baseSpace), sizeof((*s).poseInBaseSpace)) + sizeof((*s).poseInBaseSpace), sizeof((*s).time)) + sizeof((*s).time);
}
#endif // XRTRANSPORT_EXT_XR_ML_spatial_anchors
#ifdef XRTRANSPORT_EXT_XR_ML_spatial_anchors
static void serialize(const XrCreateSpatialAnchorsCompletionML* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).futureResult), sizeof((*s).spaceCount)) + sizeof((*s).spaceCount), sizeof((*s).spaces)) + sizeof((*s).spaces);
}
#endif // XRTRANSPORT_EXT_XR_ML_spatial_anchors
#ifdef XRTRANSPORT_EXT_XR_ML_spatial_anchors
static void serialize(const XrSpatialAnchorStateML* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).confidence);
}
#endif // XRTRANSPORT_EXT_XR_ML_spatial_anchors
#ifdef XRTRANSPORT_EXT_XR_ML_spatial_anchors_storage
static void serialize(const XrSpatialAnchorsCreateStorageInfoML* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).next);
}
#endif // XRTRANSPORT_EXT_XR_ML_spatial_anchors_storage
#ifdef XRTRANSPORT_EXT_XR_ML_spatial_anchors_storage
static void serialize(const XrSpatialAnchorsQueryInfoRadiusML* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).baseSpace), sizeof((*s).center)) + sizeof((*s).center), sizeof((*s).time)) + sizeof((*s).time), sizeof((*s).radius)) + sizeof((*s).radius);
}
#endif // XRTRANSPORT_EXT_XR_ML_spatial_anchors_storage
#ifdef XRTRANSPORT_EXT_XR_ML_spatial_anchors_storage
static void serialize(const XrSpatialAnchorsQueryCompletionML* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).futureResult), sizeof((*s).uuidCapacityInput)) + sizeof((*s).uuidCapacityInput), sizeof((*s).uuidCountOutput)) + sizeof((*s).uuidCountOutput), sizeof((*s).uuids)) + sizeof((*s).uuids);
}
#endif // XRTRANSPORT_EXT_XR_ML_spatial_anchors_storage
#ifdef XRTRANSPORT_EXT_XR_ML_spatial_anchors_storage
static void serialize(const XrSpatialAnchorsCreateInfoFromUuidsML* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).storage), sizeof((*s).uuidCount)) + sizeof((*s).uuidCount), sizeof((*s).uuids)) + sizeof((*s).uuids);
}
#endif // XRTRANSPORT_EXT_XR_ML_spatial_anchors_storage
#ifdef XRTRANSPORT_EXT_XR_ML_spatial_anchors_storage
static void serialize(const XrSpatialAnchorsPublishInfoML* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).anchorCount), sizeof((*s).anchors)) + sizeof((*s).anchors), sizeof((*s).expiration)) + sizeof((*s).expiration);
}
#endif // XRTRANSPORT_EXT_XR_ML_spatial_anchors_storage
#ifdef XRTRANSPORT_EXT_XR_ML_spatial_anchors_storage
static void serialize(const XrSpatialAnchorsPublishCompletionML* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).futureResult), sizeof((*s).uuidCount)) + sizeof((*s).uuidCount), sizeof((*s).uuids)) + sizeof((*s).uuids);
}
#endif // XRTRANSPORT_EXT_XR_ML_spatial_anchors_storage
#ifdef XRTRANSPORT_EXT_XR_ML_spatial_anchors_storage
static void serialize(const XrSpatialAnchorsDeleteInfoML* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).uuidCount), sizeof((*s).uuids)) + sizeof((*s).uuids);
}
#endif // XRTRANSPORT_EXT_XR_ML_spatial_anchors_storage
#ifdef XRTRANSPORT_EXT_XR_ML_spatial_anchors_storage
static void serialize(const XrSpatialAnchorsDeleteCompletionML* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).futureResult);
}
#endif // XRTRANSPORT_EXT_XR_ML_spatial_anchors_storage
#ifdef XRTRANSPORT_EXT_XR_ML_spatial_anchors_storage
static void serialize(const XrSpatialAnchorsUpdateExpirationInfoML* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).uuidCount), sizeof((*s).uuids)) + sizeof((*s).uuids), sizeof((*s).expiration)) + sizeof((*s).expiration);
}
#endif // XRTRANSPORT_EXT_XR_ML_spatial_anchors_storage
#ifdef XRTRANSPORT_EXT_XR_ML_spatial_anchors_storage
static void serialize(const XrSpatialAnchorsUpdateExpirationCompletionML* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).futureResult);
}
#endif // XRTRANSPORT_EXT_XR_ML_spatial_anchors_storage
#ifdef XRTRANSPORT_EXT_XR_ML_spatial_anchors_storage
static void serialize(const XrSpatialAnchorsPublishCompletionDetailsML* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).resultCount), sizeof((*s).results)) + sizeof((*s).results);
}
#endif // XRTRANSPORT_EXT_XR_ML_spatial_anchors_storage
#ifdef XRTRANSPORT_EXT_XR_ML_spatial_anchors_storage
static void serialize(const XrSpatialAnchorsDeleteCompletionDetailsML* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).resultCount), sizeof((*s).results)) + sizeof((*s).results);
}
#endif // XRTRANSPORT_EXT_XR_ML_spatial_anchors_storage
#ifdef XRTRANSPORT_EXT_XR_ML_spatial_anchors_storage
static void serialize(const XrSpatialAnchorsUpdateExpirationCompletionDetailsML* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).resultCount), sizeof((*s).results)) + sizeof((*s).results);
}
#endif // XRTRANSPORT_EXT_XR_ML_spatial_anchors_storage
#ifdef XRTRANSPORT_EXT_XR_MSFT_spatial_anchor_persistence
static void serialize(const XrSpatialAnchorPersistenceInfoMSFT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).spatialAnchorPersistenceName), sizeof((*s).spatialAnchor)) + sizeof((*s).spatialAnchor);
}
#endif // XRTRANSPORT_EXT_XR_MSFT_spatial_anchor_persistence
#ifdef XRTRANSPORT_EXT_XR_MSFT_spatial_anchor_persistence
static void serialize(const XrSpatialAnchorFromPersistedAnchorCreateInfoMSFT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).spatialAnchorStore), sizeof((*s).spatialAnchorPersistenceName)) + sizeof((*s).spatialAnchorPersistenceName);
}
#endif // XRTRANSPORT_EXT_XR_MSFT_spatial_anchor_persistence
#ifdef XRTRANSPORT_EXT_XR_MSFT_scene_marker
static void serialize(const XrSceneMarkersMSFT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).sceneMarkerCapacityInput), sizeof((*s).sceneMarkers)) + sizeof((*s).sceneMarkers);
}
#endif // XRTRANSPORT_EXT_XR_MSFT_scene_marker
#ifdef XRTRANSPORT_EXT_XR_MSFT_scene_marker
static void serialize(const XrSceneMarkerTypeFilterMSFT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).markerTypeCount), sizeof((*s).markerTypes)) + sizeof((*s).markerTypes);
}
#endif // XRTRANSPORT_EXT_XR_MSFT_scene_marker
#ifdef XRTRANSPORT_EXT_XR_MSFT_scene_marker
static void serialize(const XrSceneMarkerQRCodesMSFT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).qrCodeCapacityInput), sizeof((*s).qrCodes)) + sizeof((*s).qrCodes);
}
#endif // XRTRANSPORT_EXT_XR_MSFT_scene_marker
#ifdef XRTRANSPORT_EXT_XR_FB_spatial_entity_query
static void serialize(const XrSpaceQueryInfoFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).queryAction), sizeof((*s).maxResultCount)) + sizeof((*s).maxResultCount), sizeof((*s).timeout)) + sizeof((*s).timeout), sizeof((*s).filter)) + sizeof((*s).filter), sizeof((*s).excludeFilter)) + sizeof((*s).excludeFilter);
}
#endif // XRTRANSPORT_EXT_XR_FB_spatial_entity_query
#ifdef XRTRANSPORT_EXT_XR_FB_spatial_entity_query
static void serialize(const XrSpaceQueryResultsFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).resultCapacityInput), sizeof((*s).resultCountOutput)) + sizeof((*s).resultCountOutput), sizeof((*s).results)) + sizeof((*s).results);
}
#endif // XRTRANSPORT_EXT_XR_FB_spatial_entity_query
#ifdef XRTRANSPORT_EXT_XR_FB_spatial_entity_query
static void serialize(const XrSpaceStorageLocationFilterInfoFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).location);
}
#endif // XRTRANSPORT_EXT_XR_FB_spatial_entity_query
#ifdef XRTRANSPORT_EXT_XR_FB_spatial_entity_query
static void serialize(const XrSpaceComponentFilterInfoFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).componentType);
}
#endif // XRTRANSPORT_EXT_XR_FB_spatial_entity_query
#ifdef XRTRANSPORT_EXT_XR_FB_spatial_entity_query
static void serialize(const XrSpaceUuidFilterInfoFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).uuidCount), sizeof((*s).uuids)) + sizeof((*s).uuids);
}
#endif // XRTRANSPORT_EXT_XR_FB_spatial_entity_query
#ifdef XRTRANSPORT_EXT_XR_FB_spatial_entity_query
static void serialize(const XrEventDataSpaceQueryResultsAvailableFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).requestId);
}
#endif // XRTRANSPORT_EXT_XR_FB_spatial_entity_query
#ifdef XRTRANSPORT_EXT_XR_FB_spatial_entity_query
static void serialize(const XrEventDataSpaceQueryCompleteFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).requestId), sizeof((*s).result)) + sizeof((*s).result);
}
#endif // XRTRANSPORT_EXT_XR_FB_spatial_entity_query
#ifdef XRTRANSPORT_EXT_XR_FB_spatial_entity_storage
static void serialize(const XrSpaceSaveInfoFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).space), sizeof((*s).location)) + sizeof((*s).location), sizeof((*s).persistenceMode)) + sizeof((*s).persistenceMode);
}
#endif // XRTRANSPORT_EXT_XR_FB_spatial_entity_storage
#ifdef XRTRANSPORT_EXT_XR_FB_spatial_entity_storage
static void serialize(const XrSpaceEraseInfoFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).space), sizeof((*s).location)) + sizeof((*s).location);
}
#endif // XRTRANSPORT_EXT_XR_FB_spatial_entity_storage
#ifdef XRTRANSPORT_EXT_XR_FB_spatial_entity_storage
static void serialize(const XrEventDataSpaceSaveCompleteFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).requestId), sizeof((*s).result)) + sizeof((*s).result), sizeof((*s).space)) + sizeof((*s).space), sizeof((*s).uuid)) + sizeof((*s).uuid), sizeof((*s).location)) + sizeof((*s).location);
}
#endif // XRTRANSPORT_EXT_XR_FB_spatial_entity_storage
#ifdef XRTRANSPORT_EXT_XR_FB_spatial_entity_storage
static void serialize(const XrEventDataSpaceEraseCompleteFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).requestId), sizeof((*s).result)) + sizeof((*s).result), sizeof((*s).space)) + sizeof((*s).space), sizeof((*s).uuid)) + sizeof((*s).uuid), sizeof((*s).location)) + sizeof((*s).location);
}
#endif // XRTRANSPORT_EXT_XR_FB_spatial_entity_storage
#ifdef XRTRANSPORT_EXT_XR_FB_foveation_vulkan
static void serialize(const XrSwapchainImageFoveationVulkanFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).image), sizeof((*s).width)) + sizeof((*s).width), sizeof((*s).height)) + sizeof((*s).height);
}
#endif // XRTRANSPORT_EXT_XR_FB_foveation_vulkan
#ifdef XRTRANSPORT_EXT_XR_FB_swapchain_update_state_android_surface
static void serialize(const XrSwapchainStateAndroidSurfaceDimensionsFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).width), sizeof((*s).height)) + sizeof((*s).height);
}
#endif // XRTRANSPORT_EXT_XR_FB_swapchain_update_state_android_surface
#ifdef XRTRANSPORT_EXT_XR_FB_swapchain_update_state_opengl_es
static void serialize(const XrSwapchainStateSamplerOpenGLESFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(align(align(align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).minFilter), sizeof((*s).magFilter)) + sizeof((*s).magFilter), sizeof((*s).wrapModeS)) + sizeof((*s).wrapModeS), sizeof((*s).wrapModeT)) + sizeof((*s).wrapModeT), sizeof((*s).swizzleRed)) + sizeof((*s).swizzleRed), sizeof((*s).swizzleGreen)) + sizeof((*s).swizzleGreen), sizeof((*s).swizzleBlue)) + sizeof((*s).swizzleBlue), sizeof((*s).swizzleAlpha)) + sizeof((*s).swizzleAlpha), sizeof((*s).maxAnisotropy)) + sizeof((*s).maxAnisotropy), sizeof((*s).borderColor)) + sizeof((*s).borderColor);
}
#endif // XRTRANSPORT_EXT_XR_FB_swapchain_update_state_opengl_es
#ifdef XRTRANSPORT_EXT_XR_FB_swapchain_update_state_vulkan
static void serialize(const XrSwapchainStateSamplerVulkanFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(align(align(align(align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).minFilter), sizeof((*s).magFilter)) + sizeof((*s).magFilter), sizeof((*s).mipmapMode)) + sizeof((*s).mipmapMode), sizeof((*s).wrapModeS)) + sizeof((*s).wrapModeS), sizeof((*s).wrapModeT)) + sizeof((*s).wrapModeT), sizeof((*s).swizzleRed)) + sizeof((*s).swizzleRed), sizeof((*s).swizzleGreen)) + sizeof((*s).swizzleGreen), sizeof((*s).swizzleBlue)) + sizeof((*s).swizzleBlue), sizeof((*s).swizzleAlpha)) + sizeof((*s).swizzleAlpha), sizeof((*s).maxAnisotropy)) + sizeof((*s).maxAnisotropy), sizeof((*s).borderColor)) + sizeof((*s).borderColor);
}
#endif // XRTRANSPORT_EXT_XR_FB_swapchain_update_state_vulkan
#ifdef XRTRANSPORT_EXT_XR_FB_spatial_entity_sharing
static void serialize(const XrSpaceShareInfoFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).spaceCount), sizeof((*s).spaces)) + sizeof((*s).spaces), sizeof((*s).userCount)) + sizeof((*s).userCount), sizeof((*s).users)) + sizeof((*s).users);
}
#endif // XRTRANSPORT_EXT_XR_FB_spatial_entity_sharing
#ifdef XRTRANSPORT_EXT_XR_FB_spatial_entity_sharing
static void serialize(const XrEventDataSpaceShareCompleteFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).requestId), sizeof((*s).result)) + sizeof((*s).result);
}
#endif // XRTRANSPORT_EXT_XR_FB_spatial_entity_sharing
#ifdef XRTRANSPORT_EXT_XR_FB_space_warp
static void serialize(const XrCompositionLayerSpaceWarpInfoFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).layerFlags), sizeof((*s).motionVectorSubImage)) + sizeof((*s).motionVectorSubImage), sizeof((*s).appSpaceDeltaPose)) + sizeof((*s).appSpaceDeltaPose), sizeof((*s).depthSubImage)) + sizeof((*s).depthSubImage), sizeof((*s).minDepth)) + sizeof((*s).minDepth), sizeof((*s).maxDepth)) + sizeof((*s).maxDepth), sizeof((*s).nearZ)) + sizeof((*s).nearZ), sizeof((*s).farZ)) + sizeof((*s).farZ);
}
#endif // XRTRANSPORT_EXT_XR_FB_space_warp
#ifdef XRTRANSPORT_EXT_XR_FB_space_warp
static void serialize(const XrSystemSpaceWarpPropertiesFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).recommendedMotionVectorImageRectWidth), sizeof((*s).recommendedMotionVectorImageRectHeight)) + sizeof((*s).recommendedMotionVectorImageRectHeight);
}
#endif // XRTRANSPORT_EXT_XR_FB_space_warp
#ifdef XRTRANSPORT_EXT_XR_FB_haptic_amplitude_envelope
static void serialize(const XrHapticAmplitudeEnvelopeVibrationFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).duration), sizeof((*s).amplitudeCount)) + sizeof((*s).amplitudeCount), sizeof((*s).amplitudes)) + sizeof((*s).amplitudes);
}
#endif // XRTRANSPORT_EXT_XR_FB_haptic_amplitude_envelope
#ifdef XRTRANSPORT_EXT_XR_FB_scene
static void serialize(const XrSemanticLabelsFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).bufferCapacityInput), sizeof((*s).bufferCountOutput)) + sizeof((*s).bufferCountOutput), sizeof((*s).buffer)) + sizeof((*s).buffer);
}
#endif // XRTRANSPORT_EXT_XR_FB_scene
#ifdef XRTRANSPORT_EXT_XR_FB_scene
static void serialize(const XrRoomLayoutFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).floorUuid), sizeof((*s).ceilingUuid)) + sizeof((*s).ceilingUuid), sizeof((*s).wallUuidCapacityInput)) + sizeof((*s).wallUuidCapacityInput), sizeof((*s).wallUuidCountOutput)) + sizeof((*s).wallUuidCountOutput), sizeof((*s).wallUuids)) + sizeof((*s).wallUuids);
}
#endif // XRTRANSPORT_EXT_XR_FB_scene
#ifdef XRTRANSPORT_EXT_XR_FB_scene
static void serialize(const XrBoundary2DFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).vertexCapacityInput), sizeof((*s).vertexCountOutput)) + sizeof((*s).vertexCountOutput), sizeof((*s).vertices)) + sizeof((*s).vertices);
}
#endif // XRTRANSPORT_EXT_XR_FB_scene
#ifdef XRTRANSPORT_EXT_XR_FB_scene
static void serialize(const XrSemanticLabelsSupportInfoFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).flags), sizeof((*s).recognizedLabels)) + sizeof((*s).recognizedLabels);
}
#endif // XRTRANSPORT_EXT_XR_FB_scene
static void serialize(const XrDigitalLensControlALMALENCE* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).flags);
}
#ifdef XRTRANSPORT_EXT_XR_FB_scene_capture
static void serialize(const XrEventDataSceneCaptureCompleteFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).requestId), sizeof((*s).result)) + sizeof((*s).result);
}
#endif // XRTRANSPORT_EXT_XR_FB_scene_capture
#ifdef XRTRANSPORT_EXT_XR_FB_scene_capture
static void serialize(const XrSceneCaptureRequestInfoFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).requestByteCount), sizeof((*s).request)) + sizeof((*s).request);
}
#endif // XRTRANSPORT_EXT_XR_FB_scene_capture
#ifdef XRTRANSPORT_EXT_XR_FB_spatial_entity_container
static void serialize(const XrSpaceContainerFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).uuidCapacityInput), sizeof((*s).uuidCountOutput)) + sizeof((*s).uuidCountOutput), sizeof((*s).uuids)) + sizeof((*s).uuids);
}
#endif // XRTRANSPORT_EXT_XR_FB_spatial_entity_container
#ifdef XRTRANSPORT_EXT_XR_META_foveation_eye_tracked
static void serialize(const XrFoveationEyeTrackedProfileCreateInfoMETA* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).flags);
}
#endif // XRTRANSPORT_EXT_XR_META_foveation_eye_tracked
#ifdef XRTRANSPORT_EXT_XR_META_foveation_eye_tracked
static void serialize(const XrFoveationEyeTrackedStateMETA* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).foveationCenter), sizeof((*s).flags)) + sizeof((*s).flags);
}
#endif // XRTRANSPORT_EXT_XR_META_foveation_eye_tracked
#ifdef XRTRANSPORT_EXT_XR_META_foveation_eye_tracked
static void serialize(const XrSystemFoveationEyeTrackedPropertiesMETA* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).supportsFoveationEyeTracked);
}
#endif // XRTRANSPORT_EXT_XR_META_foveation_eye_tracked
#ifdef XRTRANSPORT_EXT_XR_FB_face_tracking
static void serialize(const XrFaceExpressionInfoFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).time);
}
#endif // XRTRANSPORT_EXT_XR_FB_face_tracking
#ifdef XRTRANSPORT_EXT_XR_FB_face_tracking
static void serialize(const XrSystemFaceTrackingPropertiesFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).supportsFaceTracking);
}
#endif // XRTRANSPORT_EXT_XR_FB_face_tracking
#ifdef XRTRANSPORT_EXT_XR_FB_face_tracking
static void serialize(const XrFaceTrackerCreateInfoFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).faceExpressionSet);
}
#endif // XRTRANSPORT_EXT_XR_FB_face_tracking
#ifdef XRTRANSPORT_EXT_XR_FB_face_tracking
static void serialize(const XrFaceExpressionWeightsFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).weightCount), sizeof((*s).weights)) + sizeof((*s).weights), sizeof((*s).confidenceCount)) + sizeof((*s).confidenceCount), sizeof((*s).confidences)) + sizeof((*s).confidences), sizeof((*s).status)) + sizeof((*s).status), sizeof((*s).time)) + sizeof((*s).time);
}
#endif // XRTRANSPORT_EXT_XR_FB_face_tracking
#ifdef XRTRANSPORT_EXT_XR_FB_eye_tracking_social
static void serialize(const XrEyeTrackerCreateInfoFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).next);
}
#endif // XRTRANSPORT_EXT_XR_FB_eye_tracking_social
#ifdef XRTRANSPORT_EXT_XR_FB_eye_tracking_social
static void serialize(const XrEyeGazesInfoFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).baseSpace), sizeof((*s).time)) + sizeof((*s).time);
}
#endif // XRTRANSPORT_EXT_XR_FB_eye_tracking_social
#ifdef XRTRANSPORT_EXT_XR_FB_eye_tracking_social
static void serialize(const XrEyeGazesFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).gaze), sizeof((*s).time)) + sizeof((*s).time);
}
#endif // XRTRANSPORT_EXT_XR_FB_eye_tracking_social
#ifdef XRTRANSPORT_EXT_XR_FB_eye_tracking_social
static void serialize(const XrSystemEyeTrackingPropertiesFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).supportsEyeTracking);
}
#endif // XRTRANSPORT_EXT_XR_FB_eye_tracking_social
#ifdef XRTRANSPORT_EXT_XR_FB_passthrough_keyboard_hands
static void serialize(const XrPassthroughKeyboardHandsIntensityFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).leftHandIntensity), sizeof((*s).rightHandIntensity)) + sizeof((*s).rightHandIntensity);
}
#endif // XRTRANSPORT_EXT_XR_FB_passthrough_keyboard_hands
#ifdef XRTRANSPORT_EXT_XR_FB_composition_layer_settings
static void serialize(const XrCompositionLayerSettingsFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).layerFlags);
}
#endif // XRTRANSPORT_EXT_XR_FB_composition_layer_settings
#ifdef XRTRANSPORT_EXT_XR_FB_haptic_pcm
static void serialize(const XrHapticPcmVibrationFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).bufferSize), sizeof((*s).buffer)) + sizeof((*s).buffer), sizeof((*s).sampleRate)) + sizeof((*s).sampleRate), sizeof((*s).append)) + sizeof((*s).append), sizeof((*s).samplesConsumed)) + sizeof((*s).samplesConsumed);
}
#endif // XRTRANSPORT_EXT_XR_FB_haptic_pcm
#ifdef XRTRANSPORT_EXT_XR_FB_haptic_pcm
static void serialize(const XrDevicePcmSampleRateStateFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).sampleRate);
}
#endif // XRTRANSPORT_EXT_XR_FB_haptic_pcm
#ifdef XRTRANSPORT_EXT_XR_EXT_frame_synthesis
static void serialize(const XrFrameSynthesisInfoEXT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(align(align(align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).layerFlags), sizeof((*s).motionVectorSubImage)) + sizeof((*s).motionVectorSubImage), sizeof((*s).motionVectorScale)) + sizeof((*s).motionVectorScale), sizeof((*s).motionVectorOffset)) + sizeof((*s).motionVectorOffset), sizeof((*s).appSpaceDeltaPose)) + sizeof((*s).appSpaceDeltaPose), sizeof((*s).depthSubImage)) + sizeof((*s).depthSubImage), sizeof((*s).minDepth)) + sizeof((*s).minDepth), sizeof((*s).maxDepth)) + sizeof((*s).maxDepth), sizeof((*s).nearZ)) + sizeof((*s).nearZ), sizeof((*s).farZ)) + sizeof((*s).farZ);
}
#endif // XRTRANSPORT_EXT_XR_EXT_frame_synthesis
#ifdef XRTRANSPORT_EXT_XR_EXT_frame_synthesis
static void serialize(const XrFrameSynthesisConfigViewEXT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).recommendedMotionVectorImageRectWidth), sizeof((*s).recommendedMotionVectorImageRectHeight)) + sizeof((*s).recommendedMotionVectorImageRectHeight);
}
#endif // XRTRANSPORT_EXT_XR_EXT_frame_synthesis
#ifdef XRTRANSPORT_EXT_XR_FB_composition_layer_depth_test
static void serialize(const XrCompositionLayerDepthTestFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).depthMask), sizeof((*s).compareOp)) + sizeof((*s).compareOp);
}
#endif // XRTRANSPORT_EXT_XR_FB_composition_layer_depth_test
#ifdef XRTRANSPORT_EXT_XR_META_local_dimming
static void serialize(const XrLocalDimmingFrameEndInfoMETA* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).localDimmingMode);
}
#endif // XRTRANSPORT_EXT_XR_META_local_dimming
#ifdef XRTRANSPORT_EXT_XR_META_passthrough_preferences
static void serialize(const XrPassthroughPreferencesMETA* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).flags);
}
#endif // XRTRANSPORT_EXT_XR_META_passthrough_preferences
#ifdef XRTRANSPORT_EXT_XR_META_virtual_keyboard
static void serialize(const XrSystemVirtualKeyboardPropertiesMETA* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).supportsVirtualKeyboard);
}
#endif // XRTRANSPORT_EXT_XR_META_virtual_keyboard
#ifdef XRTRANSPORT_EXT_XR_META_virtual_keyboard
static void serialize(const XrVirtualKeyboardCreateInfoMETA* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).next);
}
#endif // XRTRANSPORT_EXT_XR_META_virtual_keyboard
#ifdef XRTRANSPORT_EXT_XR_META_virtual_keyboard
static void serialize(const XrVirtualKeyboardSpaceCreateInfoMETA* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).locationType), sizeof((*s).space)) + sizeof((*s).space), sizeof((*s).poseInSpace)) + sizeof((*s).poseInSpace);
}
#endif // XRTRANSPORT_EXT_XR_META_virtual_keyboard
#ifdef XRTRANSPORT_EXT_XR_META_virtual_keyboard
static void serialize(const XrVirtualKeyboardLocationInfoMETA* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).locationType), sizeof((*s).space)) + sizeof((*s).space), sizeof((*s).poseInSpace)) + sizeof((*s).poseInSpace), sizeof((*s).scale)) + sizeof((*s).scale);
}
#endif // XRTRANSPORT_EXT_XR_META_virtual_keyboard
#ifdef XRTRANSPORT_EXT_XR_META_virtual_keyboard
static void serialize(const XrVirtualKeyboardModelVisibilitySetInfoMETA* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).visible);
}
#endif // XRTRANSPORT_EXT_XR_META_virtual_keyboard
#ifdef XRTRANSPORT_EXT_XR_META_virtual_keyboard
static void serialize(const XrVirtualKeyboardAnimationStateMETA* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).animationIndex), sizeof((*s).fraction)) + sizeof((*s).fraction);
}
#endif // XRTRANSPORT_EXT_XR_META_virtual_keyboard
#ifdef XRTRANSPORT_EXT_XR_META_virtual_keyboard
static void serialize(const XrVirtualKeyboardModelAnimationStatesMETA* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).stateCapacityInput), sizeof((*s).stateCountOutput)) + sizeof((*s).stateCountOutput), sizeof((*s).states)) + sizeof((*s).states);
}
#endif // XRTRANSPORT_EXT_XR_META_virtual_keyboard
#ifdef XRTRANSPORT_EXT_XR_META_virtual_keyboard
static void serialize(const XrVirtualKeyboardTextureDataMETA* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).textureWidth), sizeof((*s).textureHeight)) + sizeof((*s).textureHeight), sizeof((*s).bufferCapacityInput)) + sizeof((*s).bufferCapacityInput), sizeof((*s).bufferCountOutput)) + sizeof((*s).bufferCountOutput), sizeof((*s).buffer)) + sizeof((*s).buffer);
}
#endif // XRTRANSPORT_EXT_XR_META_virtual_keyboard
#ifdef XRTRANSPORT_EXT_XR_META_virtual_keyboard
static void serialize(const XrVirtualKeyboardInputInfoMETA* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).inputSource), sizeof((*s).inputSpace)) + sizeof((*s).inputSpace), sizeof((*s).inputPoseInSpace)) + sizeof((*s).inputPoseInSpace), sizeof((*s).inputState)) + sizeof((*s).inputState);
}
#endif // XRTRANSPORT_EXT_XR_META_virtual_keyboard
#ifdef XRTRANSPORT_EXT_XR_META_virtual_keyboard
static void serialize(const XrVirtualKeyboardTextContextChangeInfoMETA* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).textContext);
}
#endif // XRTRANSPORT_EXT_XR_META_virtual_keyboard
#ifdef XRTRANSPORT_EXT_XR_META_virtual_keyboard
static void serialize(const XrEventDataVirtualKeyboardCommitTextMETA* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).keyboard), sizeof((*s).text)) + sizeof((*s).text);
}
#endif // XRTRANSPORT_EXT_XR_META_virtual_keyboard
#ifdef XRTRANSPORT_EXT_XR_META_virtual_keyboard
static void serialize(const XrEventDataVirtualKeyboardBackspaceMETA* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).keyboard);
}
#endif // XRTRANSPORT_EXT_XR_META_virtual_keyboard
#ifdef XRTRANSPORT_EXT_XR_META_virtual_keyboard
static void serialize(const XrEventDataVirtualKeyboardEnterMETA* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).keyboard);
}
#endif // XRTRANSPORT_EXT_XR_META_virtual_keyboard
#ifdef XRTRANSPORT_EXT_XR_META_virtual_keyboard
static void serialize(const XrEventDataVirtualKeyboardShownMETA* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).keyboard);
}
#endif // XRTRANSPORT_EXT_XR_META_virtual_keyboard
#ifdef XRTRANSPORT_EXT_XR_META_virtual_keyboard
static void serialize(const XrEventDataVirtualKeyboardHiddenMETA* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).keyboard);
}
#endif // XRTRANSPORT_EXT_XR_META_virtual_keyboard
#ifdef XRTRANSPORT_EXT_XR_OCULUS_external_camera
static void serialize(const XrExternalCameraOCULUS* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).name), sizeof((*s).intrinsics)) + sizeof((*s).intrinsics), sizeof((*s).extrinsics)) + sizeof((*s).extrinsics);
}
#endif // XRTRANSPORT_EXT_XR_OCULUS_external_camera
#ifdef XRTRANSPORT_EXT_XR_META_vulkan_swapchain_create_info
static void serialize(const XrVulkanSwapchainCreateInfoMETA* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).additionalCreateFlags), sizeof((*s).additionalUsageFlags)) + sizeof((*s).additionalUsageFlags);
}
#endif // XRTRANSPORT_EXT_XR_META_vulkan_swapchain_create_info
#ifdef XRTRANSPORT_EXT_XR_META_performance_metrics
static void serialize(const XrPerformanceMetricsStateMETA* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).enabled);
}
#endif // XRTRANSPORT_EXT_XR_META_performance_metrics
#ifdef XRTRANSPORT_EXT_XR_META_performance_metrics
static void serialize(const XrPerformanceMetricsCounterMETA* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).counterFlags), sizeof((*s).counterUnit)) + sizeof((*s).counterUnit), sizeof((*s).uintValue)) + sizeof((*s).uintValue), sizeof((*s).floatValue)) + sizeof((*s).floatValue);
}
#endif // XRTRANSPORT_EXT_XR_META_performance_metrics
#ifdef XRTRANSPORT_EXT_XR_FB_spatial_entity_storage_batch
static void serialize(const XrSpaceListSaveInfoFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).spaceCount), sizeof((*s).spaces)) + sizeof((*s).spaces), sizeof((*s).location)) + sizeof((*s).location);
}
#endif // XRTRANSPORT_EXT_XR_FB_spatial_entity_storage_batch
#ifdef XRTRANSPORT_EXT_XR_FB_spatial_entity_storage_batch
static void serialize(const XrEventDataSpaceListSaveCompleteFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).requestId), sizeof((*s).result)) + sizeof((*s).result);
}
#endif // XRTRANSPORT_EXT_XR_FB_spatial_entity_storage_batch
#ifdef XRTRANSPORT_EXT_XR_FB_spatial_entity_user
static void serialize(const XrSpaceUserCreateInfoFB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).userId);
}
#endif // XRTRANSPORT_EXT_XR_FB_spatial_entity_user
#ifdef XRTRANSPORT_EXT_XR_META_headset_id
static void serialize(const XrSystemHeadsetIdPropertiesMETA* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).id);
}
#endif // XRTRANSPORT_EXT_XR_META_headset_id
#ifdef XRTRANSPORT_EXT_XR_META_recommended_layer_resolution
static void serialize(const XrRecommendedLayerResolutionMETA* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).recommendedImageDimensions), sizeof((*s).isValid)) + sizeof((*s).isValid);
}
#endif // XRTRANSPORT_EXT_XR_META_recommended_layer_resolution
#ifdef XRTRANSPORT_EXT_XR_META_recommended_layer_resolution
static void serialize(const XrRecommendedLayerResolutionGetInfoMETA* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).layer), sizeof((*s).predictedDisplayTime)) + sizeof((*s).predictedDisplayTime);
}
#endif // XRTRANSPORT_EXT_XR_META_recommended_layer_resolution
#ifdef XRTRANSPORT_EXT_XR_META_passthrough_color_lut
static void serialize(const XrSystemPassthroughColorLutPropertiesMETA* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).maxColorLutResolution);
}
#endif // XRTRANSPORT_EXT_XR_META_passthrough_color_lut
#ifdef XRTRANSPORT_EXT_XR_META_passthrough_color_lut
static void serialize(const XrPassthroughColorLutCreateInfoMETA* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).channels), sizeof((*s).resolution)) + sizeof((*s).resolution), sizeof((*s).data)) + sizeof((*s).data);
}
#endif // XRTRANSPORT_EXT_XR_META_passthrough_color_lut
#ifdef XRTRANSPORT_EXT_XR_META_passthrough_color_lut
static void serialize(const XrPassthroughColorLutUpdateInfoMETA* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).data);
}
#endif // XRTRANSPORT_EXT_XR_META_passthrough_color_lut
#ifdef XRTRANSPORT_EXT_XR_META_passthrough_color_lut
static void serialize(const XrPassthroughColorMapLutMETA* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).colorLut), sizeof((*s).weight)) + sizeof((*s).weight);
}
#endif // XRTRANSPORT_EXT_XR_META_passthrough_color_lut
#ifdef XRTRANSPORT_EXT_XR_META_passthrough_color_lut
static void serialize(const XrPassthroughColorMapInterpolatedLutMETA* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).sourceColorLut), sizeof((*s).targetColorLut)) + sizeof((*s).targetColorLut), sizeof((*s).weight)) + sizeof((*s).weight);
}
#endif // XRTRANSPORT_EXT_XR_META_passthrough_color_lut
#ifdef XRTRANSPORT_EXT_XR_META_spatial_entity_mesh
static void serialize(const XrSpaceTriangleMeshGetInfoMETA* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).next);
}
#endif // XRTRANSPORT_EXT_XR_META_spatial_entity_mesh
#ifdef XRTRANSPORT_EXT_XR_META_spatial_entity_mesh
static void serialize(const XrSpaceTriangleMeshMETA* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).vertexCapacityInput), sizeof((*s).vertexCountOutput)) + sizeof((*s).vertexCountOutput), sizeof((*s).vertices)) + sizeof((*s).vertices), sizeof((*s).indexCapacityInput)) + sizeof((*s).indexCapacityInput), sizeof((*s).indexCountOutput)) + sizeof((*s).indexCountOutput), sizeof((*s).indices)) + sizeof((*s).indices);
}
#endif // XRTRANSPORT_EXT_XR_META_spatial_entity_mesh
#ifdef XRTRANSPORT_EXT_XR_META_body_tracking_full_body
static void serialize(const XrSystemPropertiesBodyTrackingFullBodyMETA* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).supportsFullBodyTracking);
}
#endif // XRTRANSPORT_EXT_XR_META_body_tracking_full_body
#ifdef XRTRANSPORT_EXT_XR_META_passthrough_layer_resumed_event
static void serialize(const XrEventDataPassthroughLayerResumedMETA* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).layer);
}
#endif // XRTRANSPORT_EXT_XR_META_passthrough_layer_resumed_event
#ifdef XRTRANSPORT_EXT_XR_FB_face_tracking2
static void serialize(const XrSystemFaceTrackingProperties2FB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).supportsVisualFaceTracking), sizeof((*s).supportsAudioFaceTracking)) + sizeof((*s).supportsAudioFaceTracking);
}
#endif // XRTRANSPORT_EXT_XR_FB_face_tracking2
#ifdef XRTRANSPORT_EXT_XR_FB_face_tracking2
static void serialize(const XrFaceTrackerCreateInfo2FB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).faceExpressionSet), sizeof((*s).requestedDataSourceCount)) + sizeof((*s).requestedDataSourceCount), sizeof((*s).requestedDataSources)) + sizeof((*s).requestedDataSources);
}
#endif // XRTRANSPORT_EXT_XR_FB_face_tracking2
#ifdef XRTRANSPORT_EXT_XR_FB_face_tracking2
static void serialize(const XrFaceExpressionInfo2FB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).time);
}
#endif // XRTRANSPORT_EXT_XR_FB_face_tracking2
#ifdef XRTRANSPORT_EXT_XR_FB_face_tracking2
static void serialize(const XrFaceExpressionWeights2FB* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).weightCount), sizeof((*s).weights)) + sizeof((*s).weights), sizeof((*s).confidenceCount)) + sizeof((*s).confidenceCount), sizeof((*s).confidences)) + sizeof((*s).confidences), sizeof((*s).isValid)) + sizeof((*s).isValid), sizeof((*s).isEyeFollowingBlendshapesValid)) + sizeof((*s).isEyeFollowingBlendshapesValid), sizeof((*s).dataSource)) + sizeof((*s).dataSource), sizeof((*s).time)) + sizeof((*s).time);
}
#endif // XRTRANSPORT_EXT_XR_FB_face_tracking2
#ifdef XRTRANSPORT_EXT_XR_META_spatial_entity_sharing
static void serialize(const XrSystemSpatialEntitySharingPropertiesMETA* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).supportsSpatialEntitySharing);
}
#endif // XRTRANSPORT_EXT_XR_META_spatial_entity_sharing
#ifdef XRTRANSPORT_EXT_XR_META_spatial_entity_sharing
static void serialize(const XrShareSpacesInfoMETA* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).spaceCount), sizeof((*s).spaces)) + sizeof((*s).spaces), sizeof((*s).recipientInfo)) + sizeof((*s).recipientInfo);
}
#endif // XRTRANSPORT_EXT_XR_META_spatial_entity_sharing
#ifdef XRTRANSPORT_EXT_XR_META_spatial_entity_sharing
static void serialize(const XrEventDataShareSpacesCompleteMETA* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).requestId), sizeof((*s).result)) + sizeof((*s).result);
}
#endif // XRTRANSPORT_EXT_XR_META_spatial_entity_sharing
#ifdef XRTRANSPORT_EXT_XR_META_environment_depth
static void serialize(const XrEnvironmentDepthProviderCreateInfoMETA* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).createFlags);
}
#endif // XRTRANSPORT_EXT_XR_META_environment_depth
#ifdef XRTRANSPORT_EXT_XR_META_environment_depth
static void serialize(const XrEnvironmentDepthSwapchainCreateInfoMETA* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).createFlags);
}
#endif // XRTRANSPORT_EXT_XR_META_environment_depth
#ifdef XRTRANSPORT_EXT_XR_META_environment_depth
static void serialize(const XrEnvironmentDepthSwapchainStateMETA* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).width), sizeof((*s).height)) + sizeof((*s).height);
}
#endif // XRTRANSPORT_EXT_XR_META_environment_depth
#ifdef XRTRANSPORT_EXT_XR_META_environment_depth
static void serialize(const XrEnvironmentDepthImageAcquireInfoMETA* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).space), sizeof((*s).displayTime)) + sizeof((*s).displayTime);
}
#endif // XRTRANSPORT_EXT_XR_META_environment_depth
#ifdef XRTRANSPORT_EXT_XR_META_environment_depth
static void serialize(const XrEnvironmentDepthImageViewMETA* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).fov), sizeof((*s).pose)) + sizeof((*s).pose);
}
#endif // XRTRANSPORT_EXT_XR_META_environment_depth
#ifdef XRTRANSPORT_EXT_XR_META_environment_depth
static void serialize(const XrEnvironmentDepthImageMETA* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).swapchainIndex), sizeof((*s).nearZ)) + sizeof((*s).nearZ), sizeof((*s).farZ)) + sizeof((*s).farZ), sizeof((*s).views)) + sizeof((*s).views);
}
#endif // XRTRANSPORT_EXT_XR_META_environment_depth
#ifdef XRTRANSPORT_EXT_XR_META_environment_depth
static void serialize(const XrEnvironmentDepthHandRemovalSetInfoMETA* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).enabled);
}
#endif // XRTRANSPORT_EXT_XR_META_environment_depth
#ifdef XRTRANSPORT_EXT_XR_META_environment_depth
static void serialize(const XrSystemEnvironmentDepthPropertiesMETA* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).supportsEnvironmentDepth), sizeof((*s).supportsHandRemoval)) + sizeof((*s).supportsHandRemoval);
}
#endif // XRTRANSPORT_EXT_XR_META_environment_depth
#ifdef XRTRANSPORT_EXT_XR_HTC_passthrough
static void serialize(const XrPassthroughCreateInfoHTC* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).form);
}
#endif // XRTRANSPORT_EXT_XR_HTC_passthrough
#ifdef XRTRANSPORT_EXT_XR_HTC_passthrough
static void serialize(const XrPassthroughColorHTC* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).alpha);
}
#endif // XRTRANSPORT_EXT_XR_HTC_passthrough
#ifdef XRTRANSPORT_EXT_XR_HTC_passthrough
static void serialize(const XrPassthroughMeshTransformInfoHTC* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).vertexCount), sizeof((*s).vertices)) + sizeof((*s).vertices), sizeof((*s).indexCount)) + sizeof((*s).indexCount), sizeof((*s).indices)) + sizeof((*s).indices), sizeof((*s).baseSpace)) + sizeof((*s).baseSpace), sizeof((*s).time)) + sizeof((*s).time), sizeof((*s).pose)) + sizeof((*s).pose), sizeof((*s).scale)) + sizeof((*s).scale);
}
#endif // XRTRANSPORT_EXT_XR_HTC_passthrough
#ifdef XRTRANSPORT_EXT_XR_HTC_passthrough
static void serialize(const XrCompositionLayerPassthroughHTC* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).layerFlags), sizeof((*s).space)) + sizeof((*s).space), sizeof((*s).passthrough)) + sizeof((*s).passthrough), sizeof((*s).color)) + sizeof((*s).color);
}
#endif // XRTRANSPORT_EXT_XR_HTC_passthrough
#ifdef XRTRANSPORT_EXT_XR_HTC_foveation
static void serialize(const XrFoveationApplyInfoHTC* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).mode), sizeof((*s).subImageCount)) + sizeof((*s).subImageCount), sizeof((*s).subImages)) + sizeof((*s).subImages);
}
#endif // XRTRANSPORT_EXT_XR_HTC_foveation
#ifdef XRTRANSPORT_EXT_XR_HTC_foveation
static void serialize(const XrFoveationDynamicModeInfoHTC* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).dynamicFlags);
}
#endif // XRTRANSPORT_EXT_XR_HTC_foveation
#ifdef XRTRANSPORT_EXT_XR_HTC_foveation
static void serialize(const XrFoveationCustomModeInfoHTC* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).configCount), sizeof((*s).configs)) + sizeof((*s).configs);
}
#endif // XRTRANSPORT_EXT_XR_HTC_foveation
#ifdef XRTRANSPORT_EXT_XR_HTC_anchor
static void serialize(const XrSystemAnchorPropertiesHTC* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).supportsAnchor);
}
#endif // XRTRANSPORT_EXT_XR_HTC_anchor
#ifdef XRTRANSPORT_EXT_XR_HTC_anchor
static void serialize(const XrSpatialAnchorCreateInfoHTC* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).space), sizeof((*s).poseInSpace)) + sizeof((*s).poseInSpace), sizeof((*s).name)) + sizeof((*s).name);
}
#endif // XRTRANSPORT_EXT_XR_HTC_anchor
#ifdef XRTRANSPORT_EXT_XR_HTC_body_tracking
static void serialize(const XrSystemBodyTrackingPropertiesHTC* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).supportsBodyTracking);
}
#endif // XRTRANSPORT_EXT_XR_HTC_body_tracking
#ifdef XRTRANSPORT_EXT_XR_HTC_body_tracking
static void serialize(const XrBodyTrackerCreateInfoHTC* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).bodyJointSet);
}
#endif // XRTRANSPORT_EXT_XR_HTC_body_tracking
#ifdef XRTRANSPORT_EXT_XR_HTC_body_tracking
static void serialize(const XrBodyJointsLocateInfoHTC* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).baseSpace), sizeof((*s).time)) + sizeof((*s).time);
}
#endif // XRTRANSPORT_EXT_XR_HTC_body_tracking
#ifdef XRTRANSPORT_EXT_XR_HTC_body_tracking
static void serialize(const XrBodyJointLocationsHTC* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).combinedLocationFlags), sizeof((*s).confidenceLevel)) + sizeof((*s).confidenceLevel), sizeof((*s).jointLocationCount)) + sizeof((*s).jointLocationCount), sizeof((*s).jointLocations)) + sizeof((*s).jointLocations), sizeof((*s).skeletonGenerationId)) + sizeof((*s).skeletonGenerationId);
}
#endif // XRTRANSPORT_EXT_XR_HTC_body_tracking
#ifdef XRTRANSPORT_EXT_XR_HTC_body_tracking
static void serialize(const XrBodySkeletonHTC* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).jointCount), sizeof((*s).joints)) + sizeof((*s).joints);
}
#endif // XRTRANSPORT_EXT_XR_HTC_body_tracking
#ifdef XRTRANSPORT_EXT_XR_EXT_active_action_set_priority
static void serialize(const XrActiveActionSetPrioritiesEXT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).actionSetPriorityCount), sizeof((*s).actionSetPriorities)) + sizeof((*s).actionSetPriorities);
}
#endif // XRTRANSPORT_EXT_XR_EXT_active_action_set_priority
#ifdef XRTRANSPORT_EXT_XR_MNDX_force_feedback_curl
static void serialize(const XrSystemForceFeedbackCurlPropertiesMNDX* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).supportsForceFeedbackCurl);
}
#endif // XRTRANSPORT_EXT_XR_MNDX_force_feedback_curl
#ifdef XRTRANSPORT_EXT_XR_MNDX_force_feedback_curl
static void serialize(const XrForceFeedbackCurlApplyLocationsMNDX* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).locationCount), sizeof((*s).locations)) + sizeof((*s).locations);
}
#endif // XRTRANSPORT_EXT_XR_MNDX_force_feedback_curl
#ifdef XRTRANSPORT_EXT_XR_BD_body_tracking
static void serialize(const XrBodyTrackerCreateInfoBD* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).jointSet);
}
#endif // XRTRANSPORT_EXT_XR_BD_body_tracking
#ifdef XRTRANSPORT_EXT_XR_BD_body_tracking
static void serialize(const XrBodyJointsLocateInfoBD* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).baseSpace), sizeof((*s).time)) + sizeof((*s).time);
}
#endif // XRTRANSPORT_EXT_XR_BD_body_tracking
#ifdef XRTRANSPORT_EXT_XR_BD_body_tracking
static void serialize(const XrBodyJointLocationsBD* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).allJointPosesTracked), sizeof((*s).jointLocationCount)) + sizeof((*s).jointLocationCount), sizeof((*s).jointLocations)) + sizeof((*s).jointLocations);
}
#endif // XRTRANSPORT_EXT_XR_BD_body_tracking
#ifdef XRTRANSPORT_EXT_XR_BD_body_tracking
static void serialize(const XrSystemBodyTrackingPropertiesBD* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).supportsBodyTracking);
}
#endif // XRTRANSPORT_EXT_XR_BD_body_tracking
#ifdef XRTRANSPORT_EXT_XR_BD_spatial_sensing
static void serialize(const XrSystemSpatialSensingPropertiesBD* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).supportsSpatialSensing);
}
#endif // XRTRANSPORT_EXT_XR_BD_spatial_sensing
#ifdef XRTRANSPORT_EXT_XR_BD_spatial_sensing
static void serialize(const XrSpatialEntityComponentGetInfoBD* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).entityId), sizeof((*s).componentType)) + sizeof((*s).componentType);
}
#endif // XRTRANSPORT_EXT_XR_BD_spatial_sensing
#ifdef XRTRANSPORT_EXT_XR_BD_spatial_sensing
static void serialize(const XrSpatialEntityLocationGetInfoBD* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).baseSpace);
}
#endif // XRTRANSPORT_EXT_XR_BD_spatial_sensing
#ifdef XRTRANSPORT_EXT_XR_BD_spatial_sensing
static void serialize(const XrSpatialEntityComponentDataLocationBD* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).location);
}
#endif // XRTRANSPORT_EXT_XR_BD_spatial_sensing
#ifdef XRTRANSPORT_EXT_XR_BD_spatial_sensing
static void serialize(const XrSpatialEntityComponentDataSemanticBD* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).labelCapacityInput), sizeof((*s).labelCountOutput)) + sizeof((*s).labelCountOutput), sizeof((*s).labels)) + sizeof((*s).labels);
}
#endif // XRTRANSPORT_EXT_XR_BD_spatial_sensing
#ifdef XRTRANSPORT_EXT_XR_BD_spatial_sensing
static void serialize(const XrSpatialEntityComponentDataBoundingBox2DBD* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).boundingBox2D);
}
#endif // XRTRANSPORT_EXT_XR_BD_spatial_sensing
#ifdef XRTRANSPORT_EXT_XR_BD_spatial_sensing
static void serialize(const XrSpatialEntityComponentDataPolygonBD* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).vertexCapacityInput), sizeof((*s).vertexCountOutput)) + sizeof((*s).vertexCountOutput), sizeof((*s).vertices)) + sizeof((*s).vertices);
}
#endif // XRTRANSPORT_EXT_XR_BD_spatial_sensing
#ifdef XRTRANSPORT_EXT_XR_BD_spatial_sensing
static void serialize(const XrSpatialEntityComponentDataBoundingBox3DBD* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).boundingBox3D);
}
#endif // XRTRANSPORT_EXT_XR_BD_spatial_sensing
#ifdef XRTRANSPORT_EXT_XR_BD_spatial_sensing
static void serialize(const XrSpatialEntityComponentDataTriangleMeshBD* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).vertexCapacityInput), sizeof((*s).vertexCountOutput)) + sizeof((*s).vertexCountOutput), sizeof((*s).vertices)) + sizeof((*s).vertices), sizeof((*s).indexCapacityInput)) + sizeof((*s).indexCapacityInput), sizeof((*s).indexCountOutput)) + sizeof((*s).indexCountOutput), sizeof((*s).indices)) + sizeof((*s).indices);
}
#endif // XRTRANSPORT_EXT_XR_BD_spatial_sensing
#ifdef XRTRANSPORT_EXT_XR_BD_spatial_sensing
static void serialize(const XrSenseDataProviderCreateInfoBD* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).providerType);
}
#endif // XRTRANSPORT_EXT_XR_BD_spatial_sensing
#ifdef XRTRANSPORT_EXT_XR_BD_spatial_sensing
static void serialize(const XrSenseDataProviderStartInfoBD* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).next);
}
#endif // XRTRANSPORT_EXT_XR_BD_spatial_sensing
#ifdef XRTRANSPORT_EXT_XR_BD_spatial_sensing
static void serialize(const XrEventDataSenseDataProviderStateChangedBD* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).provider), sizeof((*s).newState)) + sizeof((*s).newState);
}
#endif // XRTRANSPORT_EXT_XR_BD_spatial_sensing
#ifdef XRTRANSPORT_EXT_XR_BD_spatial_sensing
static void serialize(const XrEventDataSenseDataUpdatedBD* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).provider);
}
#endif // XRTRANSPORT_EXT_XR_BD_spatial_sensing
#ifdef XRTRANSPORT_EXT_XR_BD_spatial_sensing
static void serialize(const XrSenseDataQueryInfoBD* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).next);
}
#endif // XRTRANSPORT_EXT_XR_BD_spatial_sensing
#ifdef XRTRANSPORT_EXT_XR_BD_spatial_sensing
static void serialize(const XrSenseDataQueryCompletionBD* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).futureResult), sizeof((*s).snapshot)) + sizeof((*s).snapshot);
}
#endif // XRTRANSPORT_EXT_XR_BD_spatial_sensing
#ifdef XRTRANSPORT_EXT_XR_BD_spatial_sensing
static void serialize(const XrSenseDataFilterUuidBD* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).uuidCount), sizeof((*s).uuids)) + sizeof((*s).uuids);
}
#endif // XRTRANSPORT_EXT_XR_BD_spatial_sensing
#ifdef XRTRANSPORT_EXT_XR_BD_spatial_sensing
static void serialize(const XrSenseDataFilterSemanticBD* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).labelCount), sizeof((*s).labels)) + sizeof((*s).labels);
}
#endif // XRTRANSPORT_EXT_XR_BD_spatial_sensing
#ifdef XRTRANSPORT_EXT_XR_BD_spatial_sensing
static void serialize(const XrQueriedSenseDataGetInfoBD* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).next);
}
#endif // XRTRANSPORT_EXT_XR_BD_spatial_sensing
#ifdef XRTRANSPORT_EXT_XR_BD_spatial_sensing
static void serialize(const XrQueriedSenseDataBD* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).stateCapacityInput), sizeof((*s).stateCountOutput)) + sizeof((*s).stateCountOutput), sizeof((*s).states)) + sizeof((*s).states);
}
#endif // XRTRANSPORT_EXT_XR_BD_spatial_sensing
#ifdef XRTRANSPORT_EXT_XR_BD_spatial_sensing
static void serialize(const XrSpatialEntityStateBD* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).entityId), sizeof((*s).lastUpdateTime)) + sizeof((*s).lastUpdateTime), sizeof((*s).uuid)) + sizeof((*s).uuid);
}
#endif // XRTRANSPORT_EXT_XR_BD_spatial_sensing
#ifdef XRTRANSPORT_EXT_XR_BD_spatial_sensing
static void serialize(const XrSpatialEntityAnchorCreateInfoBD* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).snapshot), sizeof((*s).entityId)) + sizeof((*s).entityId);
}
#endif // XRTRANSPORT_EXT_XR_BD_spatial_sensing
#ifdef XRTRANSPORT_EXT_XR_BD_spatial_sensing
static void serialize(const XrAnchorSpaceCreateInfoBD* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).anchor), sizeof((*s).poseInAnchorSpace)) + sizeof((*s).poseInAnchorSpace);
}
#endif // XRTRANSPORT_EXT_XR_BD_spatial_sensing
#ifdef XRTRANSPORT_EXT_XR_BD_spatial_anchor
static void serialize(const XrSystemSpatialAnchorPropertiesBD* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).supportsSpatialAnchor);
}
#endif // XRTRANSPORT_EXT_XR_BD_spatial_anchor
#ifdef XRTRANSPORT_EXT_XR_BD_spatial_anchor
static void serialize(const XrSpatialAnchorCreateInfoBD* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).space), sizeof((*s).pose)) + sizeof((*s).pose), sizeof((*s).time)) + sizeof((*s).time);
}
#endif // XRTRANSPORT_EXT_XR_BD_spatial_anchor
#ifdef XRTRANSPORT_EXT_XR_BD_spatial_anchor
static void serialize(const XrSpatialAnchorCreateCompletionBD* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).futureResult), sizeof((*s).anchor)) + sizeof((*s).anchor), sizeof((*s).uuid)) + sizeof((*s).uuid);
}
#endif // XRTRANSPORT_EXT_XR_BD_spatial_anchor
#ifdef XRTRANSPORT_EXT_XR_BD_spatial_anchor
static void serialize(const XrSpatialAnchorPersistInfoBD* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).location), sizeof((*s).anchor)) + sizeof((*s).anchor);
}
#endif // XRTRANSPORT_EXT_XR_BD_spatial_anchor
#ifdef XRTRANSPORT_EXT_XR_BD_spatial_anchor
static void serialize(const XrSpatialAnchorUnpersistInfoBD* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).location), sizeof((*s).anchor)) + sizeof((*s).anchor);
}
#endif // XRTRANSPORT_EXT_XR_BD_spatial_anchor
#ifdef XRTRANSPORT_EXT_XR_BD_spatial_anchor_sharing
static void serialize(const XrSystemSpatialAnchorSharingPropertiesBD* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).supportsSpatialAnchorSharing);
}
#endif // XRTRANSPORT_EXT_XR_BD_spatial_anchor_sharing
#ifdef XRTRANSPORT_EXT_XR_BD_spatial_anchor_sharing
static void serialize(const XrSpatialAnchorShareInfoBD* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).anchor);
}
#endif // XRTRANSPORT_EXT_XR_BD_spatial_anchor_sharing
#ifdef XRTRANSPORT_EXT_XR_BD_spatial_anchor_sharing
static void serialize(const XrSharedSpatialAnchorDownloadInfoBD* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).uuid);
}
#endif // XRTRANSPORT_EXT_XR_BD_spatial_anchor_sharing
#ifdef XRTRANSPORT_EXT_XR_BD_spatial_scene
static void serialize(const XrSystemSpatialScenePropertiesBD* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).supportsSpatialScene);
}
#endif // XRTRANSPORT_EXT_XR_BD_spatial_scene
#ifdef XRTRANSPORT_EXT_XR_BD_spatial_scene
static void serialize(const XrSceneCaptureInfoBD* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).next);
}
#endif // XRTRANSPORT_EXT_XR_BD_spatial_scene
#ifdef XRTRANSPORT_EXT_XR_BD_spatial_mesh
static void serialize(const XrSystemSpatialMeshPropertiesBD* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).supportsSpatialMesh);
}
#endif // XRTRANSPORT_EXT_XR_BD_spatial_mesh
#ifdef XRTRANSPORT_EXT_XR_BD_spatial_mesh
static void serialize(const XrSenseDataProviderCreateInfoSpatialMeshBD* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).configFlags), sizeof((*s).lod)) + sizeof((*s).lod);
}
#endif // XRTRANSPORT_EXT_XR_BD_spatial_mesh
#ifdef XRTRANSPORT_EXT_XR_BD_future_progress
static void serialize(const XrFuturePollResultProgressBD* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).isSupported), sizeof((*s).progressPercentage)) + sizeof((*s).progressPercentage);
}
#endif // XRTRANSPORT_EXT_XR_BD_future_progress
#ifdef XRTRANSPORT_EXT_XR_EXT_hand_tracking_data_source
static void serialize(const XrHandTrackingDataSourceInfoEXT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).requestedDataSourceCount), sizeof((*s).requestedDataSources)) + sizeof((*s).requestedDataSources);
}
#endif // XRTRANSPORT_EXT_XR_EXT_hand_tracking_data_source
#ifdef XRTRANSPORT_EXT_XR_EXT_hand_tracking_data_source
static void serialize(const XrHandTrackingDataSourceStateEXT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).isActive), sizeof((*s).dataSource)) + sizeof((*s).dataSource);
}
#endif // XRTRANSPORT_EXT_XR_EXT_hand_tracking_data_source
#ifdef XRTRANSPORT_EXT_XR_EXT_plane_detection
static void serialize(const XrPlaneDetectorCreateInfoEXT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).flags);
}
#endif // XRTRANSPORT_EXT_XR_EXT_plane_detection
#ifdef XRTRANSPORT_EXT_XR_EXT_plane_detection
static void serialize(const XrPlaneDetectorBeginInfoEXT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(align(align(align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).baseSpace), sizeof((*s).time)) + sizeof((*s).time), sizeof((*s).orientationCount)) + sizeof((*s).orientationCount), sizeof((*s).orientations)) + sizeof((*s).orientations), sizeof((*s).semanticTypeCount)) + sizeof((*s).semanticTypeCount), sizeof((*s).semanticTypes)) + sizeof((*s).semanticTypes), sizeof((*s).maxPlanes)) + sizeof((*s).maxPlanes), sizeof((*s).minArea)) + sizeof((*s).minArea), sizeof((*s).boundingBoxPose)) + sizeof((*s).boundingBoxPose), sizeof((*s).boundingBoxExtent)) + sizeof((*s).boundingBoxExtent);
}
#endif // XRTRANSPORT_EXT_XR_EXT_plane_detection
#ifdef XRTRANSPORT_EXT_XR_EXT_plane_detection
static void serialize(const XrPlaneDetectorGetInfoEXT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).baseSpace), sizeof((*s).time)) + sizeof((*s).time);
}
#endif // XRTRANSPORT_EXT_XR_EXT_plane_detection
#ifdef XRTRANSPORT_EXT_XR_EXT_plane_detection
static void serialize(const XrPlaneDetectorLocationsEXT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).planeLocationCapacityInput), sizeof((*s).planeLocationCountOutput)) + sizeof((*s).planeLocationCountOutput), sizeof((*s).planeLocations)) + sizeof((*s).planeLocations);
}
#endif // XRTRANSPORT_EXT_XR_EXT_plane_detection
#ifdef XRTRANSPORT_EXT_XR_EXT_plane_detection
static void serialize(const XrPlaneDetectorLocationEXT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).planeId), sizeof((*s).locationFlags)) + sizeof((*s).locationFlags), sizeof((*s).pose)) + sizeof((*s).pose), sizeof((*s).extents)) + sizeof((*s).extents), sizeof((*s).orientation)) + sizeof((*s).orientation), sizeof((*s).semanticType)) + sizeof((*s).semanticType), sizeof((*s).polygonBufferCount)) + sizeof((*s).polygonBufferCount);
}
#endif // XRTRANSPORT_EXT_XR_EXT_plane_detection
#ifdef XRTRANSPORT_EXT_XR_EXT_plane_detection
static void serialize(const XrPlaneDetectorPolygonBufferEXT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).vertexCapacityInput), sizeof((*s).vertexCountOutput)) + sizeof((*s).vertexCountOutput), sizeof((*s).vertices)) + sizeof((*s).vertices);
}
#endif // XRTRANSPORT_EXT_XR_EXT_plane_detection
#ifdef XRTRANSPORT_EXT_XR_EXT_plane_detection
static void serialize(const XrSystemPlaneDetectionPropertiesEXT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).supportedFeatures);
}
#endif // XRTRANSPORT_EXT_XR_EXT_plane_detection
#ifdef XRTRANSPORT_EXT_XR_EXT_future
static void serialize(const XrFutureCancelInfoEXT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).future);
}
#endif // XRTRANSPORT_EXT_XR_EXT_future
#ifdef XRTRANSPORT_EXT_XR_EXT_future
static void serialize(const XrFuturePollInfoEXT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).future);
}
#endif // XRTRANSPORT_EXT_XR_EXT_future
#ifdef XRTRANSPORT_EXT_XR_EXT_future
static void serialize(const XrFutureCompletionEXT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).futureResult);
}
#endif // XRTRANSPORT_EXT_XR_EXT_future
#ifdef XRTRANSPORT_EXT_XR_EXT_future
static void serialize(const XrFuturePollResultEXT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).state);
}
#endif // XRTRANSPORT_EXT_XR_EXT_future
#ifdef XRTRANSPORT_EXT_XR_EXT_user_presence
static void serialize(const XrEventDataUserPresenceChangedEXT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).session), sizeof((*s).isUserPresent)) + sizeof((*s).isUserPresent);
}
#endif // XRTRANSPORT_EXT_XR_EXT_user_presence
#ifdef XRTRANSPORT_EXT_XR_EXT_user_presence
static void serialize(const XrSystemUserPresencePropertiesEXT* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).supportsUserPresence);
}
#endif // XRTRANSPORT_EXT_XR_EXT_user_presence
static void serialize(const XrSpacesLocateInfo* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).baseSpace), sizeof((*s).time)) + sizeof((*s).time), sizeof((*s).spaceCount)) + sizeof((*s).spaceCount), sizeof((*s).spaces)) + sizeof((*s).spaces);
}
static void serialize(const XrSpaceLocations* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).locationCount), sizeof((*s).locations)) + sizeof((*s).locations);
}
static void serialize(const XrSpaceVelocities* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).velocityCount), sizeof((*s).velocities)) + sizeof((*s).velocities);
}
#ifdef XRTRANSPORT_EXT_XR_ML_user_calibration
static void serialize(const XrEventDataHeadsetFitChangedML* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).status), sizeof((*s).time)) + sizeof((*s).time);
}
#endif // XRTRANSPORT_EXT_XR_ML_user_calibration
#ifdef XRTRANSPORT_EXT_XR_ML_user_calibration
static void serialize(const XrEventDataEyeCalibrationChangedML* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).status);
}
#endif // XRTRANSPORT_EXT_XR_ML_user_calibration
#ifdef XRTRANSPORT_EXT_XR_ML_user_calibration
static void serialize(const XrUserCalibrationEnableEventsInfoML* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).enabled);
}
#endif // XRTRANSPORT_EXT_XR_ML_user_calibration
#ifdef XRTRANSPORT_EXT_XR_ML_system_notifications
static void serialize(const XrSystemNotificationsSetInfoML* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).suppressNotifications);
}
#endif // XRTRANSPORT_EXT_XR_ML_system_notifications
#ifdef XRTRANSPORT_EXT_XR_ML_world_mesh_detection
static void serialize(const XrWorldMeshDetectorCreateInfoML* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).next);
}
#endif // XRTRANSPORT_EXT_XR_ML_world_mesh_detection
#ifdef XRTRANSPORT_EXT_XR_ML_world_mesh_detection
static void serialize(const XrWorldMeshStateRequestInfoML* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).baseSpace), sizeof((*s).time)) + sizeof((*s).time), sizeof((*s).boundingBoxCenter)) + sizeof((*s).boundingBoxCenter), sizeof((*s).boundingBoxExtents)) + sizeof((*s).boundingBoxExtents);
}
#endif // XRTRANSPORT_EXT_XR_ML_world_mesh_detection
#ifdef XRTRANSPORT_EXT_XR_ML_world_mesh_detection
static void serialize(const XrWorldMeshBlockStateML* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).uuid), sizeof((*s).meshBoundingBoxCenter)) + sizeof((*s).meshBoundingBoxCenter), sizeof((*s).meshBoundingBoxExtents)) + sizeof((*s).meshBoundingBoxExtents), sizeof((*s).lastUpdateTime)) + sizeof((*s).lastUpdateTime), sizeof((*s).status)) + sizeof((*s).status);
}
#endif // XRTRANSPORT_EXT_XR_ML_world_mesh_detection
#ifdef XRTRANSPORT_EXT_XR_ML_world_mesh_detection
static void serialize(const XrWorldMeshStateRequestCompletionML* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).futureResult), sizeof((*s).timestamp)) + sizeof((*s).timestamp), sizeof((*s).meshBlockStateCapacityInput)) + sizeof((*s).meshBlockStateCapacityInput), sizeof((*s).meshBlockStateCountOutput)) + sizeof((*s).meshBlockStateCountOutput), sizeof((*s).meshBlockStates)) + sizeof((*s).meshBlockStates);
}
#endif // XRTRANSPORT_EXT_XR_ML_world_mesh_detection
#ifdef XRTRANSPORT_EXT_XR_ML_world_mesh_detection
static void serialize(const XrWorldMeshBufferRecommendedSizeInfoML* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).maxBlockCount);
}
#endif // XRTRANSPORT_EXT_XR_ML_world_mesh_detection
#ifdef XRTRANSPORT_EXT_XR_ML_world_mesh_detection
static void serialize(const XrWorldMeshBufferSizeML* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).size);
}
#endif // XRTRANSPORT_EXT_XR_ML_world_mesh_detection
#ifdef XRTRANSPORT_EXT_XR_ML_world_mesh_detection
static void serialize(const XrWorldMeshBufferML* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).bufferSize), sizeof((*s).buffer)) + sizeof((*s).buffer);
}
#endif // XRTRANSPORT_EXT_XR_ML_world_mesh_detection
#ifdef XRTRANSPORT_EXT_XR_ML_world_mesh_detection
static void serialize(const XrWorldMeshBlockRequestML* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).uuid), sizeof((*s).lod)) + sizeof((*s).lod);
}
#endif // XRTRANSPORT_EXT_XR_ML_world_mesh_detection
#ifdef XRTRANSPORT_EXT_XR_ML_world_mesh_detection
static void serialize(const XrWorldMeshGetInfoML* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).flags), sizeof((*s).fillHoleLength)) + sizeof((*s).fillHoleLength), sizeof((*s).disconnectedComponentArea)) + sizeof((*s).disconnectedComponentArea), sizeof((*s).blockCount)) + sizeof((*s).blockCount), sizeof((*s).blocks)) + sizeof((*s).blocks);
}
#endif // XRTRANSPORT_EXT_XR_ML_world_mesh_detection
#ifdef XRTRANSPORT_EXT_XR_ML_world_mesh_detection
static void serialize(const XrWorldMeshBlockML* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(align(align(align(align(align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).uuid), sizeof((*s).blockResult)) + sizeof((*s).blockResult), sizeof((*s).lod)) + sizeof((*s).lod), sizeof((*s).flags)) + sizeof((*s).flags), sizeof((*s).indexCount)) + sizeof((*s).indexCount), sizeof((*s).indexBuffer)) + sizeof((*s).indexBuffer), sizeof((*s).vertexCount)) + sizeof((*s).vertexCount), sizeof((*s).vertexBuffer)) + sizeof((*s).vertexBuffer), sizeof((*s).normalCount)) + sizeof((*s).normalCount), sizeof((*s).normalBuffer)) + sizeof((*s).normalBuffer), sizeof((*s).confidenceCount)) + sizeof((*s).confidenceCount), sizeof((*s).confidenceBuffer)) + sizeof((*s).confidenceBuffer);
}
#endif // XRTRANSPORT_EXT_XR_ML_world_mesh_detection
#ifdef XRTRANSPORT_EXT_XR_ML_world_mesh_detection
static void serialize(const XrWorldMeshRequestCompletionML* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).futureResult), sizeof((*s).blockCount)) + sizeof((*s).blockCount), sizeof((*s).blocks)) + sizeof((*s).blocks);
}
#endif // XRTRANSPORT_EXT_XR_ML_world_mesh_detection
#ifdef XRTRANSPORT_EXT_XR_ML_world_mesh_detection
static void serialize(const XrWorldMeshRequestCompletionInfoML* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).meshSpace), sizeof((*s).meshSpaceLocateTime)) + sizeof((*s).meshSpaceLocateTime);
}
#endif // XRTRANSPORT_EXT_XR_ML_world_mesh_detection
#ifdef XRTRANSPORT_EXT_XR_ML_facial_expression
static void serialize(const XrSystemFacialExpressionPropertiesML* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).supportsFacialExpression);
}
#endif // XRTRANSPORT_EXT_XR_ML_facial_expression
#ifdef XRTRANSPORT_EXT_XR_ML_facial_expression
static void serialize(const XrFacialExpressionClientCreateInfoML* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).requestedCount), sizeof((*s).requestedFacialBlendShapes)) + sizeof((*s).requestedFacialBlendShapes);
}
#endif // XRTRANSPORT_EXT_XR_ML_facial_expression
#ifdef XRTRANSPORT_EXT_XR_ML_facial_expression
static void serialize(const XrFacialExpressionBlendShapeGetInfoML* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).next);
}
#endif // XRTRANSPORT_EXT_XR_ML_facial_expression
#ifdef XRTRANSPORT_EXT_XR_ML_facial_expression
static void serialize(const XrFacialExpressionBlendShapePropertiesML* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).requestedFacialBlendShape), sizeof((*s).weight)) + sizeof((*s).weight), sizeof((*s).flags)) + sizeof((*s).flags), sizeof((*s).time)) + sizeof((*s).time);
}
#endif // XRTRANSPORT_EXT_XR_ML_facial_expression
#ifdef XRTRANSPORT_EXT_XR_META_simultaneous_hands_and_controllers
static void serialize(const XrSystemSimultaneousHandsAndControllersPropertiesMETA* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).supportsSimultaneousHandsAndControllers);
}
#endif // XRTRANSPORT_EXT_XR_META_simultaneous_hands_and_controllers
#ifdef XRTRANSPORT_EXT_XR_META_simultaneous_hands_and_controllers
static void serialize(const XrSimultaneousHandsAndControllersTrackingResumeInfoMETA* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).next);
}
#endif // XRTRANSPORT_EXT_XR_META_simultaneous_hands_and_controllers
#ifdef XRTRANSPORT_EXT_XR_META_simultaneous_hands_and_controllers
static void serialize(const XrSimultaneousHandsAndControllersTrackingPauseInfoMETA* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).next);
}
#endif // XRTRANSPORT_EXT_XR_META_simultaneous_hands_and_controllers
#ifdef XRTRANSPORT_EXT_XR_META_colocation_discovery
static void serialize(const XrColocationDiscoveryStartInfoMETA* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).next);
}
#endif // XRTRANSPORT_EXT_XR_META_colocation_discovery
#ifdef XRTRANSPORT_EXT_XR_META_colocation_discovery
static void serialize(const XrColocationDiscoveryStopInfoMETA* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).next);
}
#endif // XRTRANSPORT_EXT_XR_META_colocation_discovery
#ifdef XRTRANSPORT_EXT_XR_META_colocation_discovery
static void serialize(const XrColocationAdvertisementStartInfoMETA* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).bufferSize), sizeof((*s).buffer)) + sizeof((*s).buffer);
}
#endif // XRTRANSPORT_EXT_XR_META_colocation_discovery
#ifdef XRTRANSPORT_EXT_XR_META_colocation_discovery
static void serialize(const XrColocationAdvertisementStopInfoMETA* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).next);
}
#endif // XRTRANSPORT_EXT_XR_META_colocation_discovery
#ifdef XRTRANSPORT_EXT_XR_META_colocation_discovery
static void serialize(const XrEventDataStartColocationAdvertisementCompleteMETA* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).advertisementRequestId), sizeof((*s).result)) + sizeof((*s).result), sizeof((*s).advertisementUuid)) + sizeof((*s).advertisementUuid);
}
#endif // XRTRANSPORT_EXT_XR_META_colocation_discovery
#ifdef XRTRANSPORT_EXT_XR_META_colocation_discovery
static void serialize(const XrEventDataStopColocationAdvertisementCompleteMETA* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).requestId), sizeof((*s).result)) + sizeof((*s).result);
}
#endif // XRTRANSPORT_EXT_XR_META_colocation_discovery
#ifdef XRTRANSPORT_EXT_XR_META_colocation_discovery
static void serialize(const XrEventDataColocationAdvertisementCompleteMETA* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).advertisementRequestId), sizeof((*s).result)) + sizeof((*s).result);
}
#endif // XRTRANSPORT_EXT_XR_META_colocation_discovery
#ifdef XRTRANSPORT_EXT_XR_META_colocation_discovery
static void serialize(const XrEventDataStartColocationDiscoveryCompleteMETA* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).discoveryRequestId), sizeof((*s).result)) + sizeof((*s).result);
}
#endif // XRTRANSPORT_EXT_XR_META_colocation_discovery
#ifdef XRTRANSPORT_EXT_XR_META_colocation_discovery
static void serialize(const XrEventDataColocationDiscoveryResultMETA* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).discoveryRequestId), sizeof((*s).advertisementUuid)) + sizeof((*s).advertisementUuid), sizeof((*s).bufferSize)) + sizeof((*s).bufferSize), sizeof((*s).buffer)) + sizeof((*s).buffer);
}
#endif // XRTRANSPORT_EXT_XR_META_colocation_discovery
#ifdef XRTRANSPORT_EXT_XR_META_colocation_discovery
static void serialize(const XrEventDataColocationDiscoveryCompleteMETA* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).discoveryRequestId), sizeof((*s).result)) + sizeof((*s).result);
}
#endif // XRTRANSPORT_EXT_XR_META_colocation_discovery
#ifdef XRTRANSPORT_EXT_XR_META_colocation_discovery
static void serialize(const XrEventDataStopColocationDiscoveryCompleteMETA* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).requestId), sizeof((*s).result)) + sizeof((*s).result);
}
#endif // XRTRANSPORT_EXT_XR_META_colocation_discovery
#ifdef XRTRANSPORT_EXT_XR_META_colocation_discovery
static void serialize(const XrSystemColocationDiscoveryPropertiesMETA* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).supportsColocationDiscovery);
}
#endif // XRTRANSPORT_EXT_XR_META_colocation_discovery
#ifdef XRTRANSPORT_EXT_XR_META_spatial_entity_group_sharing
static void serialize(const XrShareSpacesRecipientGroupsMETA* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).groupCount), sizeof((*s).groups)) + sizeof((*s).groups);
}
#endif // XRTRANSPORT_EXT_XR_META_spatial_entity_group_sharing
#ifdef XRTRANSPORT_EXT_XR_META_spatial_entity_group_sharing
static void serialize(const XrSpaceGroupUuidFilterInfoMETA* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).groupUuid);
}
#endif // XRTRANSPORT_EXT_XR_META_spatial_entity_group_sharing
#ifdef XRTRANSPORT_EXT_XR_META_spatial_entity_group_sharing
static void serialize(const XrSystemSpatialEntityGroupSharingPropertiesMETA* s, std::ostream& out) {
constexpr std::size_t aligned_size = align(0 + sizeof((*s).type), sizeof((*s).next)) + sizeof((*s).supportsSpatialEntityGroupSharing);
}
#endif // XRTRANSPORT_EXT_XR_META_spatial_entity_group_sharing

} // namespace xrtransport

#endif // XRTRANSPORT_SERIALIZER_GENERATED_H
