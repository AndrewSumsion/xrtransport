The protocol starts out with a simple handshake:
- The client connects and sends version information
  - XR_CURRENT_API_VERSION (uint64_t)
  - xrtransport protocol version (uint32_t)
- The server responds with its version information in the same format
- The client sends an OK (>0 uint32_t) or QUIT (0 uint32_t) if the protocol is unacceptable
- The server sends an OK (>0 uint32_t) or QUIT (0 uint32_t) if the protocol is unacceptable

This spec doesn't define what makes a version difference unacceptable.
It is up to the developer to determine if any breaking changes between the protocol versions exist
When either side sends a QUIT, they are free to close the connection immediately.

After this, the protocol enters the running state. This consists of the client sending function requests, and the server responding.

The actual structure of this protocol is dynamic based on the types being sent. It is extremely stateful, i.e., minimal extra metadata
is sent along with the data, and both client and server rely on context to know what to deserialize.

Generally speaking, the protocol can be thought of as the client sending the result of a DFS of its arguments, and the server
responding with the result of the function call along with any arguments that may have changed. There are a few special markers
that are sent that are not data. These include:
- Function request header: uint32_t function index
- XR struct next type: The XrStructureType of the next struct in the chain, or XR_TYPE_UNKNOWN to indicate the end of the chain (nullptr)
- Pointer marker: All other pointer members are preceded by a uint8_t: 1 to indicate the pointer has a value, 0 to indicate nullptr

For a full understanding of how the protocol works, see the code generators.